// THIS FILE IS AUTOGENERATED FROM base/raft/proto/consensus.proto

#ifndef BASE_RPC_CONSENSUS_PROXY_DOT_H
#define BASE_RPC_CONSENSUS_PROXY_DOT_H

#include "base/raft/proto/consensus.pb.h"

#include "base/rpc/proxy.h"
#include "base/util/status.h"

namespace base { class Sockaddr; }
namespace base { namespace rpc { class UserCredentials; } }
namespace base {
namespace consensus {


class ConsensusServiceProxy : public ::base::rpc::Proxy {
 public:
  ConsensusServiceProxy(const std::shared_ptr< ::base::rpc::Messenger>
                &messenger, const ::base::Sockaddr &sockaddr);
  ~ConsensusServiceProxy();


  ::base::Status UpdateConsensus(const ConsensusRequestPB &req, ConsensusResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void UpdateConsensusAsync(const ConsensusRequestPB &req,
                       ConsensusResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status RequestConsensusVote(const VoteRequestPB &req, VoteResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void RequestConsensusVoteAsync(const VoteRequestPB &req,
                       VoteResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status ChangeConfig(const ChangeConfigRequestPB &req, ChangeConfigResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void ChangeConfigAsync(const ChangeConfigRequestPB &req,
                       ChangeConfigResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status GetNodeInstance(const GetNodeInstanceRequestPB &req, GetNodeInstanceResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void GetNodeInstanceAsync(const GetNodeInstanceRequestPB &req,
                       GetNodeInstanceResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status RunLeaderElection(const RunLeaderElectionRequestPB &req, RunLeaderElectionResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void RunLeaderElectionAsync(const RunLeaderElectionRequestPB &req,
                       RunLeaderElectionResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status LeaderStepDown(const LeaderStepDownRequestPB &req, LeaderStepDownResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void LeaderStepDownAsync(const LeaderStepDownRequestPB &req,
                       LeaderStepDownResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status GetLastOpId(const GetLastOpIdRequestPB &req, GetLastOpIdResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void GetLastOpIdAsync(const GetLastOpIdRequestPB &req,
                       GetLastOpIdResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status GetConsensusState(const GetConsensusStateRequestPB &req, GetConsensusStateResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void GetConsensusStateAsync(const GetConsensusStateRequestPB &req,
                       GetConsensusStateResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status StartTabletCopy(const StartTabletCopyRequestPB &req, StartTabletCopyResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void StartTabletCopyAsync(const StartTabletCopyRequestPB &req,
                       StartTabletCopyResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);
};

} // namespace consensus
} // namespace base

#endif
