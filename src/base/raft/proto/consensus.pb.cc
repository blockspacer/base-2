// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/consensus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/raft/proto/consensus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {
namespace consensus {

namespace {

const ::google::protobuf::Descriptor* ConsensusErrorPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusErrorPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConsensusErrorPB_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeConfigRecordPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeConfigRecordPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeConfigRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeConfigRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeConfigResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeConfigResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoOpRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoOpRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusStatusPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusStatusPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionStatusPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionStatusPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeInstanceRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeInstanceRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNodeInstanceResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNodeInstanceResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunLeaderElectionRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunLeaderElectionRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunLeaderElectionResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunLeaderElectionResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderStepDownRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderStepDownRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderStepDownResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderStepDownResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastOpIdRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastOpIdRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastOpIdResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastOpIdResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConsensusStateRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConsensusStateRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConsensusStateResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConsensusStateResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTabletCopyRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTabletCopyRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTabletCopyResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTabletCopyResponsePB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OperationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DriverType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeConfigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OpIdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto() {
  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/raft/proto/consensus.proto");
  GOOGLE_CHECK(file != NULL);
  ConsensusErrorPB_descriptor_ = file->message_type(0);
  static const int ConsensusErrorPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, status_),
  };
  ConsensusErrorPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusErrorPB_descriptor_,
      ConsensusErrorPB::default_instance_,
      ConsensusErrorPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusErrorPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusErrorPB));
  ConsensusErrorPB_Code_descriptor_ = ConsensusErrorPB_descriptor_->enum_type(0);
  ChangeConfigRecordPB_descriptor_ = file->message_type(1);
  static const int ChangeConfigRecordPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, old_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, new_config_),
  };
  ChangeConfigRecordPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeConfigRecordPB_descriptor_,
      ChangeConfigRecordPB::default_instance_,
      ChangeConfigRecordPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRecordPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeConfigRecordPB));
  ChangeConfigRequestPB_descriptor_ = file->message_type(2);
  static const int ChangeConfigRequestPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, cas_config_opid_index_),
  };
  ChangeConfigRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeConfigRequestPB_descriptor_,
      ChangeConfigRequestPB::default_instance_,
      ChangeConfigRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeConfigRequestPB));
  ChangeConfigResponsePB_descriptor_ = file->message_type(3);
  static const int ChangeConfigResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, new_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, timestamp_),
  };
  ChangeConfigResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeConfigResponsePB_descriptor_,
      ChangeConfigResponsePB::default_instance_,
      ChangeConfigResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeConfigResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeConfigResponsePB));
  ReplicateMsg_descriptor_ = file->message_type(4);
  static const int ReplicateMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, change_config_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, noop_request_),
  };
  ReplicateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplicateMsg_descriptor_,
      ReplicateMsg::default_instance_,
      ReplicateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplicateMsg));
  CommitMsg_descriptor_ = file->message_type(5);
  static const int CommitMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, commited_op_id_),
  };
  CommitMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommitMsg_descriptor_,
      CommitMsg::default_instance_,
      CommitMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommitMsg));
  NoOpRequestPB_descriptor_ = file->message_type(6);
  static const int NoOpRequestPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoOpRequestPB, payload_for_tests_),
  };
  NoOpRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoOpRequestPB_descriptor_,
      NoOpRequestPB::default_instance_,
      NoOpRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoOpRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoOpRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoOpRequestPB));
  ConsensusStatusPB_descriptor_ = file->message_type(7);
  static const int ConsensusStatusPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, last_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, last_received_current_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, last_committed_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, error_),
  };
  ConsensusStatusPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusStatusPB_descriptor_,
      ConsensusStatusPB::default_instance_,
      ConsensusStatusPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatusPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusStatusPB));
  VoteRequestPB_descriptor_ = file->message_type(8);
  static const int VoteRequestPB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, candidate_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, candidate_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, candidate_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, ignore_live_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, is_pre_election_),
  };
  VoteRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteRequestPB_descriptor_,
      VoteRequestPB::default_instance_,
      VoteRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteRequestPB));
  VoteResponsePB_descriptor_ = file->message_type(9);
  static const int VoteResponsePB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, responder_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, responder_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, vote_granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, consensus_error_),
  };
  VoteResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteResponsePB_descriptor_,
      VoteResponsePB::default_instance_,
      VoteResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteResponsePB));
  ConsensusRequestPB_descriptor_ = file->message_type(10);
  static const int ConsensusRequestPB_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, caller_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, caller_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, preceding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, committed_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, deprecated_committed_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, all_replicated_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, safe_timestamp_),
  };
  ConsensusRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusRequestPB_descriptor_,
      ConsensusRequestPB::default_instance_,
      ConsensusRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusRequestPB));
  ConsensusResponsePB_descriptor_ = file->message_type(11);
  static const int ConsensusResponsePB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, responder_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, responder_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, status_),
  };
  ConsensusResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusResponsePB_descriptor_,
      ConsensusResponsePB::default_instance_,
      ConsensusResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusResponsePB));
  TransactionStatusPB_descriptor_ = file->message_type(12);
  static const int TransactionStatusPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, op_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, tx_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, running_for_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, trace_buffer_),
  };
  TransactionStatusPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionStatusPB_descriptor_,
      TransactionStatusPB::default_instance_,
      TransactionStatusPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionStatusPB));
  GetNodeInstanceRequestPB_descriptor_ = file->message_type(13);
  static const int GetNodeInstanceRequestPB_offsets_[1] = {
  };
  GetNodeInstanceRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeInstanceRequestPB_descriptor_,
      GetNodeInstanceRequestPB::default_instance_,
      GetNodeInstanceRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeInstanceRequestPB));
  GetNodeInstanceResponsePB_descriptor_ = file->message_type(14);
  static const int GetNodeInstanceResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceResponsePB, node_instance_),
  };
  GetNodeInstanceResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNodeInstanceResponsePB_descriptor_,
      GetNodeInstanceResponsePB::default_instance_,
      GetNodeInstanceResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeInstanceResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNodeInstanceResponsePB));
  RunLeaderElectionRequestPB_descriptor_ = file->message_type(15);
  static const int RunLeaderElectionRequestPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, tablet_id_),
  };
  RunLeaderElectionRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunLeaderElectionRequestPB_descriptor_,
      RunLeaderElectionRequestPB::default_instance_,
      RunLeaderElectionRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunLeaderElectionRequestPB));
  RunLeaderElectionResponsePB_descriptor_ = file->message_type(16);
  static const int RunLeaderElectionResponsePB_offsets_[1] = {
  };
  RunLeaderElectionResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunLeaderElectionResponsePB_descriptor_,
      RunLeaderElectionResponsePB::default_instance_,
      RunLeaderElectionResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunLeaderElectionResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunLeaderElectionResponsePB));
  LeaderStepDownRequestPB_descriptor_ = file->message_type(17);
  static const int LeaderStepDownRequestPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, tablet_id_),
  };
  LeaderStepDownRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderStepDownRequestPB_descriptor_,
      LeaderStepDownRequestPB::default_instance_,
      LeaderStepDownRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderStepDownRequestPB));
  LeaderStepDownResponsePB_descriptor_ = file->message_type(18);
  static const int LeaderStepDownResponsePB_offsets_[1] = {
  };
  LeaderStepDownResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderStepDownResponsePB_descriptor_,
      LeaderStepDownResponsePB::default_instance_,
      LeaderStepDownResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStepDownResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderStepDownResponsePB));
  GetLastOpIdRequestPB_descriptor_ = file->message_type(19);
  static const int GetLastOpIdRequestPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, opid_type_),
  };
  GetLastOpIdRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLastOpIdRequestPB_descriptor_,
      GetLastOpIdRequestPB::default_instance_,
      GetLastOpIdRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastOpIdRequestPB));
  GetLastOpIdResponsePB_descriptor_ = file->message_type(20);
  static const int GetLastOpIdResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, opid_),
  };
  GetLastOpIdResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLastOpIdResponsePB_descriptor_,
      GetLastOpIdResponsePB::default_instance_,
      GetLastOpIdResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastOpIdResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastOpIdResponsePB));
  GetConsensusStateRequestPB_descriptor_ = file->message_type(21);
  static const int GetConsensusStateRequestPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, type_),
  };
  GetConsensusStateRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConsensusStateRequestPB_descriptor_,
      GetConsensusStateRequestPB::default_instance_,
      GetConsensusStateRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConsensusStateRequestPB));
  GetConsensusStateResponsePB_descriptor_ = file->message_type(22);
  static const int GetConsensusStateResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, cstate_),
  };
  GetConsensusStateResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConsensusStateResponsePB_descriptor_,
      GetConsensusStateResponsePB::default_instance_,
      GetConsensusStateResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConsensusStateResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConsensusStateResponsePB));
  StartTabletCopyRequestPB_descriptor_ = file->message_type(23);
  static const int StartTabletCopyRequestPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, dest_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, copy_peer_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, copy_peer_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, caller_term_),
  };
  StartTabletCopyRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartTabletCopyRequestPB_descriptor_,
      StartTabletCopyRequestPB::default_instance_,
      StartTabletCopyRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartTabletCopyRequestPB));
  StartTabletCopyResponsePB_descriptor_ = file->message_type(24);
  static const int StartTabletCopyResponsePB_offsets_[1] = {
  };
  StartTabletCopyResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartTabletCopyResponsePB_descriptor_,
      StartTabletCopyResponsePB::default_instance_,
      StartTabletCopyResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTabletCopyResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartTabletCopyResponsePB));
  OperationType_descriptor_ = file->enum_type(0);
  DriverType_descriptor_ = file->enum_type(1);
  ChangeConfigType_descriptor_ = file->enum_type(2);
  OpIdType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusErrorPB_descriptor_, &ConsensusErrorPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeConfigRecordPB_descriptor_, &ChangeConfigRecordPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeConfigRequestPB_descriptor_, &ChangeConfigRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeConfigResponsePB_descriptor_, &ChangeConfigResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplicateMsg_descriptor_, &ReplicateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommitMsg_descriptor_, &CommitMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoOpRequestPB_descriptor_, &NoOpRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusStatusPB_descriptor_, &ConsensusStatusPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteRequestPB_descriptor_, &VoteRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteResponsePB_descriptor_, &VoteResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusRequestPB_descriptor_, &ConsensusRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusResponsePB_descriptor_, &ConsensusResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionStatusPB_descriptor_, &TransactionStatusPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeInstanceRequestPB_descriptor_, &GetNodeInstanceRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNodeInstanceResponsePB_descriptor_, &GetNodeInstanceResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunLeaderElectionRequestPB_descriptor_, &RunLeaderElectionRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunLeaderElectionResponsePB_descriptor_, &RunLeaderElectionResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderStepDownRequestPB_descriptor_, &LeaderStepDownRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderStepDownResponsePB_descriptor_, &LeaderStepDownResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastOpIdRequestPB_descriptor_, &GetLastOpIdRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastOpIdResponsePB_descriptor_, &GetLastOpIdResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConsensusStateRequestPB_descriptor_, &GetConsensusStateRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConsensusStateResponsePB_descriptor_, &GetConsensusStateResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartTabletCopyRequestPB_descriptor_, &StartTabletCopyRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartTabletCopyResponsePB_descriptor_, &StartTabletCopyResponsePB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto() {
  delete ConsensusErrorPB::default_instance_;
  delete ConsensusErrorPB_reflection_;
  delete ChangeConfigRecordPB::default_instance_;
  delete ChangeConfigRecordPB_reflection_;
  delete ChangeConfigRequestPB::default_instance_;
  delete ChangeConfigRequestPB_reflection_;
  delete ChangeConfigResponsePB::default_instance_;
  delete ChangeConfigResponsePB_reflection_;
  delete ReplicateMsg::default_instance_;
  delete ReplicateMsg_reflection_;
  delete CommitMsg::default_instance_;
  delete CommitMsg_reflection_;
  delete NoOpRequestPB::default_instance_;
  delete NoOpRequestPB_reflection_;
  delete ConsensusStatusPB::default_instance_;
  delete ConsensusStatusPB_reflection_;
  delete VoteRequestPB::default_instance_;
  delete VoteRequestPB_reflection_;
  delete VoteResponsePB::default_instance_;
  delete VoteResponsePB_reflection_;
  delete ConsensusRequestPB::default_instance_;
  delete ConsensusRequestPB_reflection_;
  delete ConsensusResponsePB::default_instance_;
  delete ConsensusResponsePB_reflection_;
  delete TransactionStatusPB::default_instance_;
  delete TransactionStatusPB_reflection_;
  delete GetNodeInstanceRequestPB::default_instance_;
  delete GetNodeInstanceRequestPB_reflection_;
  delete GetNodeInstanceResponsePB::default_instance_;
  delete GetNodeInstanceResponsePB_reflection_;
  delete RunLeaderElectionRequestPB::default_instance_;
  delete RunLeaderElectionRequestPB_reflection_;
  delete RunLeaderElectionResponsePB::default_instance_;
  delete RunLeaderElectionResponsePB_reflection_;
  delete LeaderStepDownRequestPB::default_instance_;
  delete LeaderStepDownRequestPB_reflection_;
  delete LeaderStepDownResponsePB::default_instance_;
  delete LeaderStepDownResponsePB_reflection_;
  delete GetLastOpIdRequestPB::default_instance_;
  delete GetLastOpIdRequestPB_reflection_;
  delete GetLastOpIdResponsePB::default_instance_;
  delete GetLastOpIdResponsePB_reflection_;
  delete GetConsensusStateRequestPB::default_instance_;
  delete GetConsensusStateRequestPB_reflection_;
  delete GetConsensusStateResponsePB::default_instance_;
  delete GetConsensusStateResponsePB_reflection_;
  delete StartTabletCopyRequestPB::default_instance_;
  delete StartTabletCopyRequestPB_reflection_;
  delete StartTabletCopyResponsePB::default_instance_;
  delete StartTabletCopyResponsePB_reflection_;
}

void protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::base::protobuf_AddDesc_base_2fcommon_2fcommon_2eproto();
  ::base::protobuf_AddDesc_base_2fcommon_2fwire_5fprotocol_2eproto();
  ::base::consensus::protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  ::base::consensus::protobuf_AddDesc_base_2fraft_2fproto_2fopid_2eproto();
  ::base::rpc::protobuf_AddDesc_base_2frpc_2frpc_5fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037base/raft/proto/consensus.proto\022\016base."
    "consensus\032\030base/common/common.proto\032\037bas"
    "e/common/wire_protocol.proto\032\036base/raft/"
    "proto/metadata.proto\032\032base/raft/proto/op"
    "id.proto\032\031base/rpc/rpc_header.proto\"\255\002\n\020"
    "ConsensusErrorPB\0223\n\004code\030\001 \002(\0162%.base.co"
    "nsensus.ConsensusErrorPB.Code\022!\n\006status\030"
    "\002 \002(\0132\021.base.AppStatusPB\"\300\001\n\004Code\022\013\n\007UNK"
    "NOWN\020\000\022\020\n\014INVALID_TERM\020\002\022\025\n\021LAST_OPID_TO"
    "O_OLD\020\003\022\021\n\rALREADY_VOTED\020\004\022\021\n\rNOT_IN_QUO"
    "RUM\020\005\022\037\n\033PRECEDING_ENTRY_DIDNT_MATCH\020\006\022\023"
    "\n\017LEADER_IS_ALIVE\020\007\022\022\n\016CONSENSUS_BUSY\020\010\022"
    "\022\n\016CANNOT_PREPARE\020\t\"\215\001\n\024ChangeConfigReco"
    "rdPB\022\021\n\ttablet_id\030\001 \002(\014\0220\n\nold_config\030\002 "
    "\002(\0132\034.base.consensus.RaftConfigPB\0220\n\nnew"
    "_config\030\003 \002(\0132\034.base.consensus.RaftConfi"
    "gPB\"\270\001\n\025ChangeConfigRequestPB\022\021\n\tdest_uu"
    "id\030\004 \001(\014\022\021\n\ttablet_id\030\001 \002(\014\022.\n\004type\030\002 \001("
    "\0162 .base.consensus.ChangeConfigType\022*\n\006s"
    "erver\030\003 \001(\0132\032.base.consensus.RaftPeerPB\022"
    "\035\n\025cas_config_opid_index\030\005 \001(\003\"[\n\026Change"
    "ConfigResponsePB\022.\n\nnew_config\030\002 \001(\0132\032.b"
    "ase.consensus.RaftPeerPB\022\021\n\ttimestamp\030\003 "
    "\001(\006\"\230\002\n\014ReplicateMsg\022 \n\002id\030\001 \002(\0132\024.base."
    "consensus.OpId\022\021\n\ttimestamp\030\002 \002(\006\022.\n\007op_"
    "type\030\004 \002(\0162\035.base.consensus.OperationTyp"
    "e\022B\n\024change_config_record\030\007 \001(\0132$.base.c"
    "onsensus.ChangeConfigRecordPB\022)\n\nrequest"
    "_id\030\010 \001(\0132\025.base.rpc.RequestIdPB\0224\n\014noop"
    "_request\030\347\007 \001(\0132\035.base.consensus.NoOpReq"
    "uestPB\"i\n\tCommitMsg\022.\n\007op_type\030\001 \002(\0162\035.b"
    "ase.consensus.OperationType\022,\n\016commited_"
    "op_id\030\002 \001(\0132\024.base.consensus.OpId\"*\n\rNoO"
    "pRequestPB\022\031\n\021payload_for_tests\030\001 \001(\014\"\311\001"
    "\n\021ConsensusStatusPB\022+\n\rlast_received\030\001 \002"
    "(\0132\024.base.consensus.OpId\022:\n\034last_receive"
    "d_current_leader\030\004 \001(\0132\024.base.consensus."
    "OpId\022\032\n\022last_committed_idx\030\002 \001(\003\022/\n\005erro"
    "r\030\003 \001(\0132 .base.consensus.ConsensusErrorP"
    "B\"\345\001\n\rVoteRequestPB\022\021\n\tdest_uuid\030\006 \001(\014\022\021"
    "\n\ttablet_id\030\001 \002(\t\022\026\n\016candidate_uuid\030\002 \002("
    "\014\022\026\n\016candidate_term\030\003 \002(\003\022;\n\020candidate_s"
    "tatus\030\004 \002(\0132!.base.consensus.ConsensusSt"
    "atusPB\022!\n\022ignore_live_leader\030\005 \001(\010:\005fals"
    "e\022\036\n\017is_pre_election\030\007 \001(\010:\005false\"\222\001\n\016Vo"
    "teResponsePB\022\026\n\016responder_uuid\030\001 \001(\014\022\026\n\016"
    "responder_term\030\002 \001(\003\022\024\n\014vote_granted\030\003 \001"
    "(\010\022:\n\017consensus_error\030\346\007 \001(\0132 .base.cons"
    "ensus.ConsensusErrorPB\"\304\002\n\022ConsensusRequ"
    "estPB\022\021\n\tdest_uuid\030\007 \001(\014\022\021\n\ttablet_id\030\001 "
    "\002(\t\022\023\n\013caller_uuid\030\002 \002(\014\022\023\n\013caller_term\030"
    "\003 \002(\003\022*\n\014preceding_id\030\004 \001(\0132\024.base.conse"
    "nsus.OpId\022\027\n\017committed_index\030\010 \001(\003\0228\n\032DE"
    "PRECATED_committed_index\030\005 \001(\0132\024.base.co"
    "nsensus.OpId\022)\n\003ops\030\006 \003(\0132\034.base.consens"
    "us.ReplicateMsg\022\034\n\024all_replicated_index\030"
    "\t \001(\003\022\026\n\016safe_timestamp\030\n \001(\006\"x\n\023Consens"
    "usResponsePB\022\026\n\016responder_uuid\030\001 \001(\014\022\026\n\016"
    "responder_term\030\002 \001(\003\0221\n\006status\030\003 \001(\0132!.b"
    "ase.consensus.ConsensusStatusPB\"\261\001\n\023Tran"
    "sactionStatusPB\022#\n\005op_id\030\001 \002(\0132\024.base.co"
    "nsensus.OpId\022.\n\007tx_type\030\002 \002(\0162\035.base.con"
    "sensus.OperationType\022\032\n\022running_for_micr"
    "os\030\003 \002(\003\022\023\n\013description\030\004 \002(\t\022\024\n\014trace_b"
    "uffer\030\006 \001(\t\"\032\n\030GetNodeInstanceRequestPB\""
    "H\n\031GetNodeInstanceResponsePB\022+\n\rnode_ins"
    "tance\030\001 \002(\0132\024.base.NodeInstancePB\"B\n\032Run"
    "LeaderElectionRequestPB\022\021\n\tdest_uuid\030\002 \001"
    "(\014\022\021\n\ttablet_id\030\001 \002(\014\"\035\n\033RunLeaderElecti"
    "onResponsePB\"\?\n\027LeaderStepDownRequestPB\022"
    "\021\n\tdest_uuid\030\002 \001(\014\022\021\n\ttablet_id\030\001 \002(\014\"\032\n"
    "\030LeaderStepDownResponsePB\"x\n\024GetLastOpId"
    "RequestPB\022\021\n\tdest_uuid\030\002 \001(\014\022\021\n\ttablet_i"
    "d\030\001 \002(\014\022:\n\topid_type\030\003 \001(\0162\030.base.consen"
    "sus.OpIdType:\rRECEIVED_OPID\";\n\025GetLastOp"
    "IdResponsePB\022\"\n\004opid\030\001 \001(\0132\024.base.consen"
    "sus.OpId\"\221\001\n\032GetConsensusStateRequestPB\022"
    "\021\n\tdest_uuid\030\002 \001(\014\022\021\n\ttablet_id\030\001 \002(\014\022M\n"
    "\004type\030\003 \001(\0162#.base.consensus.ConsensusCo"
    "nfigType:\032CONSENSUS_CONFIG_COMMITTED\"O\n\033"
    "GetConsensusStateResponsePB\0220\n\006cstate\030\001 "
    "\001(\0132 .base.consensus.ConsensusStatePB\"\233\001"
    "\n\030StartTabletCopyRequestPB\022\021\n\tdest_uuid\030"
    "\005 \001(\014\022\021\n\ttablet_id\030\001 \002(\014\022\026\n\016copy_peer_uu"
    "id\030\002 \002(\014\022(\n\016copy_peer_addr\030\003 \002(\0132\020.base."
    "HostPortPB\022\027\n\013caller_term\030\004 \001(\003:\002-1\"\033\n\031S"
    "tartTabletCopyResponsePB*N\n\rOperationTyp"
    "e\022\016\n\nUNKNOWN_OP\020\000\022\t\n\005NO_OP\020\001\022\014\n\010WRITE_OP"
    "\020\003\022\024\n\020CHANGE_CONFIG_OP\020\004*9\n\nDriverType\022\022"
    "\n\016UNKNOWN_DRIVER\020\000\022\n\n\006LEADER\020\001\022\013\n\007REPLIC"
    "A\020\002*Z\n\020ChangeConfigType\022\022\n\016UNKNOWN_CHANG"
    "E\020\000\022\016\n\nADD_SERVER\020\001\022\021\n\rREMOVE_SERVER\020\002\022\017"
    "\n\013CHANGE_ROLE\020\003*H\n\010OpIdType\022\025\n\021UNKNOWN_O"
    "PID_TYPE\020\000\022\021\n\rRECEIVED_OPID\020\001\022\022\n\016COMMITT"
    "ED_OPID\020\0022\221\007\n\020ConsensusService\022Z\n\017Update"
    "Consensus\022\".base.consensus.ConsensusRequ"
    "estPB\032#.base.consensus.ConsensusResponse"
    "PB\022U\n\024RequestConsensusVote\022\035.base.consen"
    "sus.VoteRequestPB\032\036.base.consensus.VoteR"
    "esponsePB\022]\n\014ChangeConfig\022%.base.consens"
    "us.ChangeConfigRequestPB\032&.base.consensu"
    "s.ChangeConfigResponsePB\022f\n\017GetNodeInsta"
    "nce\022(.base.consensus.GetNodeInstanceRequ"
    "estPB\032).base.consensus.GetNodeInstanceRe"
    "sponsePB\022l\n\021RunLeaderElection\022*.base.con"
    "sensus.RunLeaderElectionRequestPB\032+.base"
    ".consensus.RunLeaderElectionResponsePB\022c"
    "\n\016LeaderStepDown\022\'.base.consensus.Leader"
    "StepDownRequestPB\032(.base.consensus.Leade"
    "rStepDownResponsePB\022Z\n\013GetLastOpId\022$.bas"
    "e.consensus.GetLastOpIdRequestPB\032%.base."
    "consensus.GetLastOpIdResponsePB\022l\n\021GetCo"
    "nsensusState\022*.base.consensus.GetConsens"
    "usStateRequestPB\032+.base.consensus.GetCon"
    "sensusStateResponsePB\022f\n\017StartTabletCopy"
    "\022(.base.consensus.StartTabletCopyRequest"
    "PB\032).base.consensus.StartTabletCopyRespo"
    "nsePB", 4685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/raft/proto/consensus.proto", &protobuf_RegisterTypes);
  ConsensusErrorPB::default_instance_ = new ConsensusErrorPB();
  ChangeConfigRecordPB::default_instance_ = new ChangeConfigRecordPB();
  ChangeConfigRequestPB::default_instance_ = new ChangeConfigRequestPB();
  ChangeConfigResponsePB::default_instance_ = new ChangeConfigResponsePB();
  ReplicateMsg::default_instance_ = new ReplicateMsg();
  CommitMsg::default_instance_ = new CommitMsg();
  NoOpRequestPB::default_instance_ = new NoOpRequestPB();
  ConsensusStatusPB::default_instance_ = new ConsensusStatusPB();
  VoteRequestPB::default_instance_ = new VoteRequestPB();
  VoteResponsePB::default_instance_ = new VoteResponsePB();
  ConsensusRequestPB::default_instance_ = new ConsensusRequestPB();
  ConsensusResponsePB::default_instance_ = new ConsensusResponsePB();
  TransactionStatusPB::default_instance_ = new TransactionStatusPB();
  GetNodeInstanceRequestPB::default_instance_ = new GetNodeInstanceRequestPB();
  GetNodeInstanceResponsePB::default_instance_ = new GetNodeInstanceResponsePB();
  RunLeaderElectionRequestPB::default_instance_ = new RunLeaderElectionRequestPB();
  RunLeaderElectionResponsePB::default_instance_ = new RunLeaderElectionResponsePB();
  LeaderStepDownRequestPB::default_instance_ = new LeaderStepDownRequestPB();
  LeaderStepDownResponsePB::default_instance_ = new LeaderStepDownResponsePB();
  GetLastOpIdRequestPB::default_instance_ = new GetLastOpIdRequestPB();
  GetLastOpIdResponsePB::default_instance_ = new GetLastOpIdResponsePB();
  GetConsensusStateRequestPB::default_instance_ = new GetConsensusStateRequestPB();
  GetConsensusStateResponsePB::default_instance_ = new GetConsensusStateResponsePB();
  StartTabletCopyRequestPB::default_instance_ = new StartTabletCopyRequestPB();
  StartTabletCopyResponsePB::default_instance_ = new StartTabletCopyResponsePB();
  ConsensusErrorPB::default_instance_->InitAsDefaultInstance();
  ChangeConfigRecordPB::default_instance_->InitAsDefaultInstance();
  ChangeConfigRequestPB::default_instance_->InitAsDefaultInstance();
  ChangeConfigResponsePB::default_instance_->InitAsDefaultInstance();
  ReplicateMsg::default_instance_->InitAsDefaultInstance();
  CommitMsg::default_instance_->InitAsDefaultInstance();
  NoOpRequestPB::default_instance_->InitAsDefaultInstance();
  ConsensusStatusPB::default_instance_->InitAsDefaultInstance();
  VoteRequestPB::default_instance_->InitAsDefaultInstance();
  VoteResponsePB::default_instance_->InitAsDefaultInstance();
  ConsensusRequestPB::default_instance_->InitAsDefaultInstance();
  ConsensusResponsePB::default_instance_->InitAsDefaultInstance();
  TransactionStatusPB::default_instance_->InitAsDefaultInstance();
  GetNodeInstanceRequestPB::default_instance_->InitAsDefaultInstance();
  GetNodeInstanceResponsePB::default_instance_->InitAsDefaultInstance();
  RunLeaderElectionRequestPB::default_instance_->InitAsDefaultInstance();
  RunLeaderElectionResponsePB::default_instance_->InitAsDefaultInstance();
  LeaderStepDownRequestPB::default_instance_->InitAsDefaultInstance();
  LeaderStepDownResponsePB::default_instance_->InitAsDefaultInstance();
  GetLastOpIdRequestPB::default_instance_->InitAsDefaultInstance();
  GetLastOpIdResponsePB::default_instance_->InitAsDefaultInstance();
  GetConsensusStateRequestPB::default_instance_->InitAsDefaultInstance();
  GetConsensusStateResponsePB::default_instance_->InitAsDefaultInstance();
  StartTabletCopyRequestPB::default_instance_->InitAsDefaultInstance();
  StartTabletCopyResponsePB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fraft_2fproto_2fconsensus_2eproto {
  StaticDescriptorInitializer_base_2fraft_2fproto_2fconsensus_2eproto() {
    protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  }
} static_descriptor_initializer_base_2fraft_2fproto_2fconsensus_2eproto_;
const ::google::protobuf::EnumDescriptor* OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationType_descriptor_;
}
bool OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DriverType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverType_descriptor_;
}
bool DriverType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChangeConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeConfigType_descriptor_;
}
bool ChangeConfigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpIdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpIdType_descriptor_;
}
bool OpIdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ConsensusErrorPB_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusErrorPB_Code_descriptor_;
}
bool ConsensusErrorPB_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ConsensusErrorPB_Code ConsensusErrorPB::UNKNOWN;
const ConsensusErrorPB_Code ConsensusErrorPB::INVALID_TERM;
const ConsensusErrorPB_Code ConsensusErrorPB::LAST_OPID_TOO_OLD;
const ConsensusErrorPB_Code ConsensusErrorPB::ALREADY_VOTED;
const ConsensusErrorPB_Code ConsensusErrorPB::NOT_IN_QUORUM;
const ConsensusErrorPB_Code ConsensusErrorPB::PRECEDING_ENTRY_DIDNT_MATCH;
const ConsensusErrorPB_Code ConsensusErrorPB::LEADER_IS_ALIVE;
const ConsensusErrorPB_Code ConsensusErrorPB::CONSENSUS_BUSY;
const ConsensusErrorPB_Code ConsensusErrorPB::CANNOT_PREPARE;
const ConsensusErrorPB_Code ConsensusErrorPB::Code_MIN;
const ConsensusErrorPB_Code ConsensusErrorPB::Code_MAX;
const int ConsensusErrorPB::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ConsensusErrorPB::kCodeFieldNumber;
const int ConsensusErrorPB::kStatusFieldNumber;
#endif  // !_MSC_VER

ConsensusErrorPB::ConsensusErrorPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ConsensusErrorPB)
}

void ConsensusErrorPB::InitAsDefaultInstance() {
  status_ = const_cast< ::base::AppStatusPB*>(&::base::AppStatusPB::default_instance());
}

ConsensusErrorPB::ConsensusErrorPB(const ConsensusErrorPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ConsensusErrorPB)
}

void ConsensusErrorPB::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusErrorPB::~ConsensusErrorPB() {
  // @@protoc_insertion_point(destructor:base.consensus.ConsensusErrorPB)
  SharedDtor();
}

void ConsensusErrorPB::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void ConsensusErrorPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusErrorPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusErrorPB_descriptor_;
}

const ConsensusErrorPB& ConsensusErrorPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ConsensusErrorPB* ConsensusErrorPB::default_instance_ = NULL;

ConsensusErrorPB* ConsensusErrorPB::New() const {
  return new ConsensusErrorPB;
}

void ConsensusErrorPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_status()) {
      if (status_ != NULL) status_->::base::AppStatusPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusErrorPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ConsensusErrorPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.consensus.ConsensusErrorPB.Code code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::ConsensusErrorPB_Code_IsValid(value)) {
            set_code(static_cast< ::base::consensus::ConsensusErrorPB_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .base.AppStatusPB status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ConsensusErrorPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ConsensusErrorPB)
  return false;
#undef DO_
}

void ConsensusErrorPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ConsensusErrorPB)
  // required .base.consensus.ConsensusErrorPB.Code code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // required .base.AppStatusPB status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ConsensusErrorPB)
}

::google::protobuf::uint8* ConsensusErrorPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ConsensusErrorPB)
  // required .base.consensus.ConsensusErrorPB.Code code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // required .base.AppStatusPB status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ConsensusErrorPB)
  return target;
}

int ConsensusErrorPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.consensus.ConsensusErrorPB.Code code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // required .base.AppStatusPB status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusErrorPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusErrorPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusErrorPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusErrorPB::MergeFrom(const ConsensusErrorPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_status()) {
      mutable_status()->::base::AppStatusPB::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusErrorPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusErrorPB::CopyFrom(const ConsensusErrorPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusErrorPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ConsensusErrorPB::Swap(ConsensusErrorPB* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusErrorPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusErrorPB_descriptor_;
  metadata.reflection = ConsensusErrorPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeConfigRecordPB::kTabletIdFieldNumber;
const int ChangeConfigRecordPB::kOldConfigFieldNumber;
const int ChangeConfigRecordPB::kNewConfigFieldNumber;
#endif  // !_MSC_VER

ChangeConfigRecordPB::ChangeConfigRecordPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ChangeConfigRecordPB)
}

void ChangeConfigRecordPB::InitAsDefaultInstance() {
  old_config_ = const_cast< ::base::consensus::RaftConfigPB*>(&::base::consensus::RaftConfigPB::default_instance());
  new_config_ = const_cast< ::base::consensus::RaftConfigPB*>(&::base::consensus::RaftConfigPB::default_instance());
}

ChangeConfigRecordPB::ChangeConfigRecordPB(const ChangeConfigRecordPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ChangeConfigRecordPB)
}

void ChangeConfigRecordPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_config_ = NULL;
  new_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeConfigRecordPB::~ChangeConfigRecordPB() {
  // @@protoc_insertion_point(destructor:base.consensus.ChangeConfigRecordPB)
  SharedDtor();
}

void ChangeConfigRecordPB::SharedDtor() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
    delete old_config_;
    delete new_config_;
  }
}

void ChangeConfigRecordPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConfigRecordPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeConfigRecordPB_descriptor_;
}

const ChangeConfigRecordPB& ChangeConfigRecordPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ChangeConfigRecordPB* ChangeConfigRecordPB::default_instance_ = NULL;

ChangeConfigRecordPB* ChangeConfigRecordPB::New() const {
  return new ChangeConfigRecordPB;
}

void ChangeConfigRecordPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    if (has_old_config()) {
      if (old_config_ != NULL) old_config_->::base::consensus::RaftConfigPB::Clear();
    }
    if (has_new_config()) {
      if (new_config_ != NULL) new_config_->::base::consensus::RaftConfigPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeConfigRecordPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ChangeConfigRecordPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_old_config;
        break;
      }

      // required .base.consensus.RaftConfigPB old_config = 2;
      case 2: {
        if (tag == 18) {
         parse_old_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_config;
        break;
      }

      // required .base.consensus.RaftConfigPB new_config = 3;
      case 3: {
        if (tag == 26) {
         parse_new_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ChangeConfigRecordPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ChangeConfigRecordPB)
  return false;
#undef DO_
}

void ChangeConfigRecordPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ChangeConfigRecordPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required .base.consensus.RaftConfigPB old_config = 2;
  if (has_old_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_config(), output);
  }

  // required .base.consensus.RaftConfigPB new_config = 3;
  if (has_new_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ChangeConfigRecordPB)
}

::google::protobuf::uint8* ChangeConfigRecordPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ChangeConfigRecordPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // required .base.consensus.RaftConfigPB old_config = 2;
  if (has_old_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_config(), target);
  }

  // required .base.consensus.RaftConfigPB new_config = 3;
  if (has_new_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ChangeConfigRecordPB)
  return target;
}

int ChangeConfigRecordPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

    // required .base.consensus.RaftConfigPB old_config = 2;
    if (has_old_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_config());
    }

    // required .base.consensus.RaftConfigPB new_config = 3;
    if (has_new_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConfigRecordPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeConfigRecordPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeConfigRecordPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeConfigRecordPB::MergeFrom(const ChangeConfigRecordPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_old_config()) {
      mutable_old_config()->::base::consensus::RaftConfigPB::MergeFrom(from.old_config());
    }
    if (from.has_new_config()) {
      mutable_new_config()->::base::consensus::RaftConfigPB::MergeFrom(from.new_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeConfigRecordPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConfigRecordPB::CopyFrom(const ChangeConfigRecordPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConfigRecordPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_old_config()) {
    if (!this->old_config().IsInitialized()) return false;
  }
  if (has_new_config()) {
    if (!this->new_config().IsInitialized()) return false;
  }
  return true;
}

void ChangeConfigRecordPB::Swap(ChangeConfigRecordPB* other) {
  if (other != this) {
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(old_config_, other->old_config_);
    std::swap(new_config_, other->new_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeConfigRecordPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeConfigRecordPB_descriptor_;
  metadata.reflection = ChangeConfigRecordPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeConfigRequestPB::kDestUuidFieldNumber;
const int ChangeConfigRequestPB::kTabletIdFieldNumber;
const int ChangeConfigRequestPB::kTypeFieldNumber;
const int ChangeConfigRequestPB::kServerFieldNumber;
const int ChangeConfigRequestPB::kCasConfigOpidIndexFieldNumber;
#endif  // !_MSC_VER

ChangeConfigRequestPB::ChangeConfigRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ChangeConfigRequestPB)
}

void ChangeConfigRequestPB::InitAsDefaultInstance() {
  server_ = const_cast< ::base::consensus::RaftPeerPB*>(&::base::consensus::RaftPeerPB::default_instance());
}

ChangeConfigRequestPB::ChangeConfigRequestPB(const ChangeConfigRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ChangeConfigRequestPB)
}

void ChangeConfigRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  server_ = NULL;
  cas_config_opid_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeConfigRequestPB::~ChangeConfigRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.ChangeConfigRequestPB)
  SharedDtor();
}

void ChangeConfigRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
    delete server_;
  }
}

void ChangeConfigRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConfigRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeConfigRequestPB_descriptor_;
}

const ChangeConfigRequestPB& ChangeConfigRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ChangeConfigRequestPB* ChangeConfigRequestPB::default_instance_ = NULL;

ChangeConfigRequestPB* ChangeConfigRequestPB::New() const {
  return new ChangeConfigRequestPB;
}

void ChangeConfigRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeConfigRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cas_config_opid_index_, type_);
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    if (has_server()) {
      if (server_ != NULL) server_->::base::consensus::RaftPeerPB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeConfigRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ChangeConfigRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .base.consensus.ChangeConfigType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::ChangeConfigType_IsValid(value)) {
            set_type(static_cast< ::base::consensus::ChangeConfigType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }

      // optional .base.consensus.RaftPeerPB server = 3;
      case 3: {
        if (tag == 26) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cas_config_opid_index;
        break;
      }

      // optional int64 cas_config_opid_index = 5;
      case 5: {
        if (tag == 40) {
         parse_cas_config_opid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cas_config_opid_index_)));
          set_has_cas_config_opid_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ChangeConfigRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ChangeConfigRequestPB)
  return false;
#undef DO_
}

void ChangeConfigRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ChangeConfigRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional .base.consensus.ChangeConfigType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .base.consensus.RaftPeerPB server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->server(), output);
  }

  // optional bytes dest_uuid = 4;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->dest_uuid(), output);
  }

  // optional int64 cas_config_opid_index = 5;
  if (has_cas_config_opid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cas_config_opid_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ChangeConfigRequestPB)
}

::google::protobuf::uint8* ChangeConfigRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ChangeConfigRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional .base.consensus.ChangeConfigType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .base.consensus.RaftPeerPB server = 3;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->server(), target);
  }

  // optional bytes dest_uuid = 4;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dest_uuid(), target);
  }

  // optional int64 cas_config_opid_index = 5;
  if (has_cas_config_opid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cas_config_opid_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ChangeConfigRequestPB)
  return target;
}

int ChangeConfigRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 4;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

    // optional .base.consensus.ChangeConfigType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .base.consensus.RaftPeerPB server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // optional int64 cas_config_opid_index = 5;
    if (has_cas_config_opid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cas_config_opid_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConfigRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeConfigRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeConfigRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeConfigRequestPB::MergeFrom(const ChangeConfigRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_server()) {
      mutable_server()->::base::consensus::RaftPeerPB::MergeFrom(from.server());
    }
    if (from.has_cas_config_opid_index()) {
      set_cas_config_opid_index(from.cas_config_opid_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeConfigRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConfigRequestPB::CopyFrom(const ChangeConfigRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConfigRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void ChangeConfigRequestPB::Swap(ChangeConfigRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(type_, other->type_);
    std::swap(server_, other->server_);
    std::swap(cas_config_opid_index_, other->cas_config_opid_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeConfigRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeConfigRequestPB_descriptor_;
  metadata.reflection = ChangeConfigRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeConfigResponsePB::kNewConfigFieldNumber;
const int ChangeConfigResponsePB::kTimestampFieldNumber;
#endif  // !_MSC_VER

ChangeConfigResponsePB::ChangeConfigResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ChangeConfigResponsePB)
}

void ChangeConfigResponsePB::InitAsDefaultInstance() {
  new_config_ = const_cast< ::base::consensus::RaftPeerPB*>(&::base::consensus::RaftPeerPB::default_instance());
}

ChangeConfigResponsePB::ChangeConfigResponsePB(const ChangeConfigResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ChangeConfigResponsePB)
}

void ChangeConfigResponsePB::SharedCtor() {
  _cached_size_ = 0;
  new_config_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeConfigResponsePB::~ChangeConfigResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.ChangeConfigResponsePB)
  SharedDtor();
}

void ChangeConfigResponsePB::SharedDtor() {
  if (this != default_instance_) {
    delete new_config_;
  }
}

void ChangeConfigResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeConfigResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeConfigResponsePB_descriptor_;
}

const ChangeConfigResponsePB& ChangeConfigResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ChangeConfigResponsePB* ChangeConfigResponsePB::default_instance_ = NULL;

ChangeConfigResponsePB* ChangeConfigResponsePB::New() const {
  return new ChangeConfigResponsePB;
}

void ChangeConfigResponsePB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_new_config()) {
      if (new_config_ != NULL) new_config_->::base::consensus::RaftPeerPB::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeConfigResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ChangeConfigResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .base.consensus.RaftPeerPB new_config = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }

      // optional fixed64 timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ChangeConfigResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ChangeConfigResponsePB)
  return false;
#undef DO_
}

void ChangeConfigResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ChangeConfigResponsePB)
  // optional .base.consensus.RaftPeerPB new_config = 2;
  if (has_new_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_config(), output);
  }

  // optional fixed64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ChangeConfigResponsePB)
}

::google::protobuf::uint8* ChangeConfigResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ChangeConfigResponsePB)
  // optional .base.consensus.RaftPeerPB new_config = 2;
  if (has_new_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_config(), target);
  }

  // optional fixed64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ChangeConfigResponsePB)
  return target;
}

int ChangeConfigResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .base.consensus.RaftPeerPB new_config = 2;
    if (has_new_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_config());
    }

    // optional fixed64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeConfigResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeConfigResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeConfigResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeConfigResponsePB::MergeFrom(const ChangeConfigResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_config()) {
      mutable_new_config()->::base::consensus::RaftPeerPB::MergeFrom(from.new_config());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeConfigResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeConfigResponsePB::CopyFrom(const ChangeConfigResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeConfigResponsePB::IsInitialized() const {

  if (has_new_config()) {
    if (!this->new_config().IsInitialized()) return false;
  }
  return true;
}

void ChangeConfigResponsePB::Swap(ChangeConfigResponsePB* other) {
  if (other != this) {
    std::swap(new_config_, other->new_config_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeConfigResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeConfigResponsePB_descriptor_;
  metadata.reflection = ChangeConfigResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplicateMsg::kIdFieldNumber;
const int ReplicateMsg::kTimestampFieldNumber;
const int ReplicateMsg::kOpTypeFieldNumber;
const int ReplicateMsg::kChangeConfigRecordFieldNumber;
const int ReplicateMsg::kRequestIdFieldNumber;
const int ReplicateMsg::kNoopRequestFieldNumber;
#endif  // !_MSC_VER

ReplicateMsg::ReplicateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ReplicateMsg)
}

void ReplicateMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
  change_config_record_ = const_cast< ::base::consensus::ChangeConfigRecordPB*>(&::base::consensus::ChangeConfigRecordPB::default_instance());
  request_id_ = const_cast< ::base::rpc::RequestIdPB*>(&::base::rpc::RequestIdPB::default_instance());
  noop_request_ = const_cast< ::base::consensus::NoOpRequestPB*>(&::base::consensus::NoOpRequestPB::default_instance());
}

ReplicateMsg::ReplicateMsg(const ReplicateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ReplicateMsg)
}

void ReplicateMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  op_type_ = 0;
  change_config_record_ = NULL;
  request_id_ = NULL;
  noop_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicateMsg::~ReplicateMsg() {
  // @@protoc_insertion_point(destructor:base.consensus.ReplicateMsg)
  SharedDtor();
}

void ReplicateMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete change_config_record_;
    delete request_id_;
    delete noop_request_;
  }
}

void ReplicateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicateMsg_descriptor_;
}

const ReplicateMsg& ReplicateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ReplicateMsg* ReplicateMsg::default_instance_ = NULL;

ReplicateMsg* ReplicateMsg::New() const {
  return new ReplicateMsg;
}

void ReplicateMsg::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_id()) {
      if (id_ != NULL) id_->::base::consensus::OpId::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    op_type_ = 0;
    if (has_change_config_record()) {
      if (change_config_record_ != NULL) change_config_record_->::base::consensus::ChangeConfigRecordPB::Clear();
    }
    if (has_request_id()) {
      if (request_id_ != NULL) request_id_->::base::rpc::RequestIdPB::Clear();
    }
    if (has_noop_request()) {
      if (noop_request_ != NULL) noop_request_->::base::consensus::NoOpRequestPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplicateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ReplicateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.consensus.OpId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // required fixed64 timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }

      // required .base.consensus.OperationType op_type = 4;
      case 4: {
        if (tag == 32) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::OperationType_IsValid(value)) {
            set_op_type(static_cast< ::base::consensus::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_change_config_record;
        break;
      }

      // optional .base.consensus.ChangeConfigRecordPB change_config_record = 7;
      case 7: {
        if (tag == 58) {
         parse_change_config_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_config_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_request_id;
        break;
      }

      // optional .base.rpc.RequestIdPB request_id = 8;
      case 8: {
        if (tag == 66) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(7994)) goto parse_noop_request;
        break;
      }

      // optional .base.consensus.NoOpRequestPB noop_request = 999;
      case 999: {
        if (tag == 7994) {
         parse_noop_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noop_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ReplicateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ReplicateMsg)
  return false;
#undef DO_
}

void ReplicateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ReplicateMsg)
  // required .base.consensus.OpId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required fixed64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->timestamp(), output);
  }

  // required .base.consensus.OperationType op_type = 4;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op_type(), output);
  }

  // optional .base.consensus.ChangeConfigRecordPB change_config_record = 7;
  if (has_change_config_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->change_config_record(), output);
  }

  // optional .base.rpc.RequestIdPB request_id = 8;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->request_id(), output);
  }

  // optional .base.consensus.NoOpRequestPB noop_request = 999;
  if (has_noop_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      999, this->noop_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ReplicateMsg)
}

::google::protobuf::uint8* ReplicateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ReplicateMsg)
  // required .base.consensus.OpId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required fixed64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->timestamp(), target);
  }

  // required .base.consensus.OperationType op_type = 4;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_type(), target);
  }

  // optional .base.consensus.ChangeConfigRecordPB change_config_record = 7;
  if (has_change_config_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->change_config_record(), target);
  }

  // optional .base.rpc.RequestIdPB request_id = 8;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->request_id(), target);
  }

  // optional .base.consensus.NoOpRequestPB noop_request = 999;
  if (has_noop_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        999, this->noop_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ReplicateMsg)
  return target;
}

int ReplicateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.consensus.OpId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required fixed64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // required .base.consensus.OperationType op_type = 4;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional .base.consensus.ChangeConfigRecordPB change_config_record = 7;
    if (has_change_config_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_config_record());
    }

    // optional .base.rpc.RequestIdPB request_id = 8;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_id());
    }

    // optional .base.consensus.NoOpRequestPB noop_request = 999;
    if (has_noop_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->noop_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplicateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplicateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicateMsg::MergeFrom(const ReplicateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::base::consensus::OpId::MergeFrom(from.id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_change_config_record()) {
      mutable_change_config_record()->::base::consensus::ChangeConfigRecordPB::MergeFrom(from.change_config_record());
    }
    if (from.has_request_id()) {
      mutable_request_id()->::base::rpc::RequestIdPB::MergeFrom(from.request_id());
    }
    if (from.has_noop_request()) {
      mutable_noop_request()->::base::consensus::NoOpRequestPB::MergeFrom(from.noop_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplicateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateMsg::CopyFrom(const ReplicateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_change_config_record()) {
    if (!this->change_config_record().IsInitialized()) return false;
  }
  if (has_request_id()) {
    if (!this->request_id().IsInitialized()) return false;
  }
  return true;
}

void ReplicateMsg::Swap(ReplicateMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(op_type_, other->op_type_);
    std::swap(change_config_record_, other->change_config_record_);
    std::swap(request_id_, other->request_id_);
    std::swap(noop_request_, other->noop_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplicateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicateMsg_descriptor_;
  metadata.reflection = ReplicateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommitMsg::kOpTypeFieldNumber;
const int CommitMsg::kCommitedOpIdFieldNumber;
#endif  // !_MSC_VER

CommitMsg::CommitMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.CommitMsg)
}

void CommitMsg::InitAsDefaultInstance() {
  commited_op_id_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
}

CommitMsg::CommitMsg(const CommitMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.CommitMsg)
}

void CommitMsg::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  commited_op_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitMsg::~CommitMsg() {
  // @@protoc_insertion_point(destructor:base.consensus.CommitMsg)
  SharedDtor();
}

void CommitMsg::SharedDtor() {
  if (this != default_instance_) {
    delete commited_op_id_;
  }
}

void CommitMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitMsg_descriptor_;
}

const CommitMsg& CommitMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

CommitMsg* CommitMsg::default_instance_ = NULL;

CommitMsg* CommitMsg::New() const {
  return new CommitMsg;
}

void CommitMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    op_type_ = 0;
    if (has_commited_op_id()) {
      if (commited_op_id_ != NULL) commited_op_id_->::base::consensus::OpId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.CommitMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.consensus.OperationType op_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::OperationType_IsValid(value)) {
            set_op_type(static_cast< ::base::consensus::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commited_op_id;
        break;
      }

      // optional .base.consensus.OpId commited_op_id = 2;
      case 2: {
        if (tag == 18) {
         parse_commited_op_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commited_op_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.CommitMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.CommitMsg)
  return false;
#undef DO_
}

void CommitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.CommitMsg)
  // required .base.consensus.OperationType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional .base.consensus.OpId commited_op_id = 2;
  if (has_commited_op_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commited_op_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.CommitMsg)
}

::google::protobuf::uint8* CommitMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.CommitMsg)
  // required .base.consensus.OperationType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional .base.consensus.OpId commited_op_id = 2;
  if (has_commited_op_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commited_op_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.CommitMsg)
  return target;
}

int CommitMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.consensus.OperationType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional .base.consensus.OpId commited_op_id = 2;
    if (has_commited_op_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commited_op_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommitMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommitMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommitMsg::MergeFrom(const CommitMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_commited_op_id()) {
      mutable_commited_op_id()->::base::consensus::OpId::MergeFrom(from.commited_op_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommitMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMsg::CopyFrom(const CommitMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commited_op_id()) {
    if (!this->commited_op_id().IsInitialized()) return false;
  }
  return true;
}

void CommitMsg::Swap(CommitMsg* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(commited_op_id_, other->commited_op_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommitMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitMsg_descriptor_;
  metadata.reflection = CommitMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoOpRequestPB::kPayloadForTestsFieldNumber;
#endif  // !_MSC_VER

NoOpRequestPB::NoOpRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.NoOpRequestPB)
}

void NoOpRequestPB::InitAsDefaultInstance() {
}

NoOpRequestPB::NoOpRequestPB(const NoOpRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.NoOpRequestPB)
}

void NoOpRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_for_tests_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoOpRequestPB::~NoOpRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.NoOpRequestPB)
  SharedDtor();
}

void NoOpRequestPB::SharedDtor() {
  if (payload_for_tests_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_for_tests_;
  }
  if (this != default_instance_) {
  }
}

void NoOpRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoOpRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoOpRequestPB_descriptor_;
}

const NoOpRequestPB& NoOpRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

NoOpRequestPB* NoOpRequestPB::default_instance_ = NULL;

NoOpRequestPB* NoOpRequestPB::New() const {
  return new NoOpRequestPB;
}

void NoOpRequestPB::Clear() {
  if (has_payload_for_tests()) {
    if (payload_for_tests_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      payload_for_tests_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoOpRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.NoOpRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload_for_tests = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_for_tests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.NoOpRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.NoOpRequestPB)
  return false;
#undef DO_
}

void NoOpRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.NoOpRequestPB)
  // optional bytes payload_for_tests = 1;
  if (has_payload_for_tests()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload_for_tests(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.NoOpRequestPB)
}

::google::protobuf::uint8* NoOpRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.NoOpRequestPB)
  // optional bytes payload_for_tests = 1;
  if (has_payload_for_tests()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload_for_tests(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.NoOpRequestPB)
  return target;
}

int NoOpRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes payload_for_tests = 1;
    if (has_payload_for_tests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_for_tests());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoOpRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoOpRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoOpRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoOpRequestPB::MergeFrom(const NoOpRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_for_tests()) {
      set_payload_for_tests(from.payload_for_tests());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoOpRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoOpRequestPB::CopyFrom(const NoOpRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoOpRequestPB::IsInitialized() const {

  return true;
}

void NoOpRequestPB::Swap(NoOpRequestPB* other) {
  if (other != this) {
    std::swap(payload_for_tests_, other->payload_for_tests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoOpRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoOpRequestPB_descriptor_;
  metadata.reflection = NoOpRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusStatusPB::kLastReceivedFieldNumber;
const int ConsensusStatusPB::kLastReceivedCurrentLeaderFieldNumber;
const int ConsensusStatusPB::kLastCommittedIdxFieldNumber;
const int ConsensusStatusPB::kErrorFieldNumber;
#endif  // !_MSC_VER

ConsensusStatusPB::ConsensusStatusPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ConsensusStatusPB)
}

void ConsensusStatusPB::InitAsDefaultInstance() {
  last_received_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
  last_received_current_leader_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
  error_ = const_cast< ::base::consensus::ConsensusErrorPB*>(&::base::consensus::ConsensusErrorPB::default_instance());
}

ConsensusStatusPB::ConsensusStatusPB(const ConsensusStatusPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ConsensusStatusPB)
}

void ConsensusStatusPB::SharedCtor() {
  _cached_size_ = 0;
  last_received_ = NULL;
  last_received_current_leader_ = NULL;
  last_committed_idx_ = GOOGLE_LONGLONG(0);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusStatusPB::~ConsensusStatusPB() {
  // @@protoc_insertion_point(destructor:base.consensus.ConsensusStatusPB)
  SharedDtor();
}

void ConsensusStatusPB::SharedDtor() {
  if (this != default_instance_) {
    delete last_received_;
    delete last_received_current_leader_;
    delete error_;
  }
}

void ConsensusStatusPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusStatusPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusStatusPB_descriptor_;
}

const ConsensusStatusPB& ConsensusStatusPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ConsensusStatusPB* ConsensusStatusPB::default_instance_ = NULL;

ConsensusStatusPB* ConsensusStatusPB::New() const {
  return new ConsensusStatusPB;
}

void ConsensusStatusPB::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_last_received()) {
      if (last_received_ != NULL) last_received_->::base::consensus::OpId::Clear();
    }
    if (has_last_received_current_leader()) {
      if (last_received_current_leader_ != NULL) last_received_current_leader_->::base::consensus::OpId::Clear();
    }
    last_committed_idx_ = GOOGLE_LONGLONG(0);
    if (has_error()) {
      if (error_ != NULL) error_->::base::consensus::ConsensusErrorPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusStatusPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ConsensusStatusPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.consensus.OpId last_received = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_received()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_committed_idx;
        break;
      }

      // optional int64 last_committed_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_last_committed_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_committed_idx_)));
          set_has_last_committed_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .base.consensus.ConsensusErrorPB error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_received_current_leader;
        break;
      }

      // optional .base.consensus.OpId last_received_current_leader = 4;
      case 4: {
        if (tag == 34) {
         parse_last_received_current_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_received_current_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ConsensusStatusPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ConsensusStatusPB)
  return false;
#undef DO_
}

void ConsensusStatusPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ConsensusStatusPB)
  // required .base.consensus.OpId last_received = 1;
  if (has_last_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->last_received(), output);
  }

  // optional int64 last_committed_idx = 2;
  if (has_last_committed_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_committed_idx(), output);
  }

  // optional .base.consensus.ConsensusErrorPB error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  // optional .base.consensus.OpId last_received_current_leader = 4;
  if (has_last_received_current_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->last_received_current_leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ConsensusStatusPB)
}

::google::protobuf::uint8* ConsensusStatusPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ConsensusStatusPB)
  // required .base.consensus.OpId last_received = 1;
  if (has_last_received()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->last_received(), target);
  }

  // optional int64 last_committed_idx = 2;
  if (has_last_committed_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_committed_idx(), target);
  }

  // optional .base.consensus.ConsensusErrorPB error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  // optional .base.consensus.OpId last_received_current_leader = 4;
  if (has_last_received_current_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->last_received_current_leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ConsensusStatusPB)
  return target;
}

int ConsensusStatusPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.consensus.OpId last_received = 1;
    if (has_last_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_received());
    }

    // optional .base.consensus.OpId last_received_current_leader = 4;
    if (has_last_received_current_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_received_current_leader());
    }

    // optional int64 last_committed_idx = 2;
    if (has_last_committed_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_committed_idx());
    }

    // optional .base.consensus.ConsensusErrorPB error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusStatusPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusStatusPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusStatusPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusStatusPB::MergeFrom(const ConsensusStatusPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_received()) {
      mutable_last_received()->::base::consensus::OpId::MergeFrom(from.last_received());
    }
    if (from.has_last_received_current_leader()) {
      mutable_last_received_current_leader()->::base::consensus::OpId::MergeFrom(from.last_received_current_leader());
    }
    if (from.has_last_committed_idx()) {
      set_last_committed_idx(from.last_committed_idx());
    }
    if (from.has_error()) {
      mutable_error()->::base::consensus::ConsensusErrorPB::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusStatusPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStatusPB::CopyFrom(const ConsensusStatusPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStatusPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_last_received()) {
    if (!this->last_received().IsInitialized()) return false;
  }
  if (has_last_received_current_leader()) {
    if (!this->last_received_current_leader().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ConsensusStatusPB::Swap(ConsensusStatusPB* other) {
  if (other != this) {
    std::swap(last_received_, other->last_received_);
    std::swap(last_received_current_leader_, other->last_received_current_leader_);
    std::swap(last_committed_idx_, other->last_committed_idx_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusStatusPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusStatusPB_descriptor_;
  metadata.reflection = ConsensusStatusPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteRequestPB::kDestUuidFieldNumber;
const int VoteRequestPB::kTabletIdFieldNumber;
const int VoteRequestPB::kCandidateUuidFieldNumber;
const int VoteRequestPB::kCandidateTermFieldNumber;
const int VoteRequestPB::kCandidateStatusFieldNumber;
const int VoteRequestPB::kIgnoreLiveLeaderFieldNumber;
const int VoteRequestPB::kIsPreElectionFieldNumber;
#endif  // !_MSC_VER

VoteRequestPB::VoteRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.VoteRequestPB)
}

void VoteRequestPB::InitAsDefaultInstance() {
  candidate_status_ = const_cast< ::base::consensus::ConsensusStatusPB*>(&::base::consensus::ConsensusStatusPB::default_instance());
}

VoteRequestPB::VoteRequestPB(const VoteRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.VoteRequestPB)
}

void VoteRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_term_ = GOOGLE_LONGLONG(0);
  candidate_status_ = NULL;
  ignore_live_leader_ = false;
  is_pre_election_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteRequestPB::~VoteRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.VoteRequestPB)
  SharedDtor();
}

void VoteRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (candidate_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete candidate_uuid_;
  }
  if (this != default_instance_) {
    delete candidate_status_;
  }
}

void VoteRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteRequestPB_descriptor_;
}

const VoteRequestPB& VoteRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

VoteRequestPB* VoteRequestPB::default_instance_ = NULL;

VoteRequestPB* VoteRequestPB::New() const {
  return new VoteRequestPB;
}

void VoteRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VoteRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ignore_live_leader_, is_pre_election_);
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    if (has_candidate_uuid()) {
      if (candidate_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        candidate_uuid_->clear();
      }
    }
    candidate_term_ = GOOGLE_LONGLONG(0);
    if (has_candidate_status()) {
      if (candidate_status_ != NULL) candidate_status_->::base::consensus::ConsensusStatusPB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.VoteRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablet_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablet_id().data(), this->tablet_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablet_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_candidate_uuid;
        break;
      }

      // required bytes candidate_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_candidate_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_candidate_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_candidate_term;
        break;
      }

      // required int64 candidate_term = 3;
      case 3: {
        if (tag == 24) {
         parse_candidate_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &candidate_term_)));
          set_has_candidate_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_candidate_status;
        break;
      }

      // required .base.consensus.ConsensusStatusPB candidate_status = 4;
      case 4: {
        if (tag == 34) {
         parse_candidate_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidate_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ignore_live_leader;
        break;
      }

      // optional bool ignore_live_leader = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_ignore_live_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_live_leader_)));
          set_has_ignore_live_leader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 6;
      case 6: {
        if (tag == 50) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_pre_election;
        break;
      }

      // optional bool is_pre_election = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_is_pre_election:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pre_election_)));
          set_has_is_pre_election();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.VoteRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.VoteRequestPB)
  return false;
#undef DO_
}

void VoteRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.VoteRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablet_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required bytes candidate_uuid = 2;
  if (has_candidate_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->candidate_uuid(), output);
  }

  // required int64 candidate_term = 3;
  if (has_candidate_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->candidate_term(), output);
  }

  // required .base.consensus.ConsensusStatusPB candidate_status = 4;
  if (has_candidate_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->candidate_status(), output);
  }

  // optional bool ignore_live_leader = 5 [default = false];
  if (has_ignore_live_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ignore_live_leader(), output);
  }

  // optional bytes dest_uuid = 6;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->dest_uuid(), output);
  }

  // optional bool is_pre_election = 7 [default = false];
  if (has_is_pre_election()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_pre_election(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.VoteRequestPB)
}

::google::protobuf::uint8* VoteRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.VoteRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablet_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablet_id(), target);
  }

  // required bytes candidate_uuid = 2;
  if (has_candidate_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->candidate_uuid(), target);
  }

  // required int64 candidate_term = 3;
  if (has_candidate_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->candidate_term(), target);
  }

  // required .base.consensus.ConsensusStatusPB candidate_status = 4;
  if (has_candidate_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->candidate_status(), target);
  }

  // optional bool ignore_live_leader = 5 [default = false];
  if (has_ignore_live_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ignore_live_leader(), target);
  }

  // optional bytes dest_uuid = 6;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->dest_uuid(), target);
  }

  // optional bool is_pre_election = 7 [default = false];
  if (has_is_pre_election()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_pre_election(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.VoteRequestPB)
  return target;
}

int VoteRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 6;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required string tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablet_id());
    }

    // required bytes candidate_uuid = 2;
    if (has_candidate_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->candidate_uuid());
    }

    // required int64 candidate_term = 3;
    if (has_candidate_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->candidate_term());
    }

    // required .base.consensus.ConsensusStatusPB candidate_status = 4;
    if (has_candidate_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->candidate_status());
    }

    // optional bool ignore_live_leader = 5 [default = false];
    if (has_ignore_live_leader()) {
      total_size += 1 + 1;
    }

    // optional bool is_pre_election = 7 [default = false];
    if (has_is_pre_election()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteRequestPB::MergeFrom(const VoteRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_candidate_uuid()) {
      set_candidate_uuid(from.candidate_uuid());
    }
    if (from.has_candidate_term()) {
      set_candidate_term(from.candidate_term());
    }
    if (from.has_candidate_status()) {
      mutable_candidate_status()->::base::consensus::ConsensusStatusPB::MergeFrom(from.candidate_status());
    }
    if (from.has_ignore_live_leader()) {
      set_ignore_live_leader(from.ignore_live_leader());
    }
    if (from.has_is_pre_election()) {
      set_is_pre_election(from.is_pre_election());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRequestPB::CopyFrom(const VoteRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_candidate_status()) {
    if (!this->candidate_status().IsInitialized()) return false;
  }
  return true;
}

void VoteRequestPB::Swap(VoteRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(candidate_uuid_, other->candidate_uuid_);
    std::swap(candidate_term_, other->candidate_term_);
    std::swap(candidate_status_, other->candidate_status_);
    std::swap(ignore_live_leader_, other->ignore_live_leader_);
    std::swap(is_pre_election_, other->is_pre_election_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteRequestPB_descriptor_;
  metadata.reflection = VoteRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteResponsePB::kResponderUuidFieldNumber;
const int VoteResponsePB::kResponderTermFieldNumber;
const int VoteResponsePB::kVoteGrantedFieldNumber;
const int VoteResponsePB::kConsensusErrorFieldNumber;
#endif  // !_MSC_VER

VoteResponsePB::VoteResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.VoteResponsePB)
}

void VoteResponsePB::InitAsDefaultInstance() {
  consensus_error_ = const_cast< ::base::consensus::ConsensusErrorPB*>(&::base::consensus::ConsensusErrorPB::default_instance());
}

VoteResponsePB::VoteResponsePB(const VoteResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.VoteResponsePB)
}

void VoteResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  responder_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responder_term_ = GOOGLE_LONGLONG(0);
  vote_granted_ = false;
  consensus_error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteResponsePB::~VoteResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.VoteResponsePB)
  SharedDtor();
}

void VoteResponsePB::SharedDtor() {
  if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responder_uuid_;
  }
  if (this != default_instance_) {
    delete consensus_error_;
  }
}

void VoteResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteResponsePB_descriptor_;
}

const VoteResponsePB& VoteResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

VoteResponsePB* VoteResponsePB::default_instance_ = NULL;

VoteResponsePB* VoteResponsePB::New() const {
  return new VoteResponsePB;
}

void VoteResponsePB::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_responder_uuid()) {
      if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        responder_uuid_->clear();
      }
    }
    responder_term_ = GOOGLE_LONGLONG(0);
    vote_granted_ = false;
    if (has_consensus_error()) {
      if (consensus_error_ != NULL) consensus_error_->::base::consensus::ConsensusErrorPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.VoteResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes responder_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_responder_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_responder_term;
        break;
      }

      // optional int64 responder_term = 2;
      case 2: {
        if (tag == 16) {
         parse_responder_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &responder_term_)));
          set_has_responder_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vote_granted;
        break;
      }

      // optional bool vote_granted = 3;
      case 3: {
        if (tag == 24) {
         parse_vote_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
          set_has_vote_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(7986)) goto parse_consensus_error;
        break;
      }

      // optional .base.consensus.ConsensusErrorPB consensus_error = 998;
      case 998: {
        if (tag == 7986) {
         parse_consensus_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.VoteResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.VoteResponsePB)
  return false;
#undef DO_
}

void VoteResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.VoteResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->responder_uuid(), output);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->responder_term(), output);
  }

  // optional bool vote_granted = 3;
  if (has_vote_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vote_granted(), output);
  }

  // optional .base.consensus.ConsensusErrorPB consensus_error = 998;
  if (has_consensus_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      998, this->consensus_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.VoteResponsePB)
}

::google::protobuf::uint8* VoteResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.VoteResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->responder_uuid(), target);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->responder_term(), target);
  }

  // optional bool vote_granted = 3;
  if (has_vote_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vote_granted(), target);
  }

  // optional .base.consensus.ConsensusErrorPB consensus_error = 998;
  if (has_consensus_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        998, this->consensus_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.VoteResponsePB)
  return target;
}

int VoteResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes responder_uuid = 1;
    if (has_responder_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->responder_uuid());
    }

    // optional int64 responder_term = 2;
    if (has_responder_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->responder_term());
    }

    // optional bool vote_granted = 3;
    if (has_vote_granted()) {
      total_size += 1 + 1;
    }

    // optional .base.consensus.ConsensusErrorPB consensus_error = 998;
    if (has_consensus_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consensus_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteResponsePB::MergeFrom(const VoteResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responder_uuid()) {
      set_responder_uuid(from.responder_uuid());
    }
    if (from.has_responder_term()) {
      set_responder_term(from.responder_term());
    }
    if (from.has_vote_granted()) {
      set_vote_granted(from.vote_granted());
    }
    if (from.has_consensus_error()) {
      mutable_consensus_error()->::base::consensus::ConsensusErrorPB::MergeFrom(from.consensus_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResponsePB::CopyFrom(const VoteResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponsePB::IsInitialized() const {

  if (has_consensus_error()) {
    if (!this->consensus_error().IsInitialized()) return false;
  }
  return true;
}

void VoteResponsePB::Swap(VoteResponsePB* other) {
  if (other != this) {
    std::swap(responder_uuid_, other->responder_uuid_);
    std::swap(responder_term_, other->responder_term_);
    std::swap(vote_granted_, other->vote_granted_);
    std::swap(consensus_error_, other->consensus_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteResponsePB_descriptor_;
  metadata.reflection = VoteResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusRequestPB::kDestUuidFieldNumber;
const int ConsensusRequestPB::kTabletIdFieldNumber;
const int ConsensusRequestPB::kCallerUuidFieldNumber;
const int ConsensusRequestPB::kCallerTermFieldNumber;
const int ConsensusRequestPB::kPrecedingIdFieldNumber;
const int ConsensusRequestPB::kCommittedIndexFieldNumber;
const int ConsensusRequestPB::kDEPRECATEDCommittedIndexFieldNumber;
const int ConsensusRequestPB::kOpsFieldNumber;
const int ConsensusRequestPB::kAllReplicatedIndexFieldNumber;
const int ConsensusRequestPB::kSafeTimestampFieldNumber;
#endif  // !_MSC_VER

ConsensusRequestPB::ConsensusRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ConsensusRequestPB)
}

void ConsensusRequestPB::InitAsDefaultInstance() {
  preceding_id_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
  deprecated_committed_index_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
}

ConsensusRequestPB::ConsensusRequestPB(const ConsensusRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ConsensusRequestPB)
}

void ConsensusRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_term_ = GOOGLE_LONGLONG(0);
  preceding_id_ = NULL;
  committed_index_ = GOOGLE_LONGLONG(0);
  deprecated_committed_index_ = NULL;
  all_replicated_index_ = GOOGLE_LONGLONG(0);
  safe_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusRequestPB::~ConsensusRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.ConsensusRequestPB)
  SharedDtor();
}

void ConsensusRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (caller_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caller_uuid_;
  }
  if (this != default_instance_) {
    delete preceding_id_;
    delete deprecated_committed_index_;
  }
}

void ConsensusRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusRequestPB_descriptor_;
}

const ConsensusRequestPB& ConsensusRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ConsensusRequestPB* ConsensusRequestPB::default_instance_ = NULL;

ConsensusRequestPB* ConsensusRequestPB::New() const {
  return new ConsensusRequestPB;
}

void ConsensusRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConsensusRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    if (has_caller_uuid()) {
      if (caller_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caller_uuid_->clear();
      }
    }
    caller_term_ = GOOGLE_LONGLONG(0);
    if (has_preceding_id()) {
      if (preceding_id_ != NULL) preceding_id_->::base::consensus::OpId::Clear();
    }
    committed_index_ = GOOGLE_LONGLONG(0);
    if (has_deprecated_committed_index()) {
      if (deprecated_committed_index_ != NULL) deprecated_committed_index_->::base::consensus::OpId::Clear();
    }
  }
  ZR_(all_replicated_index_, safe_timestamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ConsensusRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablet_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablet_id().data(), this->tablet_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablet_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_caller_uuid;
        break;
      }

      // required bytes caller_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_caller_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_caller_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_caller_term;
        break;
      }

      // required int64 caller_term = 3;
      case 3: {
        if (tag == 24) {
         parse_caller_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caller_term_)));
          set_has_caller_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_preceding_id;
        break;
      }

      // optional .base.consensus.OpId preceding_id = 4;
      case 4: {
        if (tag == 34) {
         parse_preceding_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preceding_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DEPRECATED_committed_index;
        break;
      }

      // optional .base.consensus.OpId DEPRECATED_committed_index = 5;
      case 5: {
        if (tag == 42) {
         parse_DEPRECATED_committed_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_committed_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ops;
        break;
      }

      // repeated .base.consensus.ReplicateMsg ops = 6;
      case 6: {
        if (tag == 50) {
         parse_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ops;
        if (input->ExpectTag(58)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 7;
      case 7: {
        if (tag == 58) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_committed_index;
        break;
      }

      // optional int64 committed_index = 8;
      case 8: {
        if (tag == 64) {
         parse_committed_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &committed_index_)));
          set_has_committed_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_all_replicated_index;
        break;
      }

      // optional int64 all_replicated_index = 9;
      case 9: {
        if (tag == 72) {
         parse_all_replicated_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_replicated_index_)));
          set_has_all_replicated_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_safe_timestamp;
        break;
      }

      // optional fixed64 safe_timestamp = 10;
      case 10: {
        if (tag == 81) {
         parse_safe_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &safe_timestamp_)));
          set_has_safe_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ConsensusRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ConsensusRequestPB)
  return false;
#undef DO_
}

void ConsensusRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ConsensusRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablet_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required bytes caller_uuid = 2;
  if (has_caller_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->caller_uuid(), output);
  }

  // required int64 caller_term = 3;
  if (has_caller_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->caller_term(), output);
  }

  // optional .base.consensus.OpId preceding_id = 4;
  if (has_preceding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->preceding_id(), output);
  }

  // optional .base.consensus.OpId DEPRECATED_committed_index = 5;
  if (has_deprecated_committed_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deprecated_committed_index(), output);
  }

  // repeated .base.consensus.ReplicateMsg ops = 6;
  for (int i = 0; i < this->ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ops(i), output);
  }

  // optional bytes dest_uuid = 7;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->dest_uuid(), output);
  }

  // optional int64 committed_index = 8;
  if (has_committed_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->committed_index(), output);
  }

  // optional int64 all_replicated_index = 9;
  if (has_all_replicated_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->all_replicated_index(), output);
  }

  // optional fixed64 safe_timestamp = 10;
  if (has_safe_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->safe_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ConsensusRequestPB)
}

::google::protobuf::uint8* ConsensusRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ConsensusRequestPB)
  // required string tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablet_id().data(), this->tablet_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablet_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablet_id(), target);
  }

  // required bytes caller_uuid = 2;
  if (has_caller_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->caller_uuid(), target);
  }

  // required int64 caller_term = 3;
  if (has_caller_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->caller_term(), target);
  }

  // optional .base.consensus.OpId preceding_id = 4;
  if (has_preceding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->preceding_id(), target);
  }

  // optional .base.consensus.OpId DEPRECATED_committed_index = 5;
  if (has_deprecated_committed_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deprecated_committed_index(), target);
  }

  // repeated .base.consensus.ReplicateMsg ops = 6;
  for (int i = 0; i < this->ops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ops(i), target);
  }

  // optional bytes dest_uuid = 7;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dest_uuid(), target);
  }

  // optional int64 committed_index = 8;
  if (has_committed_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->committed_index(), target);
  }

  // optional int64 all_replicated_index = 9;
  if (has_all_replicated_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->all_replicated_index(), target);
  }

  // optional fixed64 safe_timestamp = 10;
  if (has_safe_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->safe_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ConsensusRequestPB)
  return target;
}

int ConsensusRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 7;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required string tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablet_id());
    }

    // required bytes caller_uuid = 2;
    if (has_caller_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->caller_uuid());
    }

    // required int64 caller_term = 3;
    if (has_caller_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->caller_term());
    }

    // optional .base.consensus.OpId preceding_id = 4;
    if (has_preceding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preceding_id());
    }

    // optional int64 committed_index = 8;
    if (has_committed_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->committed_index());
    }

    // optional .base.consensus.OpId DEPRECATED_committed_index = 5;
    if (has_deprecated_committed_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_committed_index());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 all_replicated_index = 9;
    if (has_all_replicated_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_replicated_index());
    }

    // optional fixed64 safe_timestamp = 10;
    if (has_safe_timestamp()) {
      total_size += 1 + 8;
    }

  }
  // repeated .base.consensus.ReplicateMsg ops = 6;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusRequestPB::MergeFrom(const ConsensusRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  ops_.MergeFrom(from.ops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_caller_uuid()) {
      set_caller_uuid(from.caller_uuid());
    }
    if (from.has_caller_term()) {
      set_caller_term(from.caller_term());
    }
    if (from.has_preceding_id()) {
      mutable_preceding_id()->::base::consensus::OpId::MergeFrom(from.preceding_id());
    }
    if (from.has_committed_index()) {
      set_committed_index(from.committed_index());
    }
    if (from.has_deprecated_committed_index()) {
      mutable_deprecated_committed_index()->::base::consensus::OpId::MergeFrom(from.deprecated_committed_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_all_replicated_index()) {
      set_all_replicated_index(from.all_replicated_index());
    }
    if (from.has_safe_timestamp()) {
      set_safe_timestamp(from.safe_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusRequestPB::CopyFrom(const ConsensusRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_preceding_id()) {
    if (!this->preceding_id().IsInitialized()) return false;
  }
  if (has_deprecated_committed_index()) {
    if (!this->deprecated_committed_index().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  return true;
}

void ConsensusRequestPB::Swap(ConsensusRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(caller_uuid_, other->caller_uuid_);
    std::swap(caller_term_, other->caller_term_);
    std::swap(preceding_id_, other->preceding_id_);
    std::swap(committed_index_, other->committed_index_);
    std::swap(deprecated_committed_index_, other->deprecated_committed_index_);
    ops_.Swap(&other->ops_);
    std::swap(all_replicated_index_, other->all_replicated_index_);
    std::swap(safe_timestamp_, other->safe_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusRequestPB_descriptor_;
  metadata.reflection = ConsensusRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusResponsePB::kResponderUuidFieldNumber;
const int ConsensusResponsePB::kResponderTermFieldNumber;
const int ConsensusResponsePB::kStatusFieldNumber;
#endif  // !_MSC_VER

ConsensusResponsePB::ConsensusResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ConsensusResponsePB)
}

void ConsensusResponsePB::InitAsDefaultInstance() {
  status_ = const_cast< ::base::consensus::ConsensusStatusPB*>(&::base::consensus::ConsensusStatusPB::default_instance());
}

ConsensusResponsePB::ConsensusResponsePB(const ConsensusResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ConsensusResponsePB)
}

void ConsensusResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  responder_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  responder_term_ = GOOGLE_LONGLONG(0);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusResponsePB::~ConsensusResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.ConsensusResponsePB)
  SharedDtor();
}

void ConsensusResponsePB::SharedDtor() {
  if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responder_uuid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void ConsensusResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusResponsePB_descriptor_;
}

const ConsensusResponsePB& ConsensusResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

ConsensusResponsePB* ConsensusResponsePB::default_instance_ = NULL;

ConsensusResponsePB* ConsensusResponsePB::New() const {
  return new ConsensusResponsePB;
}

void ConsensusResponsePB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_responder_uuid()) {
      if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        responder_uuid_->clear();
      }
    }
    responder_term_ = GOOGLE_LONGLONG(0);
    if (has_status()) {
      if (status_ != NULL) status_->::base::consensus::ConsensusStatusPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ConsensusResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes responder_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_responder_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_responder_term;
        break;
      }

      // optional int64 responder_term = 2;
      case 2: {
        if (tag == 16) {
         parse_responder_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &responder_term_)));
          set_has_responder_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .base.consensus.ConsensusStatusPB status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ConsensusResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ConsensusResponsePB)
  return false;
#undef DO_
}

void ConsensusResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ConsensusResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->responder_uuid(), output);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->responder_term(), output);
  }

  // optional .base.consensus.ConsensusStatusPB status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ConsensusResponsePB)
}

::google::protobuf::uint8* ConsensusResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ConsensusResponsePB)
  // optional bytes responder_uuid = 1;
  if (has_responder_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->responder_uuid(), target);
  }

  // optional int64 responder_term = 2;
  if (has_responder_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->responder_term(), target);
  }

  // optional .base.consensus.ConsensusStatusPB status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ConsensusResponsePB)
  return target;
}

int ConsensusResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes responder_uuid = 1;
    if (has_responder_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->responder_uuid());
    }

    // optional int64 responder_term = 2;
    if (has_responder_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->responder_term());
    }

    // optional .base.consensus.ConsensusStatusPB status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusResponsePB::MergeFrom(const ConsensusResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responder_uuid()) {
      set_responder_uuid(from.responder_uuid());
    }
    if (from.has_responder_term()) {
      set_responder_term(from.responder_term());
    }
    if (from.has_status()) {
      mutable_status()->::base::consensus::ConsensusStatusPB::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusResponsePB::CopyFrom(const ConsensusResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusResponsePB::IsInitialized() const {

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void ConsensusResponsePB::Swap(ConsensusResponsePB* other) {
  if (other != this) {
    std::swap(responder_uuid_, other->responder_uuid_);
    std::swap(responder_term_, other->responder_term_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusResponsePB_descriptor_;
  metadata.reflection = ConsensusResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionStatusPB::kOpIdFieldNumber;
const int TransactionStatusPB::kTxTypeFieldNumber;
const int TransactionStatusPB::kRunningForMicrosFieldNumber;
const int TransactionStatusPB::kDescriptionFieldNumber;
const int TransactionStatusPB::kTraceBufferFieldNumber;
#endif  // !_MSC_VER

TransactionStatusPB::TransactionStatusPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.TransactionStatusPB)
}

void TransactionStatusPB::InitAsDefaultInstance() {
  op_id_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
}

TransactionStatusPB::TransactionStatusPB(const TransactionStatusPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.TransactionStatusPB)
}

void TransactionStatusPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_id_ = NULL;
  tx_type_ = 0;
  running_for_micros_ = GOOGLE_LONGLONG(0);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionStatusPB::~TransactionStatusPB() {
  // @@protoc_insertion_point(destructor:base.consensus.TransactionStatusPB)
  SharedDtor();
}

void TransactionStatusPB::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_buffer_;
  }
  if (this != default_instance_) {
    delete op_id_;
  }
}

void TransactionStatusPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionStatusPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatusPB_descriptor_;
}

const TransactionStatusPB& TransactionStatusPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

TransactionStatusPB* TransactionStatusPB::default_instance_ = NULL;

TransactionStatusPB* TransactionStatusPB::New() const {
  return new TransactionStatusPB;
}

void TransactionStatusPB::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_op_id()) {
      if (op_id_ != NULL) op_id_->::base::consensus::OpId::Clear();
    }
    tx_type_ = 0;
    running_for_micros_ = GOOGLE_LONGLONG(0);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_trace_buffer()) {
      if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trace_buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionStatusPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.TransactionStatusPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.consensus.OpId op_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tx_type;
        break;
      }

      // required .base.consensus.OperationType tx_type = 2;
      case 2: {
        if (tag == 16) {
         parse_tx_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::OperationType_IsValid(value)) {
            set_tx_type(static_cast< ::base::consensus::OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_running_for_micros;
        break;
      }

      // required int64 running_for_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_running_for_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_for_micros_)));
          set_has_running_for_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // required string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trace_buffer;
        break;
      }

      // optional string trace_buffer = 6;
      case 6: {
        if (tag == 50) {
         parse_trace_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_buffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trace_buffer().data(), this->trace_buffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trace_buffer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.TransactionStatusPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.TransactionStatusPB)
  return false;
#undef DO_
}

void TransactionStatusPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.TransactionStatusPB)
  // required .base.consensus.OpId op_id = 1;
  if (has_op_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->op_id(), output);
  }

  // required .base.consensus.OperationType tx_type = 2;
  if (has_tx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tx_type(), output);
  }

  // required int64 running_for_micros = 3;
  if (has_running_for_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->running_for_micros(), output);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string trace_buffer = 6;
  if (has_trace_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_buffer().data(), this->trace_buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trace_buffer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trace_buffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.TransactionStatusPB)
}

::google::protobuf::uint8* TransactionStatusPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.TransactionStatusPB)
  // required .base.consensus.OpId op_id = 1;
  if (has_op_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->op_id(), target);
  }

  // required .base.consensus.OperationType tx_type = 2;
  if (has_tx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tx_type(), target);
  }

  // required int64 running_for_micros = 3;
  if (has_running_for_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->running_for_micros(), target);
  }

  // required string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string trace_buffer = 6;
  if (has_trace_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_buffer().data(), this->trace_buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trace_buffer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trace_buffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.TransactionStatusPB)
  return target;
}

int TransactionStatusPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.consensus.OpId op_id = 1;
    if (has_op_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_id());
    }

    // required .base.consensus.OperationType tx_type = 2;
    if (has_tx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tx_type());
    }

    // required int64 running_for_micros = 3;
    if (has_running_for_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->running_for_micros());
    }

    // required string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string trace_buffer = 6;
    if (has_trace_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace_buffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionStatusPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionStatusPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionStatusPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionStatusPB::MergeFrom(const TransactionStatusPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_id()) {
      mutable_op_id()->::base::consensus::OpId::MergeFrom(from.op_id());
    }
    if (from.has_tx_type()) {
      set_tx_type(from.tx_type());
    }
    if (from.has_running_for_micros()) {
      set_running_for_micros(from.running_for_micros());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_trace_buffer()) {
      set_trace_buffer(from.trace_buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionStatusPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStatusPB::CopyFrom(const TransactionStatusPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatusPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_op_id()) {
    if (!this->op_id().IsInitialized()) return false;
  }
  return true;
}

void TransactionStatusPB::Swap(TransactionStatusPB* other) {
  if (other != this) {
    std::swap(op_id_, other->op_id_);
    std::swap(tx_type_, other->tx_type_);
    std::swap(running_for_micros_, other->running_for_micros_);
    std::swap(description_, other->description_);
    std::swap(trace_buffer_, other->trace_buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionStatusPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionStatusPB_descriptor_;
  metadata.reflection = TransactionStatusPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetNodeInstanceRequestPB::GetNodeInstanceRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.GetNodeInstanceRequestPB)
}

void GetNodeInstanceRequestPB::InitAsDefaultInstance() {
}

GetNodeInstanceRequestPB::GetNodeInstanceRequestPB(const GetNodeInstanceRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.GetNodeInstanceRequestPB)
}

void GetNodeInstanceRequestPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeInstanceRequestPB::~GetNodeInstanceRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.GetNodeInstanceRequestPB)
  SharedDtor();
}

void GetNodeInstanceRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNodeInstanceRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInstanceRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeInstanceRequestPB_descriptor_;
}

const GetNodeInstanceRequestPB& GetNodeInstanceRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

GetNodeInstanceRequestPB* GetNodeInstanceRequestPB::default_instance_ = NULL;

GetNodeInstanceRequestPB* GetNodeInstanceRequestPB::New() const {
  return new GetNodeInstanceRequestPB;
}

void GetNodeInstanceRequestPB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeInstanceRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.GetNodeInstanceRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.GetNodeInstanceRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.GetNodeInstanceRequestPB)
  return false;
#undef DO_
}

void GetNodeInstanceRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.GetNodeInstanceRequestPB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.GetNodeInstanceRequestPB)
}

::google::protobuf::uint8* GetNodeInstanceRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.GetNodeInstanceRequestPB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.GetNodeInstanceRequestPB)
  return target;
}

int GetNodeInstanceRequestPB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInstanceRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeInstanceRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeInstanceRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeInstanceRequestPB::MergeFrom(const GetNodeInstanceRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeInstanceRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInstanceRequestPB::CopyFrom(const GetNodeInstanceRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInstanceRequestPB::IsInitialized() const {

  return true;
}

void GetNodeInstanceRequestPB::Swap(GetNodeInstanceRequestPB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeInstanceRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeInstanceRequestPB_descriptor_;
  metadata.reflection = GetNodeInstanceRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNodeInstanceResponsePB::kNodeInstanceFieldNumber;
#endif  // !_MSC_VER

GetNodeInstanceResponsePB::GetNodeInstanceResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.GetNodeInstanceResponsePB)
}

void GetNodeInstanceResponsePB::InitAsDefaultInstance() {
  node_instance_ = const_cast< ::base::NodeInstancePB*>(&::base::NodeInstancePB::default_instance());
}

GetNodeInstanceResponsePB::GetNodeInstanceResponsePB(const GetNodeInstanceResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.GetNodeInstanceResponsePB)
}

void GetNodeInstanceResponsePB::SharedCtor() {
  _cached_size_ = 0;
  node_instance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNodeInstanceResponsePB::~GetNodeInstanceResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.GetNodeInstanceResponsePB)
  SharedDtor();
}

void GetNodeInstanceResponsePB::SharedDtor() {
  if (this != default_instance_) {
    delete node_instance_;
  }
}

void GetNodeInstanceResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeInstanceResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNodeInstanceResponsePB_descriptor_;
}

const GetNodeInstanceResponsePB& GetNodeInstanceResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

GetNodeInstanceResponsePB* GetNodeInstanceResponsePB::default_instance_ = NULL;

GetNodeInstanceResponsePB* GetNodeInstanceResponsePB::New() const {
  return new GetNodeInstanceResponsePB;
}

void GetNodeInstanceResponsePB::Clear() {
  if (has_node_instance()) {
    if (node_instance_ != NULL) node_instance_->::base::NodeInstancePB::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNodeInstanceResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.GetNodeInstanceResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.NodeInstancePB node_instance = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_instance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.GetNodeInstanceResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.GetNodeInstanceResponsePB)
  return false;
#undef DO_
}

void GetNodeInstanceResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.GetNodeInstanceResponsePB)
  // required .base.NodeInstancePB node_instance = 1;
  if (has_node_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.GetNodeInstanceResponsePB)
}

::google::protobuf::uint8* GetNodeInstanceResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.GetNodeInstanceResponsePB)
  // required .base.NodeInstancePB node_instance = 1;
  if (has_node_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.GetNodeInstanceResponsePB)
  return target;
}

int GetNodeInstanceResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.NodeInstancePB node_instance = 1;
    if (has_node_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeInstanceResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNodeInstanceResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNodeInstanceResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNodeInstanceResponsePB::MergeFrom(const GetNodeInstanceResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_instance()) {
      mutable_node_instance()->::base::NodeInstancePB::MergeFrom(from.node_instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNodeInstanceResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeInstanceResponsePB::CopyFrom(const GetNodeInstanceResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeInstanceResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_node_instance()) {
    if (!this->node_instance().IsInitialized()) return false;
  }
  return true;
}

void GetNodeInstanceResponsePB::Swap(GetNodeInstanceResponsePB* other) {
  if (other != this) {
    std::swap(node_instance_, other->node_instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNodeInstanceResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNodeInstanceResponsePB_descriptor_;
  metadata.reflection = GetNodeInstanceResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunLeaderElectionRequestPB::kDestUuidFieldNumber;
const int RunLeaderElectionRequestPB::kTabletIdFieldNumber;
#endif  // !_MSC_VER

RunLeaderElectionRequestPB::RunLeaderElectionRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.RunLeaderElectionRequestPB)
}

void RunLeaderElectionRequestPB::InitAsDefaultInstance() {
}

RunLeaderElectionRequestPB::RunLeaderElectionRequestPB(const RunLeaderElectionRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.RunLeaderElectionRequestPB)
}

void RunLeaderElectionRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunLeaderElectionRequestPB::~RunLeaderElectionRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.RunLeaderElectionRequestPB)
  SharedDtor();
}

void RunLeaderElectionRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
  }
}

void RunLeaderElectionRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunLeaderElectionRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunLeaderElectionRequestPB_descriptor_;
}

const RunLeaderElectionRequestPB& RunLeaderElectionRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

RunLeaderElectionRequestPB* RunLeaderElectionRequestPB::default_instance_ = NULL;

RunLeaderElectionRequestPB* RunLeaderElectionRequestPB::New() const {
  return new RunLeaderElectionRequestPB;
}

void RunLeaderElectionRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunLeaderElectionRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.RunLeaderElectionRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.RunLeaderElectionRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.RunLeaderElectionRequestPB)
  return false;
#undef DO_
}

void RunLeaderElectionRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.RunLeaderElectionRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.RunLeaderElectionRequestPB)
}

::google::protobuf::uint8* RunLeaderElectionRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.RunLeaderElectionRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.RunLeaderElectionRequestPB)
  return target;
}

int RunLeaderElectionRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 2;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunLeaderElectionRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunLeaderElectionRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunLeaderElectionRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunLeaderElectionRequestPB::MergeFrom(const RunLeaderElectionRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunLeaderElectionRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunLeaderElectionRequestPB::CopyFrom(const RunLeaderElectionRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunLeaderElectionRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RunLeaderElectionRequestPB::Swap(RunLeaderElectionRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunLeaderElectionRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunLeaderElectionRequestPB_descriptor_;
  metadata.reflection = RunLeaderElectionRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RunLeaderElectionResponsePB::RunLeaderElectionResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.RunLeaderElectionResponsePB)
}

void RunLeaderElectionResponsePB::InitAsDefaultInstance() {
}

RunLeaderElectionResponsePB::RunLeaderElectionResponsePB(const RunLeaderElectionResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.RunLeaderElectionResponsePB)
}

void RunLeaderElectionResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunLeaderElectionResponsePB::~RunLeaderElectionResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.RunLeaderElectionResponsePB)
  SharedDtor();
}

void RunLeaderElectionResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunLeaderElectionResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunLeaderElectionResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunLeaderElectionResponsePB_descriptor_;
}

const RunLeaderElectionResponsePB& RunLeaderElectionResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

RunLeaderElectionResponsePB* RunLeaderElectionResponsePB::default_instance_ = NULL;

RunLeaderElectionResponsePB* RunLeaderElectionResponsePB::New() const {
  return new RunLeaderElectionResponsePB;
}

void RunLeaderElectionResponsePB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunLeaderElectionResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.RunLeaderElectionResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.RunLeaderElectionResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.RunLeaderElectionResponsePB)
  return false;
#undef DO_
}

void RunLeaderElectionResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.RunLeaderElectionResponsePB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.RunLeaderElectionResponsePB)
}

::google::protobuf::uint8* RunLeaderElectionResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.RunLeaderElectionResponsePB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.RunLeaderElectionResponsePB)
  return target;
}

int RunLeaderElectionResponsePB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunLeaderElectionResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunLeaderElectionResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunLeaderElectionResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunLeaderElectionResponsePB::MergeFrom(const RunLeaderElectionResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunLeaderElectionResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunLeaderElectionResponsePB::CopyFrom(const RunLeaderElectionResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunLeaderElectionResponsePB::IsInitialized() const {

  return true;
}

void RunLeaderElectionResponsePB::Swap(RunLeaderElectionResponsePB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunLeaderElectionResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunLeaderElectionResponsePB_descriptor_;
  metadata.reflection = RunLeaderElectionResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderStepDownRequestPB::kDestUuidFieldNumber;
const int LeaderStepDownRequestPB::kTabletIdFieldNumber;
#endif  // !_MSC_VER

LeaderStepDownRequestPB::LeaderStepDownRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.LeaderStepDownRequestPB)
}

void LeaderStepDownRequestPB::InitAsDefaultInstance() {
}

LeaderStepDownRequestPB::LeaderStepDownRequestPB(const LeaderStepDownRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.LeaderStepDownRequestPB)
}

void LeaderStepDownRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderStepDownRequestPB::~LeaderStepDownRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.LeaderStepDownRequestPB)
  SharedDtor();
}

void LeaderStepDownRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
  }
}

void LeaderStepDownRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderStepDownRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderStepDownRequestPB_descriptor_;
}

const LeaderStepDownRequestPB& LeaderStepDownRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

LeaderStepDownRequestPB* LeaderStepDownRequestPB::default_instance_ = NULL;

LeaderStepDownRequestPB* LeaderStepDownRequestPB::New() const {
  return new LeaderStepDownRequestPB;
}

void LeaderStepDownRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderStepDownRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.LeaderStepDownRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.LeaderStepDownRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.LeaderStepDownRequestPB)
  return false;
#undef DO_
}

void LeaderStepDownRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.LeaderStepDownRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.LeaderStepDownRequestPB)
}

::google::protobuf::uint8* LeaderStepDownRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.LeaderStepDownRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.LeaderStepDownRequestPB)
  return target;
}

int LeaderStepDownRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 2;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderStepDownRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderStepDownRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderStepDownRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderStepDownRequestPB::MergeFrom(const LeaderStepDownRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderStepDownRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderStepDownRequestPB::CopyFrom(const LeaderStepDownRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderStepDownRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void LeaderStepDownRequestPB::Swap(LeaderStepDownRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderStepDownRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderStepDownRequestPB_descriptor_;
  metadata.reflection = LeaderStepDownRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaderStepDownResponsePB::LeaderStepDownResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.LeaderStepDownResponsePB)
}

void LeaderStepDownResponsePB::InitAsDefaultInstance() {
}

LeaderStepDownResponsePB::LeaderStepDownResponsePB(const LeaderStepDownResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.LeaderStepDownResponsePB)
}

void LeaderStepDownResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderStepDownResponsePB::~LeaderStepDownResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.LeaderStepDownResponsePB)
  SharedDtor();
}

void LeaderStepDownResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaderStepDownResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderStepDownResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderStepDownResponsePB_descriptor_;
}

const LeaderStepDownResponsePB& LeaderStepDownResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

LeaderStepDownResponsePB* LeaderStepDownResponsePB::default_instance_ = NULL;

LeaderStepDownResponsePB* LeaderStepDownResponsePB::New() const {
  return new LeaderStepDownResponsePB;
}

void LeaderStepDownResponsePB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderStepDownResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.LeaderStepDownResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.LeaderStepDownResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.LeaderStepDownResponsePB)
  return false;
#undef DO_
}

void LeaderStepDownResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.LeaderStepDownResponsePB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.LeaderStepDownResponsePB)
}

::google::protobuf::uint8* LeaderStepDownResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.LeaderStepDownResponsePB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.LeaderStepDownResponsePB)
  return target;
}

int LeaderStepDownResponsePB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderStepDownResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderStepDownResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderStepDownResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderStepDownResponsePB::MergeFrom(const LeaderStepDownResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderStepDownResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderStepDownResponsePB::CopyFrom(const LeaderStepDownResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderStepDownResponsePB::IsInitialized() const {

  return true;
}

void LeaderStepDownResponsePB::Swap(LeaderStepDownResponsePB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderStepDownResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderStepDownResponsePB_descriptor_;
  metadata.reflection = LeaderStepDownResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastOpIdRequestPB::kDestUuidFieldNumber;
const int GetLastOpIdRequestPB::kTabletIdFieldNumber;
const int GetLastOpIdRequestPB::kOpidTypeFieldNumber;
#endif  // !_MSC_VER

GetLastOpIdRequestPB::GetLastOpIdRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.GetLastOpIdRequestPB)
}

void GetLastOpIdRequestPB::InitAsDefaultInstance() {
}

GetLastOpIdRequestPB::GetLastOpIdRequestPB(const GetLastOpIdRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.GetLastOpIdRequestPB)
}

void GetLastOpIdRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opid_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastOpIdRequestPB::~GetLastOpIdRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.GetLastOpIdRequestPB)
  SharedDtor();
}

void GetLastOpIdRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
  }
}

void GetLastOpIdRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastOpIdRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastOpIdRequestPB_descriptor_;
}

const GetLastOpIdRequestPB& GetLastOpIdRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

GetLastOpIdRequestPB* GetLastOpIdRequestPB::default_instance_ = NULL;

GetLastOpIdRequestPB* GetLastOpIdRequestPB::New() const {
  return new GetLastOpIdRequestPB;
}

void GetLastOpIdRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    opid_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastOpIdRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.GetLastOpIdRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opid_type;
        break;
      }

      // optional .base.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
      case 3: {
        if (tag == 24) {
         parse_opid_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::OpIdType_IsValid(value)) {
            set_opid_type(static_cast< ::base::consensus::OpIdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.GetLastOpIdRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.GetLastOpIdRequestPB)
  return false;
#undef DO_
}

void GetLastOpIdRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.GetLastOpIdRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  // optional .base.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  if (has_opid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opid_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.GetLastOpIdRequestPB)
}

::google::protobuf::uint8* GetLastOpIdRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.GetLastOpIdRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  // optional .base.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  if (has_opid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opid_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.GetLastOpIdRequestPB)
  return target;
}

int GetLastOpIdRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 2;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

    // optional .base.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
    if (has_opid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opid_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastOpIdRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastOpIdRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLastOpIdRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastOpIdRequestPB::MergeFrom(const GetLastOpIdRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_opid_type()) {
      set_opid_type(from.opid_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastOpIdRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastOpIdRequestPB::CopyFrom(const GetLastOpIdRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastOpIdRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GetLastOpIdRequestPB::Swap(GetLastOpIdRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(opid_type_, other->opid_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLastOpIdRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastOpIdRequestPB_descriptor_;
  metadata.reflection = GetLastOpIdRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastOpIdResponsePB::kOpidFieldNumber;
#endif  // !_MSC_VER

GetLastOpIdResponsePB::GetLastOpIdResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.GetLastOpIdResponsePB)
}

void GetLastOpIdResponsePB::InitAsDefaultInstance() {
  opid_ = const_cast< ::base::consensus::OpId*>(&::base::consensus::OpId::default_instance());
}

GetLastOpIdResponsePB::GetLastOpIdResponsePB(const GetLastOpIdResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.GetLastOpIdResponsePB)
}

void GetLastOpIdResponsePB::SharedCtor() {
  _cached_size_ = 0;
  opid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastOpIdResponsePB::~GetLastOpIdResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.GetLastOpIdResponsePB)
  SharedDtor();
}

void GetLastOpIdResponsePB::SharedDtor() {
  if (this != default_instance_) {
    delete opid_;
  }
}

void GetLastOpIdResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastOpIdResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastOpIdResponsePB_descriptor_;
}

const GetLastOpIdResponsePB& GetLastOpIdResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

GetLastOpIdResponsePB* GetLastOpIdResponsePB::default_instance_ = NULL;

GetLastOpIdResponsePB* GetLastOpIdResponsePB::New() const {
  return new GetLastOpIdResponsePB;
}

void GetLastOpIdResponsePB::Clear() {
  if (has_opid()) {
    if (opid_ != NULL) opid_->::base::consensus::OpId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastOpIdResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.GetLastOpIdResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .base.consensus.OpId opid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.GetLastOpIdResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.GetLastOpIdResponsePB)
  return false;
#undef DO_
}

void GetLastOpIdResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.GetLastOpIdResponsePB)
  // optional .base.consensus.OpId opid = 1;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.GetLastOpIdResponsePB)
}

::google::protobuf::uint8* GetLastOpIdResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.GetLastOpIdResponsePB)
  // optional .base.consensus.OpId opid = 1;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.GetLastOpIdResponsePB)
  return target;
}

int GetLastOpIdResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .base.consensus.OpId opid = 1;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastOpIdResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastOpIdResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLastOpIdResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastOpIdResponsePB::MergeFrom(const GetLastOpIdResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opid()) {
      mutable_opid()->::base::consensus::OpId::MergeFrom(from.opid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastOpIdResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastOpIdResponsePB::CopyFrom(const GetLastOpIdResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastOpIdResponsePB::IsInitialized() const {

  if (has_opid()) {
    if (!this->opid().IsInitialized()) return false;
  }
  return true;
}

void GetLastOpIdResponsePB::Swap(GetLastOpIdResponsePB* other) {
  if (other != this) {
    std::swap(opid_, other->opid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLastOpIdResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastOpIdResponsePB_descriptor_;
  metadata.reflection = GetLastOpIdResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetConsensusStateRequestPB::kDestUuidFieldNumber;
const int GetConsensusStateRequestPB::kTabletIdFieldNumber;
const int GetConsensusStateRequestPB::kTypeFieldNumber;
#endif  // !_MSC_VER

GetConsensusStateRequestPB::GetConsensusStateRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.GetConsensusStateRequestPB)
}

void GetConsensusStateRequestPB::InitAsDefaultInstance() {
}

GetConsensusStateRequestPB::GetConsensusStateRequestPB(const GetConsensusStateRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.GetConsensusStateRequestPB)
}

void GetConsensusStateRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConsensusStateRequestPB::~GetConsensusStateRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.GetConsensusStateRequestPB)
  SharedDtor();
}

void GetConsensusStateRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
  }
}

void GetConsensusStateRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConsensusStateRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConsensusStateRequestPB_descriptor_;
}

const GetConsensusStateRequestPB& GetConsensusStateRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

GetConsensusStateRequestPB* GetConsensusStateRequestPB::default_instance_ = NULL;

GetConsensusStateRequestPB* GetConsensusStateRequestPB::New() const {
  return new GetConsensusStateRequestPB;
}

void GetConsensusStateRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConsensusStateRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.GetConsensusStateRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .base.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::ConsensusConfigType_IsValid(value)) {
            set_type(static_cast< ::base::consensus::ConsensusConfigType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.GetConsensusStateRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.GetConsensusStateRequestPB)
  return false;
#undef DO_
}

void GetConsensusStateRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.GetConsensusStateRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest_uuid(), output);
  }

  // optional .base.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.GetConsensusStateRequestPB)
}

::google::protobuf::uint8* GetConsensusStateRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.GetConsensusStateRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // optional bytes dest_uuid = 2;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest_uuid(), target);
  }

  // optional .base.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.GetConsensusStateRequestPB)
  return target;
}

int GetConsensusStateRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 2;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

    // optional .base.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConsensusStateRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConsensusStateRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConsensusStateRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConsensusStateRequestPB::MergeFrom(const GetConsensusStateRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConsensusStateRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsensusStateRequestPB::CopyFrom(const GetConsensusStateRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusStateRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void GetConsensusStateRequestPB::Swap(GetConsensusStateRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConsensusStateRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConsensusStateRequestPB_descriptor_;
  metadata.reflection = GetConsensusStateRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetConsensusStateResponsePB::kCstateFieldNumber;
#endif  // !_MSC_VER

GetConsensusStateResponsePB::GetConsensusStateResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.GetConsensusStateResponsePB)
}

void GetConsensusStateResponsePB::InitAsDefaultInstance() {
  cstate_ = const_cast< ::base::consensus::ConsensusStatePB*>(&::base::consensus::ConsensusStatePB::default_instance());
}

GetConsensusStateResponsePB::GetConsensusStateResponsePB(const GetConsensusStateResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.GetConsensusStateResponsePB)
}

void GetConsensusStateResponsePB::SharedCtor() {
  _cached_size_ = 0;
  cstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConsensusStateResponsePB::~GetConsensusStateResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.GetConsensusStateResponsePB)
  SharedDtor();
}

void GetConsensusStateResponsePB::SharedDtor() {
  if (this != default_instance_) {
    delete cstate_;
  }
}

void GetConsensusStateResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConsensusStateResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConsensusStateResponsePB_descriptor_;
}

const GetConsensusStateResponsePB& GetConsensusStateResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

GetConsensusStateResponsePB* GetConsensusStateResponsePB::default_instance_ = NULL;

GetConsensusStateResponsePB* GetConsensusStateResponsePB::New() const {
  return new GetConsensusStateResponsePB;
}

void GetConsensusStateResponsePB::Clear() {
  if (has_cstate()) {
    if (cstate_ != NULL) cstate_->::base::consensus::ConsensusStatePB::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConsensusStateResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.GetConsensusStateResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .base.consensus.ConsensusStatePB cstate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.GetConsensusStateResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.GetConsensusStateResponsePB)
  return false;
#undef DO_
}

void GetConsensusStateResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.GetConsensusStateResponsePB)
  // optional .base.consensus.ConsensusStatePB cstate = 1;
  if (has_cstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.GetConsensusStateResponsePB)
}

::google::protobuf::uint8* GetConsensusStateResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.GetConsensusStateResponsePB)
  // optional .base.consensus.ConsensusStatePB cstate = 1;
  if (has_cstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.GetConsensusStateResponsePB)
  return target;
}

int GetConsensusStateResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .base.consensus.ConsensusStatePB cstate = 1;
    if (has_cstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConsensusStateResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConsensusStateResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConsensusStateResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConsensusStateResponsePB::MergeFrom(const GetConsensusStateResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cstate()) {
      mutable_cstate()->::base::consensus::ConsensusStatePB::MergeFrom(from.cstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConsensusStateResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConsensusStateResponsePB::CopyFrom(const GetConsensusStateResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConsensusStateResponsePB::IsInitialized() const {

  if (has_cstate()) {
    if (!this->cstate().IsInitialized()) return false;
  }
  return true;
}

void GetConsensusStateResponsePB::Swap(GetConsensusStateResponsePB* other) {
  if (other != this) {
    std::swap(cstate_, other->cstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConsensusStateResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConsensusStateResponsePB_descriptor_;
  metadata.reflection = GetConsensusStateResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartTabletCopyRequestPB::kDestUuidFieldNumber;
const int StartTabletCopyRequestPB::kTabletIdFieldNumber;
const int StartTabletCopyRequestPB::kCopyPeerUuidFieldNumber;
const int StartTabletCopyRequestPB::kCopyPeerAddrFieldNumber;
const int StartTabletCopyRequestPB::kCallerTermFieldNumber;
#endif  // !_MSC_VER

StartTabletCopyRequestPB::StartTabletCopyRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.StartTabletCopyRequestPB)
}

void StartTabletCopyRequestPB::InitAsDefaultInstance() {
  copy_peer_addr_ = const_cast< ::base::HostPortPB*>(&::base::HostPortPB::default_instance());
}

StartTabletCopyRequestPB::StartTabletCopyRequestPB(const StartTabletCopyRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.StartTabletCopyRequestPB)
}

void StartTabletCopyRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copy_peer_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  copy_peer_addr_ = NULL;
  caller_term_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartTabletCopyRequestPB::~StartTabletCopyRequestPB() {
  // @@protoc_insertion_point(destructor:base.consensus.StartTabletCopyRequestPB)
  SharedDtor();
}

void StartTabletCopyRequestPB::SharedDtor() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (copy_peer_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete copy_peer_uuid_;
  }
  if (this != default_instance_) {
    delete copy_peer_addr_;
  }
}

void StartTabletCopyRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTabletCopyRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTabletCopyRequestPB_descriptor_;
}

const StartTabletCopyRequestPB& StartTabletCopyRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

StartTabletCopyRequestPB* StartTabletCopyRequestPB::default_instance_ = NULL;

StartTabletCopyRequestPB* StartTabletCopyRequestPB::New() const {
  return new StartTabletCopyRequestPB;
}

void StartTabletCopyRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_dest_uuid()) {
      if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_uuid_->clear();
      }
    }
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    if (has_copy_peer_uuid()) {
      if (copy_peer_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        copy_peer_uuid_->clear();
      }
    }
    if (has_copy_peer_addr()) {
      if (copy_peer_addr_ != NULL) copy_peer_addr_->::base::HostPortPB::Clear();
    }
    caller_term_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartTabletCopyRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.StartTabletCopyRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes tablet_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_copy_peer_uuid;
        break;
      }

      // required bytes copy_peer_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_copy_peer_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_copy_peer_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_copy_peer_addr;
        break;
      }

      // required .base.HostPortPB copy_peer_addr = 3;
      case 3: {
        if (tag == 26) {
         parse_copy_peer_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copy_peer_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_caller_term;
        break;
      }

      // optional int64 caller_term = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_caller_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &caller_term_)));
          set_has_caller_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dest_uuid;
        break;
      }

      // optional bytes dest_uuid = 5;
      case 5: {
        if (tag == 42) {
         parse_dest_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.StartTabletCopyRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.StartTabletCopyRequestPB)
  return false;
#undef DO_
}

void StartTabletCopyRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.StartTabletCopyRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tablet_id(), output);
  }

  // required bytes copy_peer_uuid = 2;
  if (has_copy_peer_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->copy_peer_uuid(), output);
  }

  // required .base.HostPortPB copy_peer_addr = 3;
  if (has_copy_peer_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->copy_peer_addr(), output);
  }

  // optional int64 caller_term = 4 [default = -1];
  if (has_caller_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->caller_term(), output);
  }

  // optional bytes dest_uuid = 5;
  if (has_dest_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->dest_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.StartTabletCopyRequestPB)
}

::google::protobuf::uint8* StartTabletCopyRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.StartTabletCopyRequestPB)
  // required bytes tablet_id = 1;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tablet_id(), target);
  }

  // required bytes copy_peer_uuid = 2;
  if (has_copy_peer_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->copy_peer_uuid(), target);
  }

  // required .base.HostPortPB copy_peer_addr = 3;
  if (has_copy_peer_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->copy_peer_addr(), target);
  }

  // optional int64 caller_term = 4 [default = -1];
  if (has_caller_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->caller_term(), target);
  }

  // optional bytes dest_uuid = 5;
  if (has_dest_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->dest_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.StartTabletCopyRequestPB)
  return target;
}

int StartTabletCopyRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes dest_uuid = 5;
    if (has_dest_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dest_uuid());
    }

    // required bytes tablet_id = 1;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

    // required bytes copy_peer_uuid = 2;
    if (has_copy_peer_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->copy_peer_uuid());
    }

    // required .base.HostPortPB copy_peer_addr = 3;
    if (has_copy_peer_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copy_peer_addr());
    }

    // optional int64 caller_term = 4 [default = -1];
    if (has_caller_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->caller_term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTabletCopyRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartTabletCopyRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartTabletCopyRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartTabletCopyRequestPB::MergeFrom(const StartTabletCopyRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest_uuid()) {
      set_dest_uuid(from.dest_uuid());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_copy_peer_uuid()) {
      set_copy_peer_uuid(from.copy_peer_uuid());
    }
    if (from.has_copy_peer_addr()) {
      mutable_copy_peer_addr()->::base::HostPortPB::MergeFrom(from.copy_peer_addr());
    }
    if (from.has_caller_term()) {
      set_caller_term(from.caller_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartTabletCopyRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTabletCopyRequestPB::CopyFrom(const StartTabletCopyRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTabletCopyRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_copy_peer_addr()) {
    if (!this->copy_peer_addr().IsInitialized()) return false;
  }
  return true;
}

void StartTabletCopyRequestPB::Swap(StartTabletCopyRequestPB* other) {
  if (other != this) {
    std::swap(dest_uuid_, other->dest_uuid_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(copy_peer_uuid_, other->copy_peer_uuid_);
    std::swap(copy_peer_addr_, other->copy_peer_addr_);
    std::swap(caller_term_, other->caller_term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartTabletCopyRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTabletCopyRequestPB_descriptor_;
  metadata.reflection = StartTabletCopyRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StartTabletCopyResponsePB::StartTabletCopyResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.StartTabletCopyResponsePB)
}

void StartTabletCopyResponsePB::InitAsDefaultInstance() {
}

StartTabletCopyResponsePB::StartTabletCopyResponsePB(const StartTabletCopyResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.StartTabletCopyResponsePB)
}

void StartTabletCopyResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartTabletCopyResponsePB::~StartTabletCopyResponsePB() {
  // @@protoc_insertion_point(destructor:base.consensus.StartTabletCopyResponsePB)
  SharedDtor();
}

void StartTabletCopyResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartTabletCopyResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTabletCopyResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTabletCopyResponsePB_descriptor_;
}

const StartTabletCopyResponsePB& StartTabletCopyResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  return *default_instance_;
}

StartTabletCopyResponsePB* StartTabletCopyResponsePB::default_instance_ = NULL;

StartTabletCopyResponsePB* StartTabletCopyResponsePB::New() const {
  return new StartTabletCopyResponsePB;
}

void StartTabletCopyResponsePB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartTabletCopyResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.StartTabletCopyResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.StartTabletCopyResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.StartTabletCopyResponsePB)
  return false;
#undef DO_
}

void StartTabletCopyResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.StartTabletCopyResponsePB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.StartTabletCopyResponsePB)
}

::google::protobuf::uint8* StartTabletCopyResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.StartTabletCopyResponsePB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.StartTabletCopyResponsePB)
  return target;
}

int StartTabletCopyResponsePB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTabletCopyResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartTabletCopyResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartTabletCopyResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartTabletCopyResponsePB::MergeFrom(const StartTabletCopyResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartTabletCopyResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTabletCopyResponsePB::CopyFrom(const StartTabletCopyResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTabletCopyResponsePB::IsInitialized() const {

  return true;
}

void StartTabletCopyResponsePB::Swap(StartTabletCopyResponsePB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartTabletCopyResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTabletCopyResponsePB_descriptor_;
  metadata.reflection = StartTabletCopyResponsePB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace base

// @@protoc_insertion_point(global_scope)
