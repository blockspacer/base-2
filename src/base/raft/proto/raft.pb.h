// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/raft.proto

#ifndef PROTOBUF_base_2fraft_2fproto_2fraft_2eproto__INCLUDED
#define PROTOBUF_base_2fraft_2fproto_2fraft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace base {
namespace raft {
namespace raft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

class Error;
class ServerPB;
class SimpleConfigurationPB;
class ConfigurationPB;
class EntryPB;
class RequestVoteRequestPB;
class RequestVoteResponsePB;
class AppendEntriesRequestPB;
class AppendEntriesResponsePB;
class AppendEntriesResponsePB_ServerCapabilities;
class InstallSnapshotRequestPB;
class InstallSnapshotResponsePB;

enum OpCode {
  REQUEST_VOTE = 1,
  APPEND_ENTRIES = 2,
  INSTALL_SNAPSHOT = 3
};
bool OpCode_IsValid(int value);
const OpCode OpCode_MIN = REQUEST_VOTE;
const OpCode OpCode_MAX = INSTALL_SNAPSHOT;
const int OpCode_ARRAYSIZE = OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpCode_descriptor();
inline const ::std::string& OpCode_Name(OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpCode_descriptor(), value);
}
inline bool OpCode_Parse(
    const ::std::string& name, OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpCode>(
    OpCode_descriptor(), name, value);
}
enum EntryType {
  UNKNOWN = 0,
  CONFIGURATION = 1,
  DATA = 2,
  NOOP = 3
};
bool EntryType_IsValid(int value);
const EntryType EntryType_MIN = UNKNOWN;
const EntryType EntryType_MAX = NOOP;
const int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntryType_descriptor();
inline const ::std::string& EntryType_Name(EntryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntryType_descriptor(), value);
}
inline bool EntryType_Parse(
    const ::std::string& name, EntryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.raft.raft.Error)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class ServerPB : public ::google::protobuf::Message {
 public:
  ServerPB();
  virtual ~ServerPB();

  ServerPB(const ServerPB& from);

  inline ServerPB& operator=(const ServerPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerPB& default_instance();

  void Swap(ServerPB* other);

  // implements Message ----------------------------------------------

  ServerPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerPB& from);
  void MergeFrom(const ServerPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required string addresses = 2;
  inline bool has_addresses() const;
  inline void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  inline const ::std::string& addresses() const;
  inline void set_addresses(const ::std::string& value);
  inline void set_addresses(const char* value);
  inline void set_addresses(const char* value, size_t size);
  inline ::std::string* mutable_addresses();
  inline ::std::string* release_addresses();
  inline void set_allocated_addresses(::std::string* addresses);

  // @@protoc_insertion_point(class_scope:base.raft.raft.ServerPB)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_addresses();
  inline void clear_has_addresses();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::std::string* addresses_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static ServerPB* default_instance_;
};
// -------------------------------------------------------------------

class SimpleConfigurationPB : public ::google::protobuf::Message {
 public:
  SimpleConfigurationPB();
  virtual ~SimpleConfigurationPB();

  SimpleConfigurationPB(const SimpleConfigurationPB& from);

  inline SimpleConfigurationPB& operator=(const SimpleConfigurationPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleConfigurationPB& default_instance();

  void Swap(SimpleConfigurationPB* other);

  // implements Message ----------------------------------------------

  SimpleConfigurationPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleConfigurationPB& from);
  void MergeFrom(const SimpleConfigurationPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .base.raft.raft.ServerPB servers = 1;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 1;
  inline const ::base::raft::raft::ServerPB& servers(int index) const;
  inline ::base::raft::raft::ServerPB* mutable_servers(int index);
  inline ::base::raft::raft::ServerPB* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::base::raft::raft::ServerPB >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::base::raft::raft::ServerPB >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:base.raft.raft.SimpleConfigurationPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::base::raft::raft::ServerPB > servers_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static SimpleConfigurationPB* default_instance_;
};
// -------------------------------------------------------------------

class ConfigurationPB : public ::google::protobuf::Message {
 public:
  ConfigurationPB();
  virtual ~ConfigurationPB();

  ConfigurationPB(const ConfigurationPB& from);

  inline ConfigurationPB& operator=(const ConfigurationPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigurationPB& default_instance();

  void Swap(ConfigurationPB* other);

  // implements Message ----------------------------------------------

  ConfigurationPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigurationPB& from);
  void MergeFrom(const ConfigurationPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.raft.raft.SimpleConfigurationPB prev_configuration = 1;
  inline bool has_prev_configuration() const;
  inline void clear_prev_configuration();
  static const int kPrevConfigurationFieldNumber = 1;
  inline const ::base::raft::raft::SimpleConfigurationPB& prev_configuration() const;
  inline ::base::raft::raft::SimpleConfigurationPB* mutable_prev_configuration();
  inline ::base::raft::raft::SimpleConfigurationPB* release_prev_configuration();
  inline void set_allocated_prev_configuration(::base::raft::raft::SimpleConfigurationPB* prev_configuration);

  // optional .base.raft.raft.SimpleConfigurationPB next_configuration = 2;
  inline bool has_next_configuration() const;
  inline void clear_next_configuration();
  static const int kNextConfigurationFieldNumber = 2;
  inline const ::base::raft::raft::SimpleConfigurationPB& next_configuration() const;
  inline ::base::raft::raft::SimpleConfigurationPB* mutable_next_configuration();
  inline ::base::raft::raft::SimpleConfigurationPB* release_next_configuration();
  inline void set_allocated_next_configuration(::base::raft::raft::SimpleConfigurationPB* next_configuration);

  // @@protoc_insertion_point(class_scope:base.raft.raft.ConfigurationPB)
 private:
  inline void set_has_prev_configuration();
  inline void clear_has_prev_configuration();
  inline void set_has_next_configuration();
  inline void clear_has_next_configuration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::raft::raft::SimpleConfigurationPB* prev_configuration_;
  ::base::raft::raft::SimpleConfigurationPB* next_configuration_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static ConfigurationPB* default_instance_;
};
// -------------------------------------------------------------------

class EntryPB : public ::google::protobuf::Message {
 public:
  EntryPB();
  virtual ~EntryPB();

  EntryPB(const EntryPB& from);

  inline EntryPB& operator=(const EntryPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryPB& default_instance();

  void Swap(EntryPB* other);

  // implements Message ----------------------------------------------

  EntryPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntryPB& from);
  void MergeFrom(const EntryPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // optional uint64 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // required uint64 cluster_time = 6;
  inline bool has_cluster_time() const;
  inline void clear_cluster_time();
  static const int kClusterTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 cluster_time() const;
  inline void set_cluster_time(::google::protobuf::uint64 value);

  // optional .base.raft.raft.EntryType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::base::raft::raft::EntryType type() const;
  inline void set_type(::base::raft::raft::EntryType value);

  // optional .base.raft.raft.ConfigurationPB configuration = 3;
  inline bool has_configuration() const;
  inline void clear_configuration();
  static const int kConfigurationFieldNumber = 3;
  inline const ::base::raft::raft::ConfigurationPB& configuration() const;
  inline ::base::raft::raft::ConfigurationPB* mutable_configuration();
  inline ::base::raft::raft::ConfigurationPB* release_configuration();
  inline void set_allocated_configuration(::base::raft::raft::ConfigurationPB* configuration);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:base.raft.raft.EntryPB)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_cluster_time();
  inline void clear_has_cluster_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_configuration();
  inline void clear_has_configuration();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 cluster_time_;
  ::base::raft::raft::ConfigurationPB* configuration_;
  ::std::string* data_;
  int type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static EntryPB* default_instance_;
};
// -------------------------------------------------------------------

class RequestVoteRequestPB : public ::google::protobuf::Message {
 public:
  RequestVoteRequestPB();
  virtual ~RequestVoteRequestPB();

  RequestVoteRequestPB(const RequestVoteRequestPB& from);

  inline RequestVoteRequestPB& operator=(const RequestVoteRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteRequestPB& default_instance();

  void Swap(RequestVoteRequestPB* other);

  // implements Message ----------------------------------------------

  RequestVoteRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVoteRequestPB& from);
  void MergeFrom(const RequestVoteRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required uint64 term = 2;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 2;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 last_log_term = 3;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 3;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // required uint64 last_log_index = 4;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:base.raft.raft.RequestVoteRequestPB)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static RequestVoteRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class RequestVoteResponsePB : public ::google::protobuf::Message {
 public:
  RequestVoteResponsePB();
  virtual ~RequestVoteResponsePB();

  RequestVoteResponsePB(const RequestVoteResponsePB& from);

  inline RequestVoteResponsePB& operator=(const RequestVoteResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteResponsePB& default_instance();

  void Swap(RequestVoteResponsePB* other);

  // implements Message ----------------------------------------------

  RequestVoteResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVoteResponsePB& from);
  void MergeFrom(const RequestVoteResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool granted = 2;
  inline bool has_granted() const;
  inline void clear_granted();
  static const int kGrantedFieldNumber = 2;
  inline bool granted() const;
  inline void set_granted(bool value);

  // optional bool log_ok = 3;
  inline bool has_log_ok() const;
  inline void clear_log_ok();
  static const int kLogOkFieldNumber = 3;
  inline bool log_ok() const;
  inline void set_log_ok(bool value);

  // @@protoc_insertion_point(class_scope:base.raft.raft.RequestVoteResponsePB)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_granted();
  inline void clear_has_granted();
  inline void set_has_log_ok();
  inline void clear_has_log_ok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  bool granted_;
  bool log_ok_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static RequestVoteResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesRequestPB : public ::google::protobuf::Message {
 public:
  AppendEntriesRequestPB();
  virtual ~AppendEntriesRequestPB();

  AppendEntriesRequestPB(const AppendEntriesRequestPB& from);

  inline AppendEntriesRequestPB& operator=(const AppendEntriesRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequestPB& default_instance();

  void Swap(AppendEntriesRequestPB* other);

  // implements Message ----------------------------------------------

  AppendEntriesRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesRequestPB& from);
  void MergeFrom(const AppendEntriesRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required uint64 term = 2;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 2;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 prev_log_index = 3;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  inline ::google::protobuf::uint64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::uint64 value);

  // required uint64 prev_log_term = 4;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  inline ::google::protobuf::uint64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::uint64 value);

  // repeated .base.raft.raft.EntryPB entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::base::raft::raft::EntryPB& entries(int index) const;
  inline ::base::raft::raft::EntryPB* mutable_entries(int index);
  inline ::base::raft::raft::EntryPB* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::base::raft::raft::EntryPB >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::base::raft::raft::EntryPB >*
      mutable_entries();

  // required uint64 commit_index = 6;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 6;
  inline ::google::protobuf::uint64 commit_index() const;
  inline void set_commit_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:base.raft.raft.AppendEntriesRequestPB)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prev_log_index_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::RepeatedPtrField< ::base::raft::raft::EntryPB > entries_;
  ::google::protobuf::uint64 commit_index_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesResponsePB_ServerCapabilities : public ::google::protobuf::Message {
 public:
  AppendEntriesResponsePB_ServerCapabilities();
  virtual ~AppendEntriesResponsePB_ServerCapabilities();

  AppendEntriesResponsePB_ServerCapabilities(const AppendEntriesResponsePB_ServerCapabilities& from);

  inline AppendEntriesResponsePB_ServerCapabilities& operator=(const AppendEntriesResponsePB_ServerCapabilities& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponsePB_ServerCapabilities& default_instance();

  void Swap(AppendEntriesResponsePB_ServerCapabilities* other);

  // implements Message ----------------------------------------------

  AppendEntriesResponsePB_ServerCapabilities* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesResponsePB_ServerCapabilities& from);
  void MergeFrom(const AppendEntriesResponsePB_ServerCapabilities& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 min_supported_state_machine_version = 1;
  inline bool has_min_supported_state_machine_version() const;
  inline void clear_min_supported_state_machine_version();
  static const int kMinSupportedStateMachineVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 min_supported_state_machine_version() const;
  inline void set_min_supported_state_machine_version(::google::protobuf::uint32 value);

  // optional uint32 max_supported_state_machine_version = 2;
  inline bool has_max_supported_state_machine_version() const;
  inline void clear_max_supported_state_machine_version();
  static const int kMaxSupportedStateMachineVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 max_supported_state_machine_version() const;
  inline void set_max_supported_state_machine_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
 private:
  inline void set_has_min_supported_state_machine_version();
  inline void clear_has_min_supported_state_machine_version();
  inline void set_has_max_supported_state_machine_version();
  inline void clear_has_max_supported_state_machine_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 min_supported_state_machine_version_;
  ::google::protobuf::uint32 max_supported_state_machine_version_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesResponsePB_ServerCapabilities* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesResponsePB : public ::google::protobuf::Message {
 public:
  AppendEntriesResponsePB();
  virtual ~AppendEntriesResponsePB();

  AppendEntriesResponsePB(const AppendEntriesResponsePB& from);

  inline AppendEntriesResponsePB& operator=(const AppendEntriesResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponsePB& default_instance();

  void Swap(AppendEntriesResponsePB* other);

  // implements Message ----------------------------------------------

  AppendEntriesResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesResponsePB& from);
  void MergeFrom(const AppendEntriesResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AppendEntriesResponsePB_ServerCapabilities ServerCapabilities;

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint64 last_log_index = 3;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // optional .base.raft.raft.AppendEntriesResponsePB.ServerCapabilities server_capabilities = 4;
  inline bool has_server_capabilities() const;
  inline void clear_server_capabilities();
  static const int kServerCapabilitiesFieldNumber = 4;
  inline const ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities& server_capabilities() const;
  inline ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* mutable_server_capabilities();
  inline ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* release_server_capabilities();
  inline void set_allocated_server_capabilities(::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* server_capabilities);

  // @@protoc_insertion_point(class_scope:base.raft.raft.AppendEntriesResponsePB)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_server_capabilities();
  inline void clear_has_server_capabilities();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_index_;
  ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* server_capabilities_;
  bool success_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class InstallSnapshotRequestPB : public ::google::protobuf::Message {
 public:
  InstallSnapshotRequestPB();
  virtual ~InstallSnapshotRequestPB();

  InstallSnapshotRequestPB(const InstallSnapshotRequestPB& from);

  inline InstallSnapshotRequestPB& operator=(const InstallSnapshotRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotRequestPB& default_instance();

  void Swap(InstallSnapshotRequestPB* other);

  // implements Message ----------------------------------------------

  InstallSnapshotRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallSnapshotRequestPB& from);
  void MergeFrom(const InstallSnapshotRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 server_id() const;
  inline void set_server_id(::google::protobuf::uint64 value);

  // required uint64 term = 3;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 3;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 last_snapshot_index = 4;
  inline bool has_last_snapshot_index() const;
  inline void clear_last_snapshot_index();
  static const int kLastSnapshotIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 last_snapshot_index() const;
  inline void set_last_snapshot_index(::google::protobuf::uint64 value);

  // required uint64 byte_offset = 5;
  inline bool has_byte_offset() const;
  inline void clear_byte_offset();
  static const int kByteOffsetFieldNumber = 5;
  inline ::google::protobuf::uint64 byte_offset() const;
  inline void set_byte_offset(::google::protobuf::uint64 value);

  // required bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required bool done = 7;
  inline bool has_done() const;
  inline void clear_done();
  static const int kDoneFieldNumber = 7;
  inline bool done() const;
  inline void set_done(bool value);

  // optional uint32 version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:base.raft.raft.InstallSnapshotRequestPB)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_last_snapshot_index();
  inline void clear_has_last_snapshot_index();
  inline void set_has_byte_offset();
  inline void clear_has_byte_offset();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_done();
  inline void clear_has_done();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_snapshot_index_;
  ::google::protobuf::uint64 byte_offset_;
  ::std::string* data_;
  bool done_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static InstallSnapshotRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class InstallSnapshotResponsePB : public ::google::protobuf::Message {
 public:
  InstallSnapshotResponsePB();
  virtual ~InstallSnapshotResponsePB();

  InstallSnapshotResponsePB(const InstallSnapshotResponsePB& from);

  inline InstallSnapshotResponsePB& operator=(const InstallSnapshotResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotResponsePB& default_instance();

  void Swap(InstallSnapshotResponsePB* other);

  // implements Message ----------------------------------------------

  InstallSnapshotResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallSnapshotResponsePB& from);
  void MergeFrom(const InstallSnapshotResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // optional uint64 bytes_stored = 2;
  inline bool has_bytes_stored() const;
  inline void clear_bytes_stored();
  static const int kBytesStoredFieldNumber = 2;
  inline ::google::protobuf::uint64 bytes_stored() const;
  inline void set_bytes_stored(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:base.raft.raft.InstallSnapshotResponsePB)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_bytes_stored();
  inline void clear_has_bytes_stored();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 bytes_stored_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto();

  void InitAsDefaultInstance();
  static InstallSnapshotResponsePB* default_instance_;
};
// ===================================================================


// ===================================================================

// Error

// -------------------------------------------------------------------

// ServerPB

// required uint64 server_id = 1;
inline bool ServerPB::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerPB::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerPB::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerPB::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 ServerPB::server_id() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.ServerPB.server_id)
  return server_id_;
}
inline void ServerPB::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.ServerPB.server_id)
}

// required string addresses = 2;
inline bool ServerPB::has_addresses() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerPB::set_has_addresses() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerPB::clear_has_addresses() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerPB::clear_addresses() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_->clear();
  }
  clear_has_addresses();
}
inline const ::std::string& ServerPB::addresses() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.ServerPB.addresses)
  return *addresses_;
}
inline void ServerPB::set_addresses(const ::std::string& value) {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  addresses_->assign(value);
  // @@protoc_insertion_point(field_set:base.raft.raft.ServerPB.addresses)
}
inline void ServerPB::set_addresses(const char* value) {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  addresses_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.raft.raft.ServerPB.addresses)
}
inline void ServerPB::set_addresses(const char* value, size_t size) {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  addresses_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.raft.raft.ServerPB.addresses)
}
inline ::std::string* ServerPB::mutable_addresses() {
  set_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addresses_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.raft.raft.ServerPB.addresses)
  return addresses_;
}
inline ::std::string* ServerPB::release_addresses() {
  clear_has_addresses();
  if (addresses_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addresses_;
    addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerPB::set_allocated_addresses(::std::string* addresses) {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (addresses) {
    set_has_addresses();
    addresses_ = addresses;
  } else {
    clear_has_addresses();
    addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.ServerPB.addresses)
}

// -------------------------------------------------------------------

// SimpleConfigurationPB

// repeated .base.raft.raft.ServerPB servers = 1;
inline int SimpleConfigurationPB::servers_size() const {
  return servers_.size();
}
inline void SimpleConfigurationPB::clear_servers() {
  servers_.Clear();
}
inline const ::base::raft::raft::ServerPB& SimpleConfigurationPB::servers(int index) const {
  // @@protoc_insertion_point(field_get:base.raft.raft.SimpleConfigurationPB.servers)
  return servers_.Get(index);
}
inline ::base::raft::raft::ServerPB* SimpleConfigurationPB::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:base.raft.raft.SimpleConfigurationPB.servers)
  return servers_.Mutable(index);
}
inline ::base::raft::raft::ServerPB* SimpleConfigurationPB::add_servers() {
  // @@protoc_insertion_point(field_add:base.raft.raft.SimpleConfigurationPB.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::raft::raft::ServerPB >&
SimpleConfigurationPB::servers() const {
  // @@protoc_insertion_point(field_list:base.raft.raft.SimpleConfigurationPB.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::base::raft::raft::ServerPB >*
SimpleConfigurationPB::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:base.raft.raft.SimpleConfigurationPB.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// ConfigurationPB

// required .base.raft.raft.SimpleConfigurationPB prev_configuration = 1;
inline bool ConfigurationPB::has_prev_configuration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigurationPB::set_has_prev_configuration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigurationPB::clear_has_prev_configuration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigurationPB::clear_prev_configuration() {
  if (prev_configuration_ != NULL) prev_configuration_->::base::raft::raft::SimpleConfigurationPB::Clear();
  clear_has_prev_configuration();
}
inline const ::base::raft::raft::SimpleConfigurationPB& ConfigurationPB::prev_configuration() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.ConfigurationPB.prev_configuration)
  return prev_configuration_ != NULL ? *prev_configuration_ : *default_instance_->prev_configuration_;
}
inline ::base::raft::raft::SimpleConfigurationPB* ConfigurationPB::mutable_prev_configuration() {
  set_has_prev_configuration();
  if (prev_configuration_ == NULL) prev_configuration_ = new ::base::raft::raft::SimpleConfigurationPB;
  // @@protoc_insertion_point(field_mutable:base.raft.raft.ConfigurationPB.prev_configuration)
  return prev_configuration_;
}
inline ::base::raft::raft::SimpleConfigurationPB* ConfigurationPB::release_prev_configuration() {
  clear_has_prev_configuration();
  ::base::raft::raft::SimpleConfigurationPB* temp = prev_configuration_;
  prev_configuration_ = NULL;
  return temp;
}
inline void ConfigurationPB::set_allocated_prev_configuration(::base::raft::raft::SimpleConfigurationPB* prev_configuration) {
  delete prev_configuration_;
  prev_configuration_ = prev_configuration;
  if (prev_configuration) {
    set_has_prev_configuration();
  } else {
    clear_has_prev_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.ConfigurationPB.prev_configuration)
}

// optional .base.raft.raft.SimpleConfigurationPB next_configuration = 2;
inline bool ConfigurationPB::has_next_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigurationPB::set_has_next_configuration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigurationPB::clear_has_next_configuration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigurationPB::clear_next_configuration() {
  if (next_configuration_ != NULL) next_configuration_->::base::raft::raft::SimpleConfigurationPB::Clear();
  clear_has_next_configuration();
}
inline const ::base::raft::raft::SimpleConfigurationPB& ConfigurationPB::next_configuration() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.ConfigurationPB.next_configuration)
  return next_configuration_ != NULL ? *next_configuration_ : *default_instance_->next_configuration_;
}
inline ::base::raft::raft::SimpleConfigurationPB* ConfigurationPB::mutable_next_configuration() {
  set_has_next_configuration();
  if (next_configuration_ == NULL) next_configuration_ = new ::base::raft::raft::SimpleConfigurationPB;
  // @@protoc_insertion_point(field_mutable:base.raft.raft.ConfigurationPB.next_configuration)
  return next_configuration_;
}
inline ::base::raft::raft::SimpleConfigurationPB* ConfigurationPB::release_next_configuration() {
  clear_has_next_configuration();
  ::base::raft::raft::SimpleConfigurationPB* temp = next_configuration_;
  next_configuration_ = NULL;
  return temp;
}
inline void ConfigurationPB::set_allocated_next_configuration(::base::raft::raft::SimpleConfigurationPB* next_configuration) {
  delete next_configuration_;
  next_configuration_ = next_configuration;
  if (next_configuration) {
    set_has_next_configuration();
  } else {
    clear_has_next_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.ConfigurationPB.next_configuration)
}

// -------------------------------------------------------------------

// EntryPB

// required uint64 term = 1;
inline bool EntryPB::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntryPB::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntryPB::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntryPB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 EntryPB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.EntryPB.term)
  return term_;
}
inline void EntryPB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.EntryPB.term)
}

// optional uint64 index = 5;
inline bool EntryPB::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntryPB::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntryPB::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntryPB::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 EntryPB::index() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.EntryPB.index)
  return index_;
}
inline void EntryPB::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.EntryPB.index)
}

// required uint64 cluster_time = 6;
inline bool EntryPB::has_cluster_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntryPB::set_has_cluster_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntryPB::clear_has_cluster_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntryPB::clear_cluster_time() {
  cluster_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cluster_time();
}
inline ::google::protobuf::uint64 EntryPB::cluster_time() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.EntryPB.cluster_time)
  return cluster_time_;
}
inline void EntryPB::set_cluster_time(::google::protobuf::uint64 value) {
  set_has_cluster_time();
  cluster_time_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.EntryPB.cluster_time)
}

// optional .base.raft.raft.EntryType type = 2;
inline bool EntryPB::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntryPB::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntryPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntryPB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::base::raft::raft::EntryType EntryPB::type() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.EntryPB.type)
  return static_cast< ::base::raft::raft::EntryType >(type_);
}
inline void EntryPB::set_type(::base::raft::raft::EntryType value) {
  assert(::base::raft::raft::EntryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.EntryPB.type)
}

// optional .base.raft.raft.ConfigurationPB configuration = 3;
inline bool EntryPB::has_configuration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EntryPB::set_has_configuration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EntryPB::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EntryPB::clear_configuration() {
  if (configuration_ != NULL) configuration_->::base::raft::raft::ConfigurationPB::Clear();
  clear_has_configuration();
}
inline const ::base::raft::raft::ConfigurationPB& EntryPB::configuration() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.EntryPB.configuration)
  return configuration_ != NULL ? *configuration_ : *default_instance_->configuration_;
}
inline ::base::raft::raft::ConfigurationPB* EntryPB::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) configuration_ = new ::base::raft::raft::ConfigurationPB;
  // @@protoc_insertion_point(field_mutable:base.raft.raft.EntryPB.configuration)
  return configuration_;
}
inline ::base::raft::raft::ConfigurationPB* EntryPB::release_configuration() {
  clear_has_configuration();
  ::base::raft::raft::ConfigurationPB* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
inline void EntryPB::set_allocated_configuration(::base::raft::raft::ConfigurationPB* configuration) {
  delete configuration_;
  configuration_ = configuration;
  if (configuration) {
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.EntryPB.configuration)
}

// optional bytes data = 4;
inline bool EntryPB::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EntryPB::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EntryPB::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EntryPB::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& EntryPB::data() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.EntryPB.data)
  return *data_;
}
inline void EntryPB::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:base.raft.raft.EntryPB.data)
}
inline void EntryPB::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.raft.raft.EntryPB.data)
}
inline void EntryPB::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.raft.raft.EntryPB.data)
}
inline ::std::string* EntryPB::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.raft.raft.EntryPB.data)
  return data_;
}
inline ::std::string* EntryPB::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EntryPB::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.EntryPB.data)
}

// -------------------------------------------------------------------

// RequestVoteRequestPB

// required uint64 server_id = 1;
inline bool RequestVoteRequestPB::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteRequestPB::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteRequestPB::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteRequestPB::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 RequestVoteRequestPB::server_id() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteRequestPB.server_id)
  return server_id_;
}
inline void RequestVoteRequestPB::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteRequestPB.server_id)
}

// required uint64 term = 2;
inline bool RequestVoteRequestPB::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteRequestPB::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteRequestPB::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteRequestPB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RequestVoteRequestPB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteRequestPB.term)
  return term_;
}
inline void RequestVoteRequestPB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteRequestPB.term)
}

// required uint64 last_log_term = 3;
inline bool RequestVoteRequestPB::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteRequestPB::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVoteRequestPB::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVoteRequestPB::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 RequestVoteRequestPB::last_log_term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteRequestPB.last_log_term)
  return last_log_term_;
}
inline void RequestVoteRequestPB::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteRequestPB.last_log_term)
}

// required uint64 last_log_index = 4;
inline bool RequestVoteRequestPB::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteRequestPB::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestVoteRequestPB::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestVoteRequestPB::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 RequestVoteRequestPB::last_log_index() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteRequestPB.last_log_index)
  return last_log_index_;
}
inline void RequestVoteRequestPB::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteRequestPB.last_log_index)
}

// -------------------------------------------------------------------

// RequestVoteResponsePB

// required uint64 term = 1;
inline bool RequestVoteResponsePB::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteResponsePB::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteResponsePB::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteResponsePB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RequestVoteResponsePB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteResponsePB.term)
  return term_;
}
inline void RequestVoteResponsePB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteResponsePB.term)
}

// required bool granted = 2;
inline bool RequestVoteResponsePB::has_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteResponsePB::set_has_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteResponsePB::clear_has_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteResponsePB::clear_granted() {
  granted_ = false;
  clear_has_granted();
}
inline bool RequestVoteResponsePB::granted() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteResponsePB.granted)
  return granted_;
}
inline void RequestVoteResponsePB::set_granted(bool value) {
  set_has_granted();
  granted_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteResponsePB.granted)
}

// optional bool log_ok = 3;
inline bool RequestVoteResponsePB::has_log_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteResponsePB::set_has_log_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVoteResponsePB::clear_has_log_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVoteResponsePB::clear_log_ok() {
  log_ok_ = false;
  clear_has_log_ok();
}
inline bool RequestVoteResponsePB::log_ok() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.RequestVoteResponsePB.log_ok)
  return log_ok_;
}
inline void RequestVoteResponsePB::set_log_ok(bool value) {
  set_has_log_ok();
  log_ok_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.RequestVoteResponsePB.log_ok)
}

// -------------------------------------------------------------------

// AppendEntriesRequestPB

// required uint64 server_id = 1;
inline bool AppendEntriesRequestPB::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRequestPB::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesRequestPB::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesRequestPB::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 AppendEntriesRequestPB::server_id() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesRequestPB.server_id)
  return server_id_;
}
inline void AppendEntriesRequestPB::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesRequestPB.server_id)
}

// required uint64 term = 2;
inline bool AppendEntriesRequestPB::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRequestPB::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesRequestPB::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesRequestPB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendEntriesRequestPB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesRequestPB.term)
  return term_;
}
inline void AppendEntriesRequestPB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesRequestPB.term)
}

// required uint64 prev_log_index = 3;
inline bool AppendEntriesRequestPB::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRequestPB::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesRequestPB::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesRequestPB::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::uint64 AppendEntriesRequestPB::prev_log_index() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesRequestPB.prev_log_index)
  return prev_log_index_;
}
inline void AppendEntriesRequestPB::set_prev_log_index(::google::protobuf::uint64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesRequestPB.prev_log_index)
}

// required uint64 prev_log_term = 4;
inline bool AppendEntriesRequestPB::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRequestPB::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesRequestPB::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesRequestPB::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::uint64 AppendEntriesRequestPB::prev_log_term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesRequestPB.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntriesRequestPB::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesRequestPB.prev_log_term)
}

// repeated .base.raft.raft.EntryPB entries = 5;
inline int AppendEntriesRequestPB::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequestPB::clear_entries() {
  entries_.Clear();
}
inline const ::base::raft::raft::EntryPB& AppendEntriesRequestPB::entries(int index) const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesRequestPB.entries)
  return entries_.Get(index);
}
inline ::base::raft::raft::EntryPB* AppendEntriesRequestPB::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:base.raft.raft.AppendEntriesRequestPB.entries)
  return entries_.Mutable(index);
}
inline ::base::raft::raft::EntryPB* AppendEntriesRequestPB::add_entries() {
  // @@protoc_insertion_point(field_add:base.raft.raft.AppendEntriesRequestPB.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::raft::raft::EntryPB >&
AppendEntriesRequestPB::entries() const {
  // @@protoc_insertion_point(field_list:base.raft.raft.AppendEntriesRequestPB.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::base::raft::raft::EntryPB >*
AppendEntriesRequestPB::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:base.raft.raft.AppendEntriesRequestPB.entries)
  return &entries_;
}

// required uint64 commit_index = 6;
inline bool AppendEntriesRequestPB::has_commit_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntriesRequestPB::set_has_commit_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppendEntriesRequestPB::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppendEntriesRequestPB::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 AppendEntriesRequestPB::commit_index() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesRequestPB.commit_index)
  return commit_index_;
}
inline void AppendEntriesRequestPB::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesRequestPB.commit_index)
}

// -------------------------------------------------------------------

// AppendEntriesResponsePB_ServerCapabilities

// optional uint32 min_supported_state_machine_version = 1;
inline bool AppendEntriesResponsePB_ServerCapabilities::has_min_supported_state_machine_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponsePB_ServerCapabilities::set_has_min_supported_state_machine_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesResponsePB_ServerCapabilities::clear_has_min_supported_state_machine_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesResponsePB_ServerCapabilities::clear_min_supported_state_machine_version() {
  min_supported_state_machine_version_ = 0u;
  clear_has_min_supported_state_machine_version();
}
inline ::google::protobuf::uint32 AppendEntriesResponsePB_ServerCapabilities::min_supported_state_machine_version() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities.min_supported_state_machine_version)
  return min_supported_state_machine_version_;
}
inline void AppendEntriesResponsePB_ServerCapabilities::set_min_supported_state_machine_version(::google::protobuf::uint32 value) {
  set_has_min_supported_state_machine_version();
  min_supported_state_machine_version_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities.min_supported_state_machine_version)
}

// optional uint32 max_supported_state_machine_version = 2;
inline bool AppendEntriesResponsePB_ServerCapabilities::has_max_supported_state_machine_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponsePB_ServerCapabilities::set_has_max_supported_state_machine_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesResponsePB_ServerCapabilities::clear_has_max_supported_state_machine_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesResponsePB_ServerCapabilities::clear_max_supported_state_machine_version() {
  max_supported_state_machine_version_ = 0u;
  clear_has_max_supported_state_machine_version();
}
inline ::google::protobuf::uint32 AppendEntriesResponsePB_ServerCapabilities::max_supported_state_machine_version() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities.max_supported_state_machine_version)
  return max_supported_state_machine_version_;
}
inline void AppendEntriesResponsePB_ServerCapabilities::set_max_supported_state_machine_version(::google::protobuf::uint32 value) {
  set_has_max_supported_state_machine_version();
  max_supported_state_machine_version_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities.max_supported_state_machine_version)
}

// -------------------------------------------------------------------

// AppendEntriesResponsePB

// required uint64 term = 1;
inline bool AppendEntriesResponsePB::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponsePB::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesResponsePB::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesResponsePB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendEntriesResponsePB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesResponsePB.term)
  return term_;
}
inline void AppendEntriesResponsePB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesResponsePB.term)
}

// required bool success = 2;
inline bool AppendEntriesResponsePB::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponsePB::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesResponsePB::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesResponsePB::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntriesResponsePB::success() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesResponsePB.success)
  return success_;
}
inline void AppendEntriesResponsePB::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesResponsePB.success)
}

// optional uint64 last_log_index = 3;
inline bool AppendEntriesResponsePB::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesResponsePB::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesResponsePB::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesResponsePB::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 AppendEntriesResponsePB::last_log_index() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesResponsePB.last_log_index)
  return last_log_index_;
}
inline void AppendEntriesResponsePB::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.AppendEntriesResponsePB.last_log_index)
}

// optional .base.raft.raft.AppendEntriesResponsePB.ServerCapabilities server_capabilities = 4;
inline bool AppendEntriesResponsePB::has_server_capabilities() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesResponsePB::set_has_server_capabilities() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesResponsePB::clear_has_server_capabilities() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesResponsePB::clear_server_capabilities() {
  if (server_capabilities_ != NULL) server_capabilities_->::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities::Clear();
  clear_has_server_capabilities();
}
inline const ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities& AppendEntriesResponsePB::server_capabilities() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.AppendEntriesResponsePB.server_capabilities)
  return server_capabilities_ != NULL ? *server_capabilities_ : *default_instance_->server_capabilities_;
}
inline ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* AppendEntriesResponsePB::mutable_server_capabilities() {
  set_has_server_capabilities();
  if (server_capabilities_ == NULL) server_capabilities_ = new ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities;
  // @@protoc_insertion_point(field_mutable:base.raft.raft.AppendEntriesResponsePB.server_capabilities)
  return server_capabilities_;
}
inline ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* AppendEntriesResponsePB::release_server_capabilities() {
  clear_has_server_capabilities();
  ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* temp = server_capabilities_;
  server_capabilities_ = NULL;
  return temp;
}
inline void AppendEntriesResponsePB::set_allocated_server_capabilities(::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities* server_capabilities) {
  delete server_capabilities_;
  server_capabilities_ = server_capabilities;
  if (server_capabilities) {
    set_has_server_capabilities();
  } else {
    clear_has_server_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.AppendEntriesResponsePB.server_capabilities)
}

// -------------------------------------------------------------------

// InstallSnapshotRequestPB

// required uint64 server_id = 1;
inline bool InstallSnapshotRequestPB::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallSnapshotRequestPB::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallSnapshotRequestPB::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::uint64 InstallSnapshotRequestPB::server_id() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.server_id)
  return server_id_;
}
inline void InstallSnapshotRequestPB::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.server_id)
}

// required uint64 term = 3;
inline bool InstallSnapshotRequestPB::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallSnapshotRequestPB::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallSnapshotRequestPB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 InstallSnapshotRequestPB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.term)
  return term_;
}
inline void InstallSnapshotRequestPB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.term)
}

// required uint64 last_snapshot_index = 4;
inline bool InstallSnapshotRequestPB::has_last_snapshot_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_last_snapshot_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstallSnapshotRequestPB::clear_has_last_snapshot_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstallSnapshotRequestPB::clear_last_snapshot_index() {
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_snapshot_index();
}
inline ::google::protobuf::uint64 InstallSnapshotRequestPB::last_snapshot_index() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.last_snapshot_index)
  return last_snapshot_index_;
}
inline void InstallSnapshotRequestPB::set_last_snapshot_index(::google::protobuf::uint64 value) {
  set_has_last_snapshot_index();
  last_snapshot_index_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.last_snapshot_index)
}

// required uint64 byte_offset = 5;
inline bool InstallSnapshotRequestPB::has_byte_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_byte_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstallSnapshotRequestPB::clear_has_byte_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstallSnapshotRequestPB::clear_byte_offset() {
  byte_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_byte_offset();
}
inline ::google::protobuf::uint64 InstallSnapshotRequestPB::byte_offset() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.byte_offset)
  return byte_offset_;
}
inline void InstallSnapshotRequestPB::set_byte_offset(::google::protobuf::uint64 value) {
  set_has_byte_offset();
  byte_offset_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.byte_offset)
}

// required bytes data = 6;
inline bool InstallSnapshotRequestPB::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InstallSnapshotRequestPB::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InstallSnapshotRequestPB::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& InstallSnapshotRequestPB::data() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.data)
  return *data_;
}
inline void InstallSnapshotRequestPB::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.data)
}
inline void InstallSnapshotRequestPB::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.raft.raft.InstallSnapshotRequestPB.data)
}
inline void InstallSnapshotRequestPB::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.raft.raft.InstallSnapshotRequestPB.data)
}
inline ::std::string* InstallSnapshotRequestPB::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.raft.raft.InstallSnapshotRequestPB.data)
  return data_;
}
inline ::std::string* InstallSnapshotRequestPB::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InstallSnapshotRequestPB::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.raft.raft.InstallSnapshotRequestPB.data)
}

// required bool done = 7;
inline bool InstallSnapshotRequestPB::has_done() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_done() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InstallSnapshotRequestPB::clear_has_done() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InstallSnapshotRequestPB::clear_done() {
  done_ = false;
  clear_has_done();
}
inline bool InstallSnapshotRequestPB::done() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.done)
  return done_;
}
inline void InstallSnapshotRequestPB::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.done)
}

// optional uint32 version = 8;
inline bool InstallSnapshotRequestPB::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InstallSnapshotRequestPB::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InstallSnapshotRequestPB::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InstallSnapshotRequestPB::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 InstallSnapshotRequestPB::version() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotRequestPB.version)
  return version_;
}
inline void InstallSnapshotRequestPB::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotRequestPB.version)
}

// -------------------------------------------------------------------

// InstallSnapshotResponsePB

// required uint64 term = 1;
inline bool InstallSnapshotResponsePB::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotResponsePB::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallSnapshotResponsePB::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallSnapshotResponsePB::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 InstallSnapshotResponsePB::term() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotResponsePB.term)
  return term_;
}
inline void InstallSnapshotResponsePB::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotResponsePB.term)
}

// optional uint64 bytes_stored = 2;
inline bool InstallSnapshotResponsePB::has_bytes_stored() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotResponsePB::set_has_bytes_stored() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallSnapshotResponsePB::clear_has_bytes_stored() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallSnapshotResponsePB::clear_bytes_stored() {
  bytes_stored_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_stored();
}
inline ::google::protobuf::uint64 InstallSnapshotResponsePB::bytes_stored() const {
  // @@protoc_insertion_point(field_get:base.raft.raft.InstallSnapshotResponsePB.bytes_stored)
  return bytes_stored_;
}
inline void InstallSnapshotResponsePB::set_bytes_stored(::google::protobuf::uint64 value) {
  set_has_bytes_stored();
  bytes_stored_ = value;
  // @@protoc_insertion_point(field_set:base.raft.raft.InstallSnapshotResponsePB.bytes_stored)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft
}  // namespace raft
}  // namespace base

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::base::raft::raft::OpCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::raft::raft::OpCode>() {
  return ::base::raft::raft::OpCode_descriptor();
}
template <> struct is_proto_enum< ::base::raft::raft::EntryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::raft::raft::EntryType>() {
  return ::base::raft::raft::EntryType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fraft_2fproto_2fraft_2eproto__INCLUDED
