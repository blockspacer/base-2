// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/consensus.proto

#ifndef PROTOBUF_base_2fraft_2fproto_2fconsensus_2eproto__INCLUDED
#define PROTOBUF_base_2fraft_2fproto_2fconsensus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/common/common.pb.h"
#include "base/common/wire_protocol.pb.h"
#include "base/raft/proto/metadata.pb.h"
#include "base/raft/proto/opid.pb.h"
#include "base/rpc/rpc_header.pb.h"
// @@protoc_insertion_point(includes)

namespace base {
namespace consensus {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

class ConsensusErrorPB;
class ChangeConfigRecordPB;
class ChangeConfigRequestPB;
class ChangeConfigResponsePB;
class ReplicateMsg;
class CommitMsg;
class NoOpRequestPB;
class ConsensusStatusPB;
class VoteRequestPB;
class VoteResponsePB;
class ConsensusRequestPB;
class ConsensusResponsePB;
class TransactionStatusPB;
class GetNodeInstanceRequestPB;
class GetNodeInstanceResponsePB;
class RunLeaderElectionRequestPB;
class RunLeaderElectionResponsePB;
class LeaderStepDownRequestPB;
class LeaderStepDownResponsePB;
class GetLastOpIdRequestPB;
class GetLastOpIdResponsePB;
class GetConsensusStateRequestPB;
class GetConsensusStateResponsePB;
class StartTabletCopyRequestPB;
class StartTabletCopyResponsePB;

enum ConsensusErrorPB_Code {
  ConsensusErrorPB_Code_UNKNOWN = 0,
  ConsensusErrorPB_Code_INVALID_TERM = 2,
  ConsensusErrorPB_Code_LAST_OPID_TOO_OLD = 3,
  ConsensusErrorPB_Code_ALREADY_VOTED = 4,
  ConsensusErrorPB_Code_NOT_IN_QUORUM = 5,
  ConsensusErrorPB_Code_PRECEDING_ENTRY_DIDNT_MATCH = 6,
  ConsensusErrorPB_Code_LEADER_IS_ALIVE = 7,
  ConsensusErrorPB_Code_CONSENSUS_BUSY = 8,
  ConsensusErrorPB_Code_CANNOT_PREPARE = 9
};
bool ConsensusErrorPB_Code_IsValid(int value);
const ConsensusErrorPB_Code ConsensusErrorPB_Code_Code_MIN = ConsensusErrorPB_Code_UNKNOWN;
const ConsensusErrorPB_Code ConsensusErrorPB_Code_Code_MAX = ConsensusErrorPB_Code_CANNOT_PREPARE;
const int ConsensusErrorPB_Code_Code_ARRAYSIZE = ConsensusErrorPB_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConsensusErrorPB_Code_descriptor();
inline const ::std::string& ConsensusErrorPB_Code_Name(ConsensusErrorPB_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConsensusErrorPB_Code_descriptor(), value);
}
inline bool ConsensusErrorPB_Code_Parse(
    const ::std::string& name, ConsensusErrorPB_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsensusErrorPB_Code>(
    ConsensusErrorPB_Code_descriptor(), name, value);
}
enum OperationType {
  UNKNOWN_OP = 0,
  NO_OP = 1,
  WRITE_OP = 3,
  CHANGE_CONFIG_OP = 4
};
bool OperationType_IsValid(int value);
const OperationType OperationType_MIN = UNKNOWN_OP;
const OperationType OperationType_MAX = CHANGE_CONFIG_OP;
const int OperationType_ARRAYSIZE = OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OperationType_descriptor();
inline const ::std::string& OperationType_Name(OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperationType_descriptor(), value);
}
inline bool OperationType_Parse(
    const ::std::string& name, OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperationType>(
    OperationType_descriptor(), name, value);
}
enum DriverType {
  UNKNOWN_DRIVER = 0,
  LEADER = 1,
  REPLICA = 2
};
bool DriverType_IsValid(int value);
const DriverType DriverType_MIN = UNKNOWN_DRIVER;
const DriverType DriverType_MAX = REPLICA;
const int DriverType_ARRAYSIZE = DriverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriverType_descriptor();
inline const ::std::string& DriverType_Name(DriverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriverType_descriptor(), value);
}
inline bool DriverType_Parse(
    const ::std::string& name, DriverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriverType>(
    DriverType_descriptor(), name, value);
}
enum ChangeConfigType {
  UNKNOWN_CHANGE = 0,
  ADD_SERVER = 1,
  REMOVE_SERVER = 2,
  CHANGE_ROLE = 3
};
bool ChangeConfigType_IsValid(int value);
const ChangeConfigType ChangeConfigType_MIN = UNKNOWN_CHANGE;
const ChangeConfigType ChangeConfigType_MAX = CHANGE_ROLE;
const int ChangeConfigType_ARRAYSIZE = ChangeConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeConfigType_descriptor();
inline const ::std::string& ChangeConfigType_Name(ChangeConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeConfigType_descriptor(), value);
}
inline bool ChangeConfigType_Parse(
    const ::std::string& name, ChangeConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeConfigType>(
    ChangeConfigType_descriptor(), name, value);
}
enum OpIdType {
  UNKNOWN_OPID_TYPE = 0,
  RECEIVED_OPID = 1,
  COMMITTED_OPID = 2
};
bool OpIdType_IsValid(int value);
const OpIdType OpIdType_MIN = UNKNOWN_OPID_TYPE;
const OpIdType OpIdType_MAX = COMMITTED_OPID;
const int OpIdType_ARRAYSIZE = OpIdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpIdType_descriptor();
inline const ::std::string& OpIdType_Name(OpIdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpIdType_descriptor(), value);
}
inline bool OpIdType_Parse(
    const ::std::string& name, OpIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpIdType>(
    OpIdType_descriptor(), name, value);
}
// ===================================================================

class ConsensusErrorPB : public ::google::protobuf::Message {
 public:
  ConsensusErrorPB();
  virtual ~ConsensusErrorPB();

  ConsensusErrorPB(const ConsensusErrorPB& from);

  inline ConsensusErrorPB& operator=(const ConsensusErrorPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusErrorPB& default_instance();

  void Swap(ConsensusErrorPB* other);

  // implements Message ----------------------------------------------

  ConsensusErrorPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusErrorPB& from);
  void MergeFrom(const ConsensusErrorPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConsensusErrorPB_Code Code;
  static const Code UNKNOWN = ConsensusErrorPB_Code_UNKNOWN;
  static const Code INVALID_TERM = ConsensusErrorPB_Code_INVALID_TERM;
  static const Code LAST_OPID_TOO_OLD = ConsensusErrorPB_Code_LAST_OPID_TOO_OLD;
  static const Code ALREADY_VOTED = ConsensusErrorPB_Code_ALREADY_VOTED;
  static const Code NOT_IN_QUORUM = ConsensusErrorPB_Code_NOT_IN_QUORUM;
  static const Code PRECEDING_ENTRY_DIDNT_MATCH = ConsensusErrorPB_Code_PRECEDING_ENTRY_DIDNT_MATCH;
  static const Code LEADER_IS_ALIVE = ConsensusErrorPB_Code_LEADER_IS_ALIVE;
  static const Code CONSENSUS_BUSY = ConsensusErrorPB_Code_CONSENSUS_BUSY;
  static const Code CANNOT_PREPARE = ConsensusErrorPB_Code_CANNOT_PREPARE;
  static inline bool Code_IsValid(int value) {
    return ConsensusErrorPB_Code_IsValid(value);
  }
  static const Code Code_MIN =
    ConsensusErrorPB_Code_Code_MIN;
  static const Code Code_MAX =
    ConsensusErrorPB_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    ConsensusErrorPB_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return ConsensusErrorPB_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return ConsensusErrorPB_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return ConsensusErrorPB_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .base.consensus.ConsensusErrorPB.Code code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::base::consensus::ConsensusErrorPB_Code code() const;
  inline void set_code(::base::consensus::ConsensusErrorPB_Code value);

  // required .base.AppStatusPB status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::base::AppStatusPB& status() const;
  inline ::base::AppStatusPB* mutable_status();
  inline ::base::AppStatusPB* release_status();
  inline void set_allocated_status(::base::AppStatusPB* status);

  // @@protoc_insertion_point(class_scope:base.consensus.ConsensusErrorPB)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::AppStatusPB* status_;
  int code_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ConsensusErrorPB* default_instance_;
};
// -------------------------------------------------------------------

class ChangeConfigRecordPB : public ::google::protobuf::Message {
 public:
  ChangeConfigRecordPB();
  virtual ~ChangeConfigRecordPB();

  ChangeConfigRecordPB(const ChangeConfigRecordPB& from);

  inline ChangeConfigRecordPB& operator=(const ChangeConfigRecordPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConfigRecordPB& default_instance();

  void Swap(ChangeConfigRecordPB* other);

  // implements Message ----------------------------------------------

  ChangeConfigRecordPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeConfigRecordPB& from);
  void MergeFrom(const ChangeConfigRecordPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // required .base.consensus.RaftConfigPB old_config = 2;
  inline bool has_old_config() const;
  inline void clear_old_config();
  static const int kOldConfigFieldNumber = 2;
  inline const ::base::consensus::RaftConfigPB& old_config() const;
  inline ::base::consensus::RaftConfigPB* mutable_old_config();
  inline ::base::consensus::RaftConfigPB* release_old_config();
  inline void set_allocated_old_config(::base::consensus::RaftConfigPB* old_config);

  // required .base.consensus.RaftConfigPB new_config = 3;
  inline bool has_new_config() const;
  inline void clear_new_config();
  static const int kNewConfigFieldNumber = 3;
  inline const ::base::consensus::RaftConfigPB& new_config() const;
  inline ::base::consensus::RaftConfigPB* mutable_new_config();
  inline ::base::consensus::RaftConfigPB* release_new_config();
  inline void set_allocated_new_config(::base::consensus::RaftConfigPB* new_config);

  // @@protoc_insertion_point(class_scope:base.consensus.ChangeConfigRecordPB)
 private:
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_old_config();
  inline void clear_has_old_config();
  inline void set_has_new_config();
  inline void clear_has_new_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablet_id_;
  ::base::consensus::RaftConfigPB* old_config_;
  ::base::consensus::RaftConfigPB* new_config_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ChangeConfigRecordPB* default_instance_;
};
// -------------------------------------------------------------------

class ChangeConfigRequestPB : public ::google::protobuf::Message {
 public:
  ChangeConfigRequestPB();
  virtual ~ChangeConfigRequestPB();

  ChangeConfigRequestPB(const ChangeConfigRequestPB& from);

  inline ChangeConfigRequestPB& operator=(const ChangeConfigRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConfigRequestPB& default_instance();

  void Swap(ChangeConfigRequestPB* other);

  // implements Message ----------------------------------------------

  ChangeConfigRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeConfigRequestPB& from);
  void MergeFrom(const ChangeConfigRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 4;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 4;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // optional .base.consensus.ChangeConfigType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::base::consensus::ChangeConfigType type() const;
  inline void set_type(::base::consensus::ChangeConfigType value);

  // optional .base.consensus.RaftPeerPB server = 3;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 3;
  inline const ::base::consensus::RaftPeerPB& server() const;
  inline ::base::consensus::RaftPeerPB* mutable_server();
  inline ::base::consensus::RaftPeerPB* release_server();
  inline void set_allocated_server(::base::consensus::RaftPeerPB* server);

  // optional int64 cas_config_opid_index = 5;
  inline bool has_cas_config_opid_index() const;
  inline void clear_cas_config_opid_index();
  static const int kCasConfigOpidIndexFieldNumber = 5;
  inline ::google::protobuf::int64 cas_config_opid_index() const;
  inline void set_cas_config_opid_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:base.consensus.ChangeConfigRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_cas_config_opid_index();
  inline void clear_has_cas_config_opid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  ::base::consensus::RaftPeerPB* server_;
  ::google::protobuf::int64 cas_config_opid_index_;
  int type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ChangeConfigRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class ChangeConfigResponsePB : public ::google::protobuf::Message {
 public:
  ChangeConfigResponsePB();
  virtual ~ChangeConfigResponsePB();

  ChangeConfigResponsePB(const ChangeConfigResponsePB& from);

  inline ChangeConfigResponsePB& operator=(const ChangeConfigResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeConfigResponsePB& default_instance();

  void Swap(ChangeConfigResponsePB* other);

  // implements Message ----------------------------------------------

  ChangeConfigResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeConfigResponsePB& from);
  void MergeFrom(const ChangeConfigResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .base.consensus.RaftPeerPB new_config = 2;
  inline bool has_new_config() const;
  inline void clear_new_config();
  static const int kNewConfigFieldNumber = 2;
  inline const ::base::consensus::RaftPeerPB& new_config() const;
  inline ::base::consensus::RaftPeerPB* mutable_new_config();
  inline ::base::consensus::RaftPeerPB* release_new_config();
  inline void set_allocated_new_config(::base::consensus::RaftPeerPB* new_config);

  // optional fixed64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:base.consensus.ChangeConfigResponsePB)
 private:
  inline void set_has_new_config();
  inline void clear_has_new_config();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::RaftPeerPB* new_config_;
  ::google::protobuf::uint64 timestamp_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ChangeConfigResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class ReplicateMsg : public ::google::protobuf::Message {
 public:
  ReplicateMsg();
  virtual ~ReplicateMsg();

  ReplicateMsg(const ReplicateMsg& from);

  inline ReplicateMsg& operator=(const ReplicateMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicateMsg& default_instance();

  void Swap(ReplicateMsg* other);

  // implements Message ----------------------------------------------

  ReplicateMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicateMsg& from);
  void MergeFrom(const ReplicateMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.consensus.OpId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::base::consensus::OpId& id() const;
  inline ::base::consensus::OpId* mutable_id();
  inline ::base::consensus::OpId* release_id();
  inline void set_allocated_id(::base::consensus::OpId* id);

  // required fixed64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required .base.consensus.OperationType op_type = 4;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 4;
  inline ::base::consensus::OperationType op_type() const;
  inline void set_op_type(::base::consensus::OperationType value);

  // optional .base.consensus.ChangeConfigRecordPB change_config_record = 7;
  inline bool has_change_config_record() const;
  inline void clear_change_config_record();
  static const int kChangeConfigRecordFieldNumber = 7;
  inline const ::base::consensus::ChangeConfigRecordPB& change_config_record() const;
  inline ::base::consensus::ChangeConfigRecordPB* mutable_change_config_record();
  inline ::base::consensus::ChangeConfigRecordPB* release_change_config_record();
  inline void set_allocated_change_config_record(::base::consensus::ChangeConfigRecordPB* change_config_record);

  // optional .base.rpc.RequestIdPB request_id = 8;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 8;
  inline const ::base::rpc::RequestIdPB& request_id() const;
  inline ::base::rpc::RequestIdPB* mutable_request_id();
  inline ::base::rpc::RequestIdPB* release_request_id();
  inline void set_allocated_request_id(::base::rpc::RequestIdPB* request_id);

  // optional .base.consensus.NoOpRequestPB noop_request = 999;
  inline bool has_noop_request() const;
  inline void clear_noop_request();
  static const int kNoopRequestFieldNumber = 999;
  inline const ::base::consensus::NoOpRequestPB& noop_request() const;
  inline ::base::consensus::NoOpRequestPB* mutable_noop_request();
  inline ::base::consensus::NoOpRequestPB* release_noop_request();
  inline void set_allocated_noop_request(::base::consensus::NoOpRequestPB* noop_request);

  // @@protoc_insertion_point(class_scope:base.consensus.ReplicateMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_change_config_record();
  inline void clear_has_change_config_record();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_noop_request();
  inline void clear_has_noop_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::OpId* id_;
  ::google::protobuf::uint64 timestamp_;
  ::base::consensus::ChangeConfigRecordPB* change_config_record_;
  ::base::rpc::RequestIdPB* request_id_;
  ::base::consensus::NoOpRequestPB* noop_request_;
  int op_type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ReplicateMsg* default_instance_;
};
// -------------------------------------------------------------------

class CommitMsg : public ::google::protobuf::Message {
 public:
  CommitMsg();
  virtual ~CommitMsg();

  CommitMsg(const CommitMsg& from);

  inline CommitMsg& operator=(const CommitMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitMsg& default_instance();

  void Swap(CommitMsg* other);

  // implements Message ----------------------------------------------

  CommitMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitMsg& from);
  void MergeFrom(const CommitMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.consensus.OperationType op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::base::consensus::OperationType op_type() const;
  inline void set_op_type(::base::consensus::OperationType value);

  // optional .base.consensus.OpId commited_op_id = 2;
  inline bool has_commited_op_id() const;
  inline void clear_commited_op_id();
  static const int kCommitedOpIdFieldNumber = 2;
  inline const ::base::consensus::OpId& commited_op_id() const;
  inline ::base::consensus::OpId* mutable_commited_op_id();
  inline ::base::consensus::OpId* release_commited_op_id();
  inline void set_allocated_commited_op_id(::base::consensus::OpId* commited_op_id);

  // @@protoc_insertion_point(class_scope:base.consensus.CommitMsg)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_commited_op_id();
  inline void clear_has_commited_op_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::OpId* commited_op_id_;
  int op_type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static CommitMsg* default_instance_;
};
// -------------------------------------------------------------------

class NoOpRequestPB : public ::google::protobuf::Message {
 public:
  NoOpRequestPB();
  virtual ~NoOpRequestPB();

  NoOpRequestPB(const NoOpRequestPB& from);

  inline NoOpRequestPB& operator=(const NoOpRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoOpRequestPB& default_instance();

  void Swap(NoOpRequestPB* other);

  // implements Message ----------------------------------------------

  NoOpRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoOpRequestPB& from);
  void MergeFrom(const NoOpRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes payload_for_tests = 1;
  inline bool has_payload_for_tests() const;
  inline void clear_payload_for_tests();
  static const int kPayloadForTestsFieldNumber = 1;
  inline const ::std::string& payload_for_tests() const;
  inline void set_payload_for_tests(const ::std::string& value);
  inline void set_payload_for_tests(const char* value);
  inline void set_payload_for_tests(const void* value, size_t size);
  inline ::std::string* mutable_payload_for_tests();
  inline ::std::string* release_payload_for_tests();
  inline void set_allocated_payload_for_tests(::std::string* payload_for_tests);

  // @@protoc_insertion_point(class_scope:base.consensus.NoOpRequestPB)
 private:
  inline void set_has_payload_for_tests();
  inline void clear_has_payload_for_tests();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* payload_for_tests_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static NoOpRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusStatusPB : public ::google::protobuf::Message {
 public:
  ConsensusStatusPB();
  virtual ~ConsensusStatusPB();

  ConsensusStatusPB(const ConsensusStatusPB& from);

  inline ConsensusStatusPB& operator=(const ConsensusStatusPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusStatusPB& default_instance();

  void Swap(ConsensusStatusPB* other);

  // implements Message ----------------------------------------------

  ConsensusStatusPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusStatusPB& from);
  void MergeFrom(const ConsensusStatusPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.consensus.OpId last_received = 1;
  inline bool has_last_received() const;
  inline void clear_last_received();
  static const int kLastReceivedFieldNumber = 1;
  inline const ::base::consensus::OpId& last_received() const;
  inline ::base::consensus::OpId* mutable_last_received();
  inline ::base::consensus::OpId* release_last_received();
  inline void set_allocated_last_received(::base::consensus::OpId* last_received);

  // optional .base.consensus.OpId last_received_current_leader = 4;
  inline bool has_last_received_current_leader() const;
  inline void clear_last_received_current_leader();
  static const int kLastReceivedCurrentLeaderFieldNumber = 4;
  inline const ::base::consensus::OpId& last_received_current_leader() const;
  inline ::base::consensus::OpId* mutable_last_received_current_leader();
  inline ::base::consensus::OpId* release_last_received_current_leader();
  inline void set_allocated_last_received_current_leader(::base::consensus::OpId* last_received_current_leader);

  // optional int64 last_committed_idx = 2;
  inline bool has_last_committed_idx() const;
  inline void clear_last_committed_idx();
  static const int kLastCommittedIdxFieldNumber = 2;
  inline ::google::protobuf::int64 last_committed_idx() const;
  inline void set_last_committed_idx(::google::protobuf::int64 value);

  // optional .base.consensus.ConsensusErrorPB error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::base::consensus::ConsensusErrorPB& error() const;
  inline ::base::consensus::ConsensusErrorPB* mutable_error();
  inline ::base::consensus::ConsensusErrorPB* release_error();
  inline void set_allocated_error(::base::consensus::ConsensusErrorPB* error);

  // @@protoc_insertion_point(class_scope:base.consensus.ConsensusStatusPB)
 private:
  inline void set_has_last_received();
  inline void clear_has_last_received();
  inline void set_has_last_received_current_leader();
  inline void clear_has_last_received_current_leader();
  inline void set_has_last_committed_idx();
  inline void clear_has_last_committed_idx();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::OpId* last_received_;
  ::base::consensus::OpId* last_received_current_leader_;
  ::google::protobuf::int64 last_committed_idx_;
  ::base::consensus::ConsensusErrorPB* error_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ConsensusStatusPB* default_instance_;
};
// -------------------------------------------------------------------

class VoteRequestPB : public ::google::protobuf::Message {
 public:
  VoteRequestPB();
  virtual ~VoteRequestPB();

  VoteRequestPB(const VoteRequestPB& from);

  inline VoteRequestPB& operator=(const VoteRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteRequestPB& default_instance();

  void Swap(VoteRequestPB* other);

  // implements Message ----------------------------------------------

  VoteRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteRequestPB& from);
  void MergeFrom(const VoteRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 6;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 6;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required string tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const char* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // required bytes candidate_uuid = 2;
  inline bool has_candidate_uuid() const;
  inline void clear_candidate_uuid();
  static const int kCandidateUuidFieldNumber = 2;
  inline const ::std::string& candidate_uuid() const;
  inline void set_candidate_uuid(const ::std::string& value);
  inline void set_candidate_uuid(const char* value);
  inline void set_candidate_uuid(const void* value, size_t size);
  inline ::std::string* mutable_candidate_uuid();
  inline ::std::string* release_candidate_uuid();
  inline void set_allocated_candidate_uuid(::std::string* candidate_uuid);

  // required int64 candidate_term = 3;
  inline bool has_candidate_term() const;
  inline void clear_candidate_term();
  static const int kCandidateTermFieldNumber = 3;
  inline ::google::protobuf::int64 candidate_term() const;
  inline void set_candidate_term(::google::protobuf::int64 value);

  // required .base.consensus.ConsensusStatusPB candidate_status = 4;
  inline bool has_candidate_status() const;
  inline void clear_candidate_status();
  static const int kCandidateStatusFieldNumber = 4;
  inline const ::base::consensus::ConsensusStatusPB& candidate_status() const;
  inline ::base::consensus::ConsensusStatusPB* mutable_candidate_status();
  inline ::base::consensus::ConsensusStatusPB* release_candidate_status();
  inline void set_allocated_candidate_status(::base::consensus::ConsensusStatusPB* candidate_status);

  // optional bool ignore_live_leader = 5 [default = false];
  inline bool has_ignore_live_leader() const;
  inline void clear_ignore_live_leader();
  static const int kIgnoreLiveLeaderFieldNumber = 5;
  inline bool ignore_live_leader() const;
  inline void set_ignore_live_leader(bool value);

  // optional bool is_pre_election = 7 [default = false];
  inline bool has_is_pre_election() const;
  inline void clear_is_pre_election();
  static const int kIsPreElectionFieldNumber = 7;
  inline bool is_pre_election() const;
  inline void set_is_pre_election(bool value);

  // @@protoc_insertion_point(class_scope:base.consensus.VoteRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_candidate_uuid();
  inline void clear_has_candidate_uuid();
  inline void set_has_candidate_term();
  inline void clear_has_candidate_term();
  inline void set_has_candidate_status();
  inline void clear_has_candidate_status();
  inline void set_has_ignore_live_leader();
  inline void clear_has_ignore_live_leader();
  inline void set_has_is_pre_election();
  inline void clear_has_is_pre_election();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  ::std::string* candidate_uuid_;
  ::google::protobuf::int64 candidate_term_;
  ::base::consensus::ConsensusStatusPB* candidate_status_;
  bool ignore_live_leader_;
  bool is_pre_election_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static VoteRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class VoteResponsePB : public ::google::protobuf::Message {
 public:
  VoteResponsePB();
  virtual ~VoteResponsePB();

  VoteResponsePB(const VoteResponsePB& from);

  inline VoteResponsePB& operator=(const VoteResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponsePB& default_instance();

  void Swap(VoteResponsePB* other);

  // implements Message ----------------------------------------------

  VoteResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResponsePB& from);
  void MergeFrom(const VoteResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes responder_uuid = 1;
  inline bool has_responder_uuid() const;
  inline void clear_responder_uuid();
  static const int kResponderUuidFieldNumber = 1;
  inline const ::std::string& responder_uuid() const;
  inline void set_responder_uuid(const ::std::string& value);
  inline void set_responder_uuid(const char* value);
  inline void set_responder_uuid(const void* value, size_t size);
  inline ::std::string* mutable_responder_uuid();
  inline ::std::string* release_responder_uuid();
  inline void set_allocated_responder_uuid(::std::string* responder_uuid);

  // optional int64 responder_term = 2;
  inline bool has_responder_term() const;
  inline void clear_responder_term();
  static const int kResponderTermFieldNumber = 2;
  inline ::google::protobuf::int64 responder_term() const;
  inline void set_responder_term(::google::protobuf::int64 value);

  // optional bool vote_granted = 3;
  inline bool has_vote_granted() const;
  inline void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 3;
  inline bool vote_granted() const;
  inline void set_vote_granted(bool value);

  // optional .base.consensus.ConsensusErrorPB consensus_error = 998;
  inline bool has_consensus_error() const;
  inline void clear_consensus_error();
  static const int kConsensusErrorFieldNumber = 998;
  inline const ::base::consensus::ConsensusErrorPB& consensus_error() const;
  inline ::base::consensus::ConsensusErrorPB* mutable_consensus_error();
  inline ::base::consensus::ConsensusErrorPB* release_consensus_error();
  inline void set_allocated_consensus_error(::base::consensus::ConsensusErrorPB* consensus_error);

  // @@protoc_insertion_point(class_scope:base.consensus.VoteResponsePB)
 private:
  inline void set_has_responder_uuid();
  inline void clear_has_responder_uuid();
  inline void set_has_responder_term();
  inline void clear_has_responder_term();
  inline void set_has_vote_granted();
  inline void clear_has_vote_granted();
  inline void set_has_consensus_error();
  inline void clear_has_consensus_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* responder_uuid_;
  ::google::protobuf::int64 responder_term_;
  ::base::consensus::ConsensusErrorPB* consensus_error_;
  bool vote_granted_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static VoteResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusRequestPB : public ::google::protobuf::Message {
 public:
  ConsensusRequestPB();
  virtual ~ConsensusRequestPB();

  ConsensusRequestPB(const ConsensusRequestPB& from);

  inline ConsensusRequestPB& operator=(const ConsensusRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusRequestPB& default_instance();

  void Swap(ConsensusRequestPB* other);

  // implements Message ----------------------------------------------

  ConsensusRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusRequestPB& from);
  void MergeFrom(const ConsensusRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 7;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 7;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required string tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const char* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // required bytes caller_uuid = 2;
  inline bool has_caller_uuid() const;
  inline void clear_caller_uuid();
  static const int kCallerUuidFieldNumber = 2;
  inline const ::std::string& caller_uuid() const;
  inline void set_caller_uuid(const ::std::string& value);
  inline void set_caller_uuid(const char* value);
  inline void set_caller_uuid(const void* value, size_t size);
  inline ::std::string* mutable_caller_uuid();
  inline ::std::string* release_caller_uuid();
  inline void set_allocated_caller_uuid(::std::string* caller_uuid);

  // required int64 caller_term = 3;
  inline bool has_caller_term() const;
  inline void clear_caller_term();
  static const int kCallerTermFieldNumber = 3;
  inline ::google::protobuf::int64 caller_term() const;
  inline void set_caller_term(::google::protobuf::int64 value);

  // optional .base.consensus.OpId preceding_id = 4;
  inline bool has_preceding_id() const;
  inline void clear_preceding_id();
  static const int kPrecedingIdFieldNumber = 4;
  inline const ::base::consensus::OpId& preceding_id() const;
  inline ::base::consensus::OpId* mutable_preceding_id();
  inline ::base::consensus::OpId* release_preceding_id();
  inline void set_allocated_preceding_id(::base::consensus::OpId* preceding_id);

  // optional int64 committed_index = 8;
  inline bool has_committed_index() const;
  inline void clear_committed_index();
  static const int kCommittedIndexFieldNumber = 8;
  inline ::google::protobuf::int64 committed_index() const;
  inline void set_committed_index(::google::protobuf::int64 value);

  // optional .base.consensus.OpId DEPRECATED_committed_index = 5;
  inline bool has_deprecated_committed_index() const;
  inline void clear_deprecated_committed_index();
  static const int kDEPRECATEDCommittedIndexFieldNumber = 5;
  inline const ::base::consensus::OpId& deprecated_committed_index() const;
  inline ::base::consensus::OpId* mutable_deprecated_committed_index();
  inline ::base::consensus::OpId* release_deprecated_committed_index();
  inline void set_allocated_deprecated_committed_index(::base::consensus::OpId* deprecated_committed_index);

  // repeated .base.consensus.ReplicateMsg ops = 6;
  inline int ops_size() const;
  inline void clear_ops();
  static const int kOpsFieldNumber = 6;
  inline const ::base::consensus::ReplicateMsg& ops(int index) const;
  inline ::base::consensus::ReplicateMsg* mutable_ops(int index);
  inline ::base::consensus::ReplicateMsg* add_ops();
  inline const ::google::protobuf::RepeatedPtrField< ::base::consensus::ReplicateMsg >&
      ops() const;
  inline ::google::protobuf::RepeatedPtrField< ::base::consensus::ReplicateMsg >*
      mutable_ops();

  // optional int64 all_replicated_index = 9;
  inline bool has_all_replicated_index() const;
  inline void clear_all_replicated_index();
  static const int kAllReplicatedIndexFieldNumber = 9;
  inline ::google::protobuf::int64 all_replicated_index() const;
  inline void set_all_replicated_index(::google::protobuf::int64 value);

  // optional fixed64 safe_timestamp = 10;
  inline bool has_safe_timestamp() const;
  inline void clear_safe_timestamp();
  static const int kSafeTimestampFieldNumber = 10;
  inline ::google::protobuf::uint64 safe_timestamp() const;
  inline void set_safe_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:base.consensus.ConsensusRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_caller_uuid();
  inline void clear_has_caller_uuid();
  inline void set_has_caller_term();
  inline void clear_has_caller_term();
  inline void set_has_preceding_id();
  inline void clear_has_preceding_id();
  inline void set_has_committed_index();
  inline void clear_has_committed_index();
  inline void set_has_deprecated_committed_index();
  inline void clear_has_deprecated_committed_index();
  inline void set_has_all_replicated_index();
  inline void clear_has_all_replicated_index();
  inline void set_has_safe_timestamp();
  inline void clear_has_safe_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  ::std::string* caller_uuid_;
  ::google::protobuf::int64 caller_term_;
  ::base::consensus::OpId* preceding_id_;
  ::google::protobuf::int64 committed_index_;
  ::base::consensus::OpId* deprecated_committed_index_;
  ::google::protobuf::RepeatedPtrField< ::base::consensus::ReplicateMsg > ops_;
  ::google::protobuf::int64 all_replicated_index_;
  ::google::protobuf::uint64 safe_timestamp_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ConsensusRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusResponsePB : public ::google::protobuf::Message {
 public:
  ConsensusResponsePB();
  virtual ~ConsensusResponsePB();

  ConsensusResponsePB(const ConsensusResponsePB& from);

  inline ConsensusResponsePB& operator=(const ConsensusResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusResponsePB& default_instance();

  void Swap(ConsensusResponsePB* other);

  // implements Message ----------------------------------------------

  ConsensusResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusResponsePB& from);
  void MergeFrom(const ConsensusResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes responder_uuid = 1;
  inline bool has_responder_uuid() const;
  inline void clear_responder_uuid();
  static const int kResponderUuidFieldNumber = 1;
  inline const ::std::string& responder_uuid() const;
  inline void set_responder_uuid(const ::std::string& value);
  inline void set_responder_uuid(const char* value);
  inline void set_responder_uuid(const void* value, size_t size);
  inline ::std::string* mutable_responder_uuid();
  inline ::std::string* release_responder_uuid();
  inline void set_allocated_responder_uuid(::std::string* responder_uuid);

  // optional int64 responder_term = 2;
  inline bool has_responder_term() const;
  inline void clear_responder_term();
  static const int kResponderTermFieldNumber = 2;
  inline ::google::protobuf::int64 responder_term() const;
  inline void set_responder_term(::google::protobuf::int64 value);

  // optional .base.consensus.ConsensusStatusPB status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::base::consensus::ConsensusStatusPB& status() const;
  inline ::base::consensus::ConsensusStatusPB* mutable_status();
  inline ::base::consensus::ConsensusStatusPB* release_status();
  inline void set_allocated_status(::base::consensus::ConsensusStatusPB* status);

  // @@protoc_insertion_point(class_scope:base.consensus.ConsensusResponsePB)
 private:
  inline void set_has_responder_uuid();
  inline void clear_has_responder_uuid();
  inline void set_has_responder_term();
  inline void clear_has_responder_term();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* responder_uuid_;
  ::google::protobuf::int64 responder_term_;
  ::base::consensus::ConsensusStatusPB* status_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static ConsensusResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class TransactionStatusPB : public ::google::protobuf::Message {
 public:
  TransactionStatusPB();
  virtual ~TransactionStatusPB();

  TransactionStatusPB(const TransactionStatusPB& from);

  inline TransactionStatusPB& operator=(const TransactionStatusPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionStatusPB& default_instance();

  void Swap(TransactionStatusPB* other);

  // implements Message ----------------------------------------------

  TransactionStatusPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionStatusPB& from);
  void MergeFrom(const TransactionStatusPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.consensus.OpId op_id = 1;
  inline bool has_op_id() const;
  inline void clear_op_id();
  static const int kOpIdFieldNumber = 1;
  inline const ::base::consensus::OpId& op_id() const;
  inline ::base::consensus::OpId* mutable_op_id();
  inline ::base::consensus::OpId* release_op_id();
  inline void set_allocated_op_id(::base::consensus::OpId* op_id);

  // required .base.consensus.OperationType tx_type = 2;
  inline bool has_tx_type() const;
  inline void clear_tx_type();
  static const int kTxTypeFieldNumber = 2;
  inline ::base::consensus::OperationType tx_type() const;
  inline void set_tx_type(::base::consensus::OperationType value);

  // required int64 running_for_micros = 3;
  inline bool has_running_for_micros() const;
  inline void clear_running_for_micros();
  static const int kRunningForMicrosFieldNumber = 3;
  inline ::google::protobuf::int64 running_for_micros() const;
  inline void set_running_for_micros(::google::protobuf::int64 value);

  // required string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string trace_buffer = 6;
  inline bool has_trace_buffer() const;
  inline void clear_trace_buffer();
  static const int kTraceBufferFieldNumber = 6;
  inline const ::std::string& trace_buffer() const;
  inline void set_trace_buffer(const ::std::string& value);
  inline void set_trace_buffer(const char* value);
  inline void set_trace_buffer(const char* value, size_t size);
  inline ::std::string* mutable_trace_buffer();
  inline ::std::string* release_trace_buffer();
  inline void set_allocated_trace_buffer(::std::string* trace_buffer);

  // @@protoc_insertion_point(class_scope:base.consensus.TransactionStatusPB)
 private:
  inline void set_has_op_id();
  inline void clear_has_op_id();
  inline void set_has_tx_type();
  inline void clear_has_tx_type();
  inline void set_has_running_for_micros();
  inline void clear_has_running_for_micros();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_trace_buffer();
  inline void clear_has_trace_buffer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::OpId* op_id_;
  ::google::protobuf::int64 running_for_micros_;
  ::std::string* description_;
  ::std::string* trace_buffer_;
  int tx_type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static TransactionStatusPB* default_instance_;
};
// -------------------------------------------------------------------

class GetNodeInstanceRequestPB : public ::google::protobuf::Message {
 public:
  GetNodeInstanceRequestPB();
  virtual ~GetNodeInstanceRequestPB();

  GetNodeInstanceRequestPB(const GetNodeInstanceRequestPB& from);

  inline GetNodeInstanceRequestPB& operator=(const GetNodeInstanceRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodeInstanceRequestPB& default_instance();

  void Swap(GetNodeInstanceRequestPB* other);

  // implements Message ----------------------------------------------

  GetNodeInstanceRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNodeInstanceRequestPB& from);
  void MergeFrom(const GetNodeInstanceRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.consensus.GetNodeInstanceRequestPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static GetNodeInstanceRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class GetNodeInstanceResponsePB : public ::google::protobuf::Message {
 public:
  GetNodeInstanceResponsePB();
  virtual ~GetNodeInstanceResponsePB();

  GetNodeInstanceResponsePB(const GetNodeInstanceResponsePB& from);

  inline GetNodeInstanceResponsePB& operator=(const GetNodeInstanceResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodeInstanceResponsePB& default_instance();

  void Swap(GetNodeInstanceResponsePB* other);

  // implements Message ----------------------------------------------

  GetNodeInstanceResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNodeInstanceResponsePB& from);
  void MergeFrom(const GetNodeInstanceResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.NodeInstancePB node_instance = 1;
  inline bool has_node_instance() const;
  inline void clear_node_instance();
  static const int kNodeInstanceFieldNumber = 1;
  inline const ::base::NodeInstancePB& node_instance() const;
  inline ::base::NodeInstancePB* mutable_node_instance();
  inline ::base::NodeInstancePB* release_node_instance();
  inline void set_allocated_node_instance(::base::NodeInstancePB* node_instance);

  // @@protoc_insertion_point(class_scope:base.consensus.GetNodeInstanceResponsePB)
 private:
  inline void set_has_node_instance();
  inline void clear_has_node_instance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::NodeInstancePB* node_instance_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static GetNodeInstanceResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class RunLeaderElectionRequestPB : public ::google::protobuf::Message {
 public:
  RunLeaderElectionRequestPB();
  virtual ~RunLeaderElectionRequestPB();

  RunLeaderElectionRequestPB(const RunLeaderElectionRequestPB& from);

  inline RunLeaderElectionRequestPB& operator=(const RunLeaderElectionRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunLeaderElectionRequestPB& default_instance();

  void Swap(RunLeaderElectionRequestPB* other);

  // implements Message ----------------------------------------------

  RunLeaderElectionRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunLeaderElectionRequestPB& from);
  void MergeFrom(const RunLeaderElectionRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // @@protoc_insertion_point(class_scope:base.consensus.RunLeaderElectionRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static RunLeaderElectionRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class RunLeaderElectionResponsePB : public ::google::protobuf::Message {
 public:
  RunLeaderElectionResponsePB();
  virtual ~RunLeaderElectionResponsePB();

  RunLeaderElectionResponsePB(const RunLeaderElectionResponsePB& from);

  inline RunLeaderElectionResponsePB& operator=(const RunLeaderElectionResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunLeaderElectionResponsePB& default_instance();

  void Swap(RunLeaderElectionResponsePB* other);

  // implements Message ----------------------------------------------

  RunLeaderElectionResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunLeaderElectionResponsePB& from);
  void MergeFrom(const RunLeaderElectionResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.consensus.RunLeaderElectionResponsePB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static RunLeaderElectionResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class LeaderStepDownRequestPB : public ::google::protobuf::Message {
 public:
  LeaderStepDownRequestPB();
  virtual ~LeaderStepDownRequestPB();

  LeaderStepDownRequestPB(const LeaderStepDownRequestPB& from);

  inline LeaderStepDownRequestPB& operator=(const LeaderStepDownRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderStepDownRequestPB& default_instance();

  void Swap(LeaderStepDownRequestPB* other);

  // implements Message ----------------------------------------------

  LeaderStepDownRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaderStepDownRequestPB& from);
  void MergeFrom(const LeaderStepDownRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // @@protoc_insertion_point(class_scope:base.consensus.LeaderStepDownRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static LeaderStepDownRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class LeaderStepDownResponsePB : public ::google::protobuf::Message {
 public:
  LeaderStepDownResponsePB();
  virtual ~LeaderStepDownResponsePB();

  LeaderStepDownResponsePB(const LeaderStepDownResponsePB& from);

  inline LeaderStepDownResponsePB& operator=(const LeaderStepDownResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderStepDownResponsePB& default_instance();

  void Swap(LeaderStepDownResponsePB* other);

  // implements Message ----------------------------------------------

  LeaderStepDownResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaderStepDownResponsePB& from);
  void MergeFrom(const LeaderStepDownResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.consensus.LeaderStepDownResponsePB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static LeaderStepDownResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class GetLastOpIdRequestPB : public ::google::protobuf::Message {
 public:
  GetLastOpIdRequestPB();
  virtual ~GetLastOpIdRequestPB();

  GetLastOpIdRequestPB(const GetLastOpIdRequestPB& from);

  inline GetLastOpIdRequestPB& operator=(const GetLastOpIdRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastOpIdRequestPB& default_instance();

  void Swap(GetLastOpIdRequestPB* other);

  // implements Message ----------------------------------------------

  GetLastOpIdRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLastOpIdRequestPB& from);
  void MergeFrom(const GetLastOpIdRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // optional .base.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
  inline bool has_opid_type() const;
  inline void clear_opid_type();
  static const int kOpidTypeFieldNumber = 3;
  inline ::base::consensus::OpIdType opid_type() const;
  inline void set_opid_type(::base::consensus::OpIdType value);

  // @@protoc_insertion_point(class_scope:base.consensus.GetLastOpIdRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_opid_type();
  inline void clear_has_opid_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  int opid_type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static GetLastOpIdRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class GetLastOpIdResponsePB : public ::google::protobuf::Message {
 public:
  GetLastOpIdResponsePB();
  virtual ~GetLastOpIdResponsePB();

  GetLastOpIdResponsePB(const GetLastOpIdResponsePB& from);

  inline GetLastOpIdResponsePB& operator=(const GetLastOpIdResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastOpIdResponsePB& default_instance();

  void Swap(GetLastOpIdResponsePB* other);

  // implements Message ----------------------------------------------

  GetLastOpIdResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLastOpIdResponsePB& from);
  void MergeFrom(const GetLastOpIdResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .base.consensus.OpId opid = 1;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpidFieldNumber = 1;
  inline const ::base::consensus::OpId& opid() const;
  inline ::base::consensus::OpId* mutable_opid();
  inline ::base::consensus::OpId* release_opid();
  inline void set_allocated_opid(::base::consensus::OpId* opid);

  // @@protoc_insertion_point(class_scope:base.consensus.GetLastOpIdResponsePB)
 private:
  inline void set_has_opid();
  inline void clear_has_opid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::OpId* opid_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static GetLastOpIdResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class GetConsensusStateRequestPB : public ::google::protobuf::Message {
 public:
  GetConsensusStateRequestPB();
  virtual ~GetConsensusStateRequestPB();

  GetConsensusStateRequestPB(const GetConsensusStateRequestPB& from);

  inline GetConsensusStateRequestPB& operator=(const GetConsensusStateRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConsensusStateRequestPB& default_instance();

  void Swap(GetConsensusStateRequestPB* other);

  // implements Message ----------------------------------------------

  GetConsensusStateRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetConsensusStateRequestPB& from);
  void MergeFrom(const GetConsensusStateRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 2;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 2;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // optional .base.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::base::consensus::ConsensusConfigType type() const;
  inline void set_type(::base::consensus::ConsensusConfigType value);

  // @@protoc_insertion_point(class_scope:base.consensus.GetConsensusStateRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  int type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static GetConsensusStateRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class GetConsensusStateResponsePB : public ::google::protobuf::Message {
 public:
  GetConsensusStateResponsePB();
  virtual ~GetConsensusStateResponsePB();

  GetConsensusStateResponsePB(const GetConsensusStateResponsePB& from);

  inline GetConsensusStateResponsePB& operator=(const GetConsensusStateResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConsensusStateResponsePB& default_instance();

  void Swap(GetConsensusStateResponsePB* other);

  // implements Message ----------------------------------------------

  GetConsensusStateResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetConsensusStateResponsePB& from);
  void MergeFrom(const GetConsensusStateResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .base.consensus.ConsensusStatePB cstate = 1;
  inline bool has_cstate() const;
  inline void clear_cstate();
  static const int kCstateFieldNumber = 1;
  inline const ::base::consensus::ConsensusStatePB& cstate() const;
  inline ::base::consensus::ConsensusStatePB* mutable_cstate();
  inline ::base::consensus::ConsensusStatePB* release_cstate();
  inline void set_allocated_cstate(::base::consensus::ConsensusStatePB* cstate);

  // @@protoc_insertion_point(class_scope:base.consensus.GetConsensusStateResponsePB)
 private:
  inline void set_has_cstate();
  inline void clear_has_cstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::ConsensusStatePB* cstate_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static GetConsensusStateResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class StartTabletCopyRequestPB : public ::google::protobuf::Message {
 public:
  StartTabletCopyRequestPB();
  virtual ~StartTabletCopyRequestPB();

  StartTabletCopyRequestPB(const StartTabletCopyRequestPB& from);

  inline StartTabletCopyRequestPB& operator=(const StartTabletCopyRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTabletCopyRequestPB& default_instance();

  void Swap(StartTabletCopyRequestPB* other);

  // implements Message ----------------------------------------------

  StartTabletCopyRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartTabletCopyRequestPB& from);
  void MergeFrom(const StartTabletCopyRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dest_uuid = 5;
  inline bool has_dest_uuid() const;
  inline void clear_dest_uuid();
  static const int kDestUuidFieldNumber = 5;
  inline const ::std::string& dest_uuid() const;
  inline void set_dest_uuid(const ::std::string& value);
  inline void set_dest_uuid(const char* value);
  inline void set_dest_uuid(const void* value, size_t size);
  inline ::std::string* mutable_dest_uuid();
  inline ::std::string* release_dest_uuid();
  inline void set_allocated_dest_uuid(::std::string* dest_uuid);

  // required bytes tablet_id = 1;
  inline bool has_tablet_id() const;
  inline void clear_tablet_id();
  static const int kTabletIdFieldNumber = 1;
  inline const ::std::string& tablet_id() const;
  inline void set_tablet_id(const ::std::string& value);
  inline void set_tablet_id(const char* value);
  inline void set_tablet_id(const void* value, size_t size);
  inline ::std::string* mutable_tablet_id();
  inline ::std::string* release_tablet_id();
  inline void set_allocated_tablet_id(::std::string* tablet_id);

  // required bytes copy_peer_uuid = 2;
  inline bool has_copy_peer_uuid() const;
  inline void clear_copy_peer_uuid();
  static const int kCopyPeerUuidFieldNumber = 2;
  inline const ::std::string& copy_peer_uuid() const;
  inline void set_copy_peer_uuid(const ::std::string& value);
  inline void set_copy_peer_uuid(const char* value);
  inline void set_copy_peer_uuid(const void* value, size_t size);
  inline ::std::string* mutable_copy_peer_uuid();
  inline ::std::string* release_copy_peer_uuid();
  inline void set_allocated_copy_peer_uuid(::std::string* copy_peer_uuid);

  // required .base.HostPortPB copy_peer_addr = 3;
  inline bool has_copy_peer_addr() const;
  inline void clear_copy_peer_addr();
  static const int kCopyPeerAddrFieldNumber = 3;
  inline const ::base::HostPortPB& copy_peer_addr() const;
  inline ::base::HostPortPB* mutable_copy_peer_addr();
  inline ::base::HostPortPB* release_copy_peer_addr();
  inline void set_allocated_copy_peer_addr(::base::HostPortPB* copy_peer_addr);

  // optional int64 caller_term = 4 [default = -1];
  inline bool has_caller_term() const;
  inline void clear_caller_term();
  static const int kCallerTermFieldNumber = 4;
  inline ::google::protobuf::int64 caller_term() const;
  inline void set_caller_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:base.consensus.StartTabletCopyRequestPB)
 private:
  inline void set_has_dest_uuid();
  inline void clear_has_dest_uuid();
  inline void set_has_tablet_id();
  inline void clear_has_tablet_id();
  inline void set_has_copy_peer_uuid();
  inline void clear_has_copy_peer_uuid();
  inline void set_has_copy_peer_addr();
  inline void clear_has_copy_peer_addr();
  inline void set_has_caller_term();
  inline void clear_has_caller_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dest_uuid_;
  ::std::string* tablet_id_;
  ::std::string* copy_peer_uuid_;
  ::base::HostPortPB* copy_peer_addr_;
  ::google::protobuf::int64 caller_term_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static StartTabletCopyRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class StartTabletCopyResponsePB : public ::google::protobuf::Message {
 public:
  StartTabletCopyResponsePB();
  virtual ~StartTabletCopyResponsePB();

  StartTabletCopyResponsePB(const StartTabletCopyResponsePB& from);

  inline StartTabletCopyResponsePB& operator=(const StartTabletCopyResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartTabletCopyResponsePB& default_instance();

  void Swap(StartTabletCopyResponsePB* other);

  // implements Message ----------------------------------------------

  StartTabletCopyResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartTabletCopyResponsePB& from);
  void MergeFrom(const StartTabletCopyResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.consensus.StartTabletCopyResponsePB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fconsensus_2eproto();

  void InitAsDefaultInstance();
  static StartTabletCopyResponsePB* default_instance_;
};
// ===================================================================


// ===================================================================

// ConsensusErrorPB

// required .base.consensus.ConsensusErrorPB.Code code = 1;
inline bool ConsensusErrorPB::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusErrorPB::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusErrorPB::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusErrorPB::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::base::consensus::ConsensusErrorPB_Code ConsensusErrorPB::code() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusErrorPB.code)
  return static_cast< ::base::consensus::ConsensusErrorPB_Code >(code_);
}
inline void ConsensusErrorPB::set_code(::base::consensus::ConsensusErrorPB_Code value) {
  assert(::base::consensus::ConsensusErrorPB_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusErrorPB.code)
}

// required .base.AppStatusPB status = 2;
inline bool ConsensusErrorPB::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusErrorPB::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusErrorPB::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusErrorPB::clear_status() {
  if (status_ != NULL) status_->::base::AppStatusPB::Clear();
  clear_has_status();
}
inline const ::base::AppStatusPB& ConsensusErrorPB::status() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusErrorPB.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::base::AppStatusPB* ConsensusErrorPB::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::base::AppStatusPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusErrorPB.status)
  return status_;
}
inline ::base::AppStatusPB* ConsensusErrorPB::release_status() {
  clear_has_status();
  ::base::AppStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ConsensusErrorPB::set_allocated_status(::base::AppStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusErrorPB.status)
}

// -------------------------------------------------------------------

// ChangeConfigRecordPB

// required bytes tablet_id = 1;
inline bool ChangeConfigRecordPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeConfigRecordPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeConfigRecordPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeConfigRecordPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& ChangeConfigRecordPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRecordPB.tablet_id)
  return *tablet_id_;
}
inline void ChangeConfigRecordPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ChangeConfigRecordPB.tablet_id)
}
inline void ChangeConfigRecordPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ChangeConfigRecordPB.tablet_id)
}
inline void ChangeConfigRecordPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ChangeConfigRecordPB.tablet_id)
}
inline ::std::string* ChangeConfigRecordPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigRecordPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* ChangeConfigRecordPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeConfigRecordPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigRecordPB.tablet_id)
}

// required .base.consensus.RaftConfigPB old_config = 2;
inline bool ChangeConfigRecordPB::has_old_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeConfigRecordPB::set_has_old_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeConfigRecordPB::clear_has_old_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeConfigRecordPB::clear_old_config() {
  if (old_config_ != NULL) old_config_->::base::consensus::RaftConfigPB::Clear();
  clear_has_old_config();
}
inline const ::base::consensus::RaftConfigPB& ChangeConfigRecordPB::old_config() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRecordPB.old_config)
  return old_config_ != NULL ? *old_config_ : *default_instance_->old_config_;
}
inline ::base::consensus::RaftConfigPB* ChangeConfigRecordPB::mutable_old_config() {
  set_has_old_config();
  if (old_config_ == NULL) old_config_ = new ::base::consensus::RaftConfigPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigRecordPB.old_config)
  return old_config_;
}
inline ::base::consensus::RaftConfigPB* ChangeConfigRecordPB::release_old_config() {
  clear_has_old_config();
  ::base::consensus::RaftConfigPB* temp = old_config_;
  old_config_ = NULL;
  return temp;
}
inline void ChangeConfigRecordPB::set_allocated_old_config(::base::consensus::RaftConfigPB* old_config) {
  delete old_config_;
  old_config_ = old_config;
  if (old_config) {
    set_has_old_config();
  } else {
    clear_has_old_config();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigRecordPB.old_config)
}

// required .base.consensus.RaftConfigPB new_config = 3;
inline bool ChangeConfigRecordPB::has_new_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeConfigRecordPB::set_has_new_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeConfigRecordPB::clear_has_new_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeConfigRecordPB::clear_new_config() {
  if (new_config_ != NULL) new_config_->::base::consensus::RaftConfigPB::Clear();
  clear_has_new_config();
}
inline const ::base::consensus::RaftConfigPB& ChangeConfigRecordPB::new_config() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRecordPB.new_config)
  return new_config_ != NULL ? *new_config_ : *default_instance_->new_config_;
}
inline ::base::consensus::RaftConfigPB* ChangeConfigRecordPB::mutable_new_config() {
  set_has_new_config();
  if (new_config_ == NULL) new_config_ = new ::base::consensus::RaftConfigPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigRecordPB.new_config)
  return new_config_;
}
inline ::base::consensus::RaftConfigPB* ChangeConfigRecordPB::release_new_config() {
  clear_has_new_config();
  ::base::consensus::RaftConfigPB* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
inline void ChangeConfigRecordPB::set_allocated_new_config(::base::consensus::RaftConfigPB* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    set_has_new_config();
  } else {
    clear_has_new_config();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigRecordPB.new_config)
}

// -------------------------------------------------------------------

// ChangeConfigRequestPB

// optional bytes dest_uuid = 4;
inline bool ChangeConfigRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeConfigRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeConfigRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeConfigRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& ChangeConfigRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void ChangeConfigRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ChangeConfigRequestPB.dest_uuid)
}
inline void ChangeConfigRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ChangeConfigRequestPB.dest_uuid)
}
inline void ChangeConfigRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ChangeConfigRequestPB.dest_uuid)
}
inline ::std::string* ChangeConfigRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* ChangeConfigRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeConfigRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool ChangeConfigRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeConfigRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeConfigRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeConfigRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& ChangeConfigRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRequestPB.tablet_id)
  return *tablet_id_;
}
inline void ChangeConfigRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ChangeConfigRequestPB.tablet_id)
}
inline void ChangeConfigRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ChangeConfigRequestPB.tablet_id)
}
inline void ChangeConfigRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ChangeConfigRequestPB.tablet_id)
}
inline ::std::string* ChangeConfigRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* ChangeConfigRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeConfigRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigRequestPB.tablet_id)
}

// optional .base.consensus.ChangeConfigType type = 2;
inline bool ChangeConfigRequestPB::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeConfigRequestPB::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeConfigRequestPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeConfigRequestPB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::base::consensus::ChangeConfigType ChangeConfigRequestPB::type() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRequestPB.type)
  return static_cast< ::base::consensus::ChangeConfigType >(type_);
}
inline void ChangeConfigRequestPB::set_type(::base::consensus::ChangeConfigType value) {
  assert(::base::consensus::ChangeConfigType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ChangeConfigRequestPB.type)
}

// optional .base.consensus.RaftPeerPB server = 3;
inline bool ChangeConfigRequestPB::has_server() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeConfigRequestPB::set_has_server() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeConfigRequestPB::clear_has_server() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeConfigRequestPB::clear_server() {
  if (server_ != NULL) server_->::base::consensus::RaftPeerPB::Clear();
  clear_has_server();
}
inline const ::base::consensus::RaftPeerPB& ChangeConfigRequestPB::server() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRequestPB.server)
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::base::consensus::RaftPeerPB* ChangeConfigRequestPB::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::base::consensus::RaftPeerPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigRequestPB.server)
  return server_;
}
inline ::base::consensus::RaftPeerPB* ChangeConfigRequestPB::release_server() {
  clear_has_server();
  ::base::consensus::RaftPeerPB* temp = server_;
  server_ = NULL;
  return temp;
}
inline void ChangeConfigRequestPB::set_allocated_server(::base::consensus::RaftPeerPB* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigRequestPB.server)
}

// optional int64 cas_config_opid_index = 5;
inline bool ChangeConfigRequestPB::has_cas_config_opid_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeConfigRequestPB::set_has_cas_config_opid_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeConfigRequestPB::clear_has_cas_config_opid_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeConfigRequestPB::clear_cas_config_opid_index() {
  cas_config_opid_index_ = GOOGLE_LONGLONG(0);
  clear_has_cas_config_opid_index();
}
inline ::google::protobuf::int64 ChangeConfigRequestPB::cas_config_opid_index() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigRequestPB.cas_config_opid_index)
  return cas_config_opid_index_;
}
inline void ChangeConfigRequestPB::set_cas_config_opid_index(::google::protobuf::int64 value) {
  set_has_cas_config_opid_index();
  cas_config_opid_index_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ChangeConfigRequestPB.cas_config_opid_index)
}

// -------------------------------------------------------------------

// ChangeConfigResponsePB

// optional .base.consensus.RaftPeerPB new_config = 2;
inline bool ChangeConfigResponsePB::has_new_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeConfigResponsePB::set_has_new_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeConfigResponsePB::clear_has_new_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeConfigResponsePB::clear_new_config() {
  if (new_config_ != NULL) new_config_->::base::consensus::RaftPeerPB::Clear();
  clear_has_new_config();
}
inline const ::base::consensus::RaftPeerPB& ChangeConfigResponsePB::new_config() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigResponsePB.new_config)
  return new_config_ != NULL ? *new_config_ : *default_instance_->new_config_;
}
inline ::base::consensus::RaftPeerPB* ChangeConfigResponsePB::mutable_new_config() {
  set_has_new_config();
  if (new_config_ == NULL) new_config_ = new ::base::consensus::RaftPeerPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ChangeConfigResponsePB.new_config)
  return new_config_;
}
inline ::base::consensus::RaftPeerPB* ChangeConfigResponsePB::release_new_config() {
  clear_has_new_config();
  ::base::consensus::RaftPeerPB* temp = new_config_;
  new_config_ = NULL;
  return temp;
}
inline void ChangeConfigResponsePB::set_allocated_new_config(::base::consensus::RaftPeerPB* new_config) {
  delete new_config_;
  new_config_ = new_config;
  if (new_config) {
    set_has_new_config();
  } else {
    clear_has_new_config();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ChangeConfigResponsePB.new_config)
}

// optional fixed64 timestamp = 3;
inline bool ChangeConfigResponsePB::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeConfigResponsePB::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeConfigResponsePB::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeConfigResponsePB::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ChangeConfigResponsePB::timestamp() const {
  // @@protoc_insertion_point(field_get:base.consensus.ChangeConfigResponsePB.timestamp)
  return timestamp_;
}
inline void ChangeConfigResponsePB::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ChangeConfigResponsePB.timestamp)
}

// -------------------------------------------------------------------

// ReplicateMsg

// required .base.consensus.OpId id = 1;
inline bool ReplicateMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicateMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicateMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicateMsg::clear_id() {
  if (id_ != NULL) id_->::base::consensus::OpId::Clear();
  clear_has_id();
}
inline const ::base::consensus::OpId& ReplicateMsg::id() const {
  // @@protoc_insertion_point(field_get:base.consensus.ReplicateMsg.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::base::consensus::OpId* ReplicateMsg::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.ReplicateMsg.id)
  return id_;
}
inline ::base::consensus::OpId* ReplicateMsg::release_id() {
  clear_has_id();
  ::base::consensus::OpId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_id(::base::consensus::OpId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ReplicateMsg.id)
}

// required fixed64 timestamp = 2;
inline bool ReplicateMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicateMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicateMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicateMsg::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ReplicateMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:base.consensus.ReplicateMsg.timestamp)
  return timestamp_;
}
inline void ReplicateMsg::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ReplicateMsg.timestamp)
}

// required .base.consensus.OperationType op_type = 4;
inline bool ReplicateMsg::has_op_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplicateMsg::set_has_op_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplicateMsg::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplicateMsg::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::base::consensus::OperationType ReplicateMsg::op_type() const {
  // @@protoc_insertion_point(field_get:base.consensus.ReplicateMsg.op_type)
  return static_cast< ::base::consensus::OperationType >(op_type_);
}
inline void ReplicateMsg::set_op_type(::base::consensus::OperationType value) {
  assert(::base::consensus::OperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ReplicateMsg.op_type)
}

// optional .base.consensus.ChangeConfigRecordPB change_config_record = 7;
inline bool ReplicateMsg::has_change_config_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplicateMsg::set_has_change_config_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplicateMsg::clear_has_change_config_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplicateMsg::clear_change_config_record() {
  if (change_config_record_ != NULL) change_config_record_->::base::consensus::ChangeConfigRecordPB::Clear();
  clear_has_change_config_record();
}
inline const ::base::consensus::ChangeConfigRecordPB& ReplicateMsg::change_config_record() const {
  // @@protoc_insertion_point(field_get:base.consensus.ReplicateMsg.change_config_record)
  return change_config_record_ != NULL ? *change_config_record_ : *default_instance_->change_config_record_;
}
inline ::base::consensus::ChangeConfigRecordPB* ReplicateMsg::mutable_change_config_record() {
  set_has_change_config_record();
  if (change_config_record_ == NULL) change_config_record_ = new ::base::consensus::ChangeConfigRecordPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ReplicateMsg.change_config_record)
  return change_config_record_;
}
inline ::base::consensus::ChangeConfigRecordPB* ReplicateMsg::release_change_config_record() {
  clear_has_change_config_record();
  ::base::consensus::ChangeConfigRecordPB* temp = change_config_record_;
  change_config_record_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_change_config_record(::base::consensus::ChangeConfigRecordPB* change_config_record) {
  delete change_config_record_;
  change_config_record_ = change_config_record;
  if (change_config_record) {
    set_has_change_config_record();
  } else {
    clear_has_change_config_record();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ReplicateMsg.change_config_record)
}

// optional .base.rpc.RequestIdPB request_id = 8;
inline bool ReplicateMsg::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplicateMsg::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplicateMsg::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplicateMsg::clear_request_id() {
  if (request_id_ != NULL) request_id_->::base::rpc::RequestIdPB::Clear();
  clear_has_request_id();
}
inline const ::base::rpc::RequestIdPB& ReplicateMsg::request_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.ReplicateMsg.request_id)
  return request_id_ != NULL ? *request_id_ : *default_instance_->request_id_;
}
inline ::base::rpc::RequestIdPB* ReplicateMsg::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == NULL) request_id_ = new ::base::rpc::RequestIdPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ReplicateMsg.request_id)
  return request_id_;
}
inline ::base::rpc::RequestIdPB* ReplicateMsg::release_request_id() {
  clear_has_request_id();
  ::base::rpc::RequestIdPB* temp = request_id_;
  request_id_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_request_id(::base::rpc::RequestIdPB* request_id) {
  delete request_id_;
  request_id_ = request_id;
  if (request_id) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ReplicateMsg.request_id)
}

// optional .base.consensus.NoOpRequestPB noop_request = 999;
inline bool ReplicateMsg::has_noop_request() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplicateMsg::set_has_noop_request() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplicateMsg::clear_has_noop_request() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplicateMsg::clear_noop_request() {
  if (noop_request_ != NULL) noop_request_->::base::consensus::NoOpRequestPB::Clear();
  clear_has_noop_request();
}
inline const ::base::consensus::NoOpRequestPB& ReplicateMsg::noop_request() const {
  // @@protoc_insertion_point(field_get:base.consensus.ReplicateMsg.noop_request)
  return noop_request_ != NULL ? *noop_request_ : *default_instance_->noop_request_;
}
inline ::base::consensus::NoOpRequestPB* ReplicateMsg::mutable_noop_request() {
  set_has_noop_request();
  if (noop_request_ == NULL) noop_request_ = new ::base::consensus::NoOpRequestPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ReplicateMsg.noop_request)
  return noop_request_;
}
inline ::base::consensus::NoOpRequestPB* ReplicateMsg::release_noop_request() {
  clear_has_noop_request();
  ::base::consensus::NoOpRequestPB* temp = noop_request_;
  noop_request_ = NULL;
  return temp;
}
inline void ReplicateMsg::set_allocated_noop_request(::base::consensus::NoOpRequestPB* noop_request) {
  delete noop_request_;
  noop_request_ = noop_request;
  if (noop_request) {
    set_has_noop_request();
  } else {
    clear_has_noop_request();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ReplicateMsg.noop_request)
}

// -------------------------------------------------------------------

// CommitMsg

// required .base.consensus.OperationType op_type = 1;
inline bool CommitMsg::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitMsg::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitMsg::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitMsg::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::base::consensus::OperationType CommitMsg::op_type() const {
  // @@protoc_insertion_point(field_get:base.consensus.CommitMsg.op_type)
  return static_cast< ::base::consensus::OperationType >(op_type_);
}
inline void CommitMsg::set_op_type(::base::consensus::OperationType value) {
  assert(::base::consensus::OperationType_IsValid(value));
  set_has_op_type();
  op_type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.CommitMsg.op_type)
}

// optional .base.consensus.OpId commited_op_id = 2;
inline bool CommitMsg::has_commited_op_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitMsg::set_has_commited_op_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommitMsg::clear_has_commited_op_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommitMsg::clear_commited_op_id() {
  if (commited_op_id_ != NULL) commited_op_id_->::base::consensus::OpId::Clear();
  clear_has_commited_op_id();
}
inline const ::base::consensus::OpId& CommitMsg::commited_op_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.CommitMsg.commited_op_id)
  return commited_op_id_ != NULL ? *commited_op_id_ : *default_instance_->commited_op_id_;
}
inline ::base::consensus::OpId* CommitMsg::mutable_commited_op_id() {
  set_has_commited_op_id();
  if (commited_op_id_ == NULL) commited_op_id_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.CommitMsg.commited_op_id)
  return commited_op_id_;
}
inline ::base::consensus::OpId* CommitMsg::release_commited_op_id() {
  clear_has_commited_op_id();
  ::base::consensus::OpId* temp = commited_op_id_;
  commited_op_id_ = NULL;
  return temp;
}
inline void CommitMsg::set_allocated_commited_op_id(::base::consensus::OpId* commited_op_id) {
  delete commited_op_id_;
  commited_op_id_ = commited_op_id;
  if (commited_op_id) {
    set_has_commited_op_id();
  } else {
    clear_has_commited_op_id();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.CommitMsg.commited_op_id)
}

// -------------------------------------------------------------------

// NoOpRequestPB

// optional bytes payload_for_tests = 1;
inline bool NoOpRequestPB::has_payload_for_tests() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoOpRequestPB::set_has_payload_for_tests() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoOpRequestPB::clear_has_payload_for_tests() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoOpRequestPB::clear_payload_for_tests() {
  if (payload_for_tests_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_for_tests_->clear();
  }
  clear_has_payload_for_tests();
}
inline const ::std::string& NoOpRequestPB::payload_for_tests() const {
  // @@protoc_insertion_point(field_get:base.consensus.NoOpRequestPB.payload_for_tests)
  return *payload_for_tests_;
}
inline void NoOpRequestPB::set_payload_for_tests(const ::std::string& value) {
  set_has_payload_for_tests();
  if (payload_for_tests_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_for_tests_ = new ::std::string;
  }
  payload_for_tests_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.NoOpRequestPB.payload_for_tests)
}
inline void NoOpRequestPB::set_payload_for_tests(const char* value) {
  set_has_payload_for_tests();
  if (payload_for_tests_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_for_tests_ = new ::std::string;
  }
  payload_for_tests_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.NoOpRequestPB.payload_for_tests)
}
inline void NoOpRequestPB::set_payload_for_tests(const void* value, size_t size) {
  set_has_payload_for_tests();
  if (payload_for_tests_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_for_tests_ = new ::std::string;
  }
  payload_for_tests_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.NoOpRequestPB.payload_for_tests)
}
inline ::std::string* NoOpRequestPB::mutable_payload_for_tests() {
  set_has_payload_for_tests();
  if (payload_for_tests_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_for_tests_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.NoOpRequestPB.payload_for_tests)
  return payload_for_tests_;
}
inline ::std::string* NoOpRequestPB::release_payload_for_tests() {
  clear_has_payload_for_tests();
  if (payload_for_tests_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_for_tests_;
    payload_for_tests_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NoOpRequestPB::set_allocated_payload_for_tests(::std::string* payload_for_tests) {
  if (payload_for_tests_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_for_tests_;
  }
  if (payload_for_tests) {
    set_has_payload_for_tests();
    payload_for_tests_ = payload_for_tests;
  } else {
    clear_has_payload_for_tests();
    payload_for_tests_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.NoOpRequestPB.payload_for_tests)
}

// -------------------------------------------------------------------

// ConsensusStatusPB

// required .base.consensus.OpId last_received = 1;
inline bool ConsensusStatusPB::has_last_received() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusStatusPB::set_has_last_received() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusStatusPB::clear_has_last_received() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusStatusPB::clear_last_received() {
  if (last_received_ != NULL) last_received_->::base::consensus::OpId::Clear();
  clear_has_last_received();
}
inline const ::base::consensus::OpId& ConsensusStatusPB::last_received() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatusPB.last_received)
  return last_received_ != NULL ? *last_received_ : *default_instance_->last_received_;
}
inline ::base::consensus::OpId* ConsensusStatusPB::mutable_last_received() {
  set_has_last_received();
  if (last_received_ == NULL) last_received_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusStatusPB.last_received)
  return last_received_;
}
inline ::base::consensus::OpId* ConsensusStatusPB::release_last_received() {
  clear_has_last_received();
  ::base::consensus::OpId* temp = last_received_;
  last_received_ = NULL;
  return temp;
}
inline void ConsensusStatusPB::set_allocated_last_received(::base::consensus::OpId* last_received) {
  delete last_received_;
  last_received_ = last_received;
  if (last_received) {
    set_has_last_received();
  } else {
    clear_has_last_received();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusStatusPB.last_received)
}

// optional .base.consensus.OpId last_received_current_leader = 4;
inline bool ConsensusStatusPB::has_last_received_current_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusStatusPB::set_has_last_received_current_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusStatusPB::clear_has_last_received_current_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusStatusPB::clear_last_received_current_leader() {
  if (last_received_current_leader_ != NULL) last_received_current_leader_->::base::consensus::OpId::Clear();
  clear_has_last_received_current_leader();
}
inline const ::base::consensus::OpId& ConsensusStatusPB::last_received_current_leader() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatusPB.last_received_current_leader)
  return last_received_current_leader_ != NULL ? *last_received_current_leader_ : *default_instance_->last_received_current_leader_;
}
inline ::base::consensus::OpId* ConsensusStatusPB::mutable_last_received_current_leader() {
  set_has_last_received_current_leader();
  if (last_received_current_leader_ == NULL) last_received_current_leader_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusStatusPB.last_received_current_leader)
  return last_received_current_leader_;
}
inline ::base::consensus::OpId* ConsensusStatusPB::release_last_received_current_leader() {
  clear_has_last_received_current_leader();
  ::base::consensus::OpId* temp = last_received_current_leader_;
  last_received_current_leader_ = NULL;
  return temp;
}
inline void ConsensusStatusPB::set_allocated_last_received_current_leader(::base::consensus::OpId* last_received_current_leader) {
  delete last_received_current_leader_;
  last_received_current_leader_ = last_received_current_leader;
  if (last_received_current_leader) {
    set_has_last_received_current_leader();
  } else {
    clear_has_last_received_current_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusStatusPB.last_received_current_leader)
}

// optional int64 last_committed_idx = 2;
inline bool ConsensusStatusPB::has_last_committed_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusStatusPB::set_has_last_committed_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusStatusPB::clear_has_last_committed_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusStatusPB::clear_last_committed_idx() {
  last_committed_idx_ = GOOGLE_LONGLONG(0);
  clear_has_last_committed_idx();
}
inline ::google::protobuf::int64 ConsensusStatusPB::last_committed_idx() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatusPB.last_committed_idx)
  return last_committed_idx_;
}
inline void ConsensusStatusPB::set_last_committed_idx(::google::protobuf::int64 value) {
  set_has_last_committed_idx();
  last_committed_idx_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusStatusPB.last_committed_idx)
}

// optional .base.consensus.ConsensusErrorPB error = 3;
inline bool ConsensusStatusPB::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConsensusStatusPB::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConsensusStatusPB::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConsensusStatusPB::clear_error() {
  if (error_ != NULL) error_->::base::consensus::ConsensusErrorPB::Clear();
  clear_has_error();
}
inline const ::base::consensus::ConsensusErrorPB& ConsensusStatusPB::error() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatusPB.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::base::consensus::ConsensusErrorPB* ConsensusStatusPB::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::base::consensus::ConsensusErrorPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusStatusPB.error)
  return error_;
}
inline ::base::consensus::ConsensusErrorPB* ConsensusStatusPB::release_error() {
  clear_has_error();
  ::base::consensus::ConsensusErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ConsensusStatusPB::set_allocated_error(::base::consensus::ConsensusErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusStatusPB.error)
}

// -------------------------------------------------------------------

// VoteRequestPB

// optional bytes dest_uuid = 6;
inline bool VoteRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& VoteRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void VoteRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.VoteRequestPB.dest_uuid)
}
inline void VoteRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.VoteRequestPB.dest_uuid)
}
inline void VoteRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.VoteRequestPB.dest_uuid)
}
inline ::std::string* VoteRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.VoteRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* VoteRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VoteRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.VoteRequestPB.dest_uuid)
}

// required string tablet_id = 1;
inline bool VoteRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& VoteRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.tablet_id)
  return *tablet_id_;
}
inline void VoteRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.VoteRequestPB.tablet_id)
}
inline void VoteRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.VoteRequestPB.tablet_id)
}
inline void VoteRequestPB::set_tablet_id(const char* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.VoteRequestPB.tablet_id)
}
inline ::std::string* VoteRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.VoteRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* VoteRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VoteRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.VoteRequestPB.tablet_id)
}

// required bytes candidate_uuid = 2;
inline bool VoteRequestPB::has_candidate_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteRequestPB::set_has_candidate_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteRequestPB::clear_has_candidate_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteRequestPB::clear_candidate_uuid() {
  if (candidate_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_uuid_->clear();
  }
  clear_has_candidate_uuid();
}
inline const ::std::string& VoteRequestPB::candidate_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.candidate_uuid)
  return *candidate_uuid_;
}
inline void VoteRequestPB::set_candidate_uuid(const ::std::string& value) {
  set_has_candidate_uuid();
  if (candidate_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_uuid_ = new ::std::string;
  }
  candidate_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.VoteRequestPB.candidate_uuid)
}
inline void VoteRequestPB::set_candidate_uuid(const char* value) {
  set_has_candidate_uuid();
  if (candidate_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_uuid_ = new ::std::string;
  }
  candidate_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.VoteRequestPB.candidate_uuid)
}
inline void VoteRequestPB::set_candidate_uuid(const void* value, size_t size) {
  set_has_candidate_uuid();
  if (candidate_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_uuid_ = new ::std::string;
  }
  candidate_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.VoteRequestPB.candidate_uuid)
}
inline ::std::string* VoteRequestPB::mutable_candidate_uuid() {
  set_has_candidate_uuid();
  if (candidate_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.VoteRequestPB.candidate_uuid)
  return candidate_uuid_;
}
inline ::std::string* VoteRequestPB::release_candidate_uuid() {
  clear_has_candidate_uuid();
  if (candidate_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = candidate_uuid_;
    candidate_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VoteRequestPB::set_allocated_candidate_uuid(::std::string* candidate_uuid) {
  if (candidate_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete candidate_uuid_;
  }
  if (candidate_uuid) {
    set_has_candidate_uuid();
    candidate_uuid_ = candidate_uuid;
  } else {
    clear_has_candidate_uuid();
    candidate_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.VoteRequestPB.candidate_uuid)
}

// required int64 candidate_term = 3;
inline bool VoteRequestPB::has_candidate_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteRequestPB::set_has_candidate_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteRequestPB::clear_has_candidate_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteRequestPB::clear_candidate_term() {
  candidate_term_ = GOOGLE_LONGLONG(0);
  clear_has_candidate_term();
}
inline ::google::protobuf::int64 VoteRequestPB::candidate_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.candidate_term)
  return candidate_term_;
}
inline void VoteRequestPB::set_candidate_term(::google::protobuf::int64 value) {
  set_has_candidate_term();
  candidate_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.VoteRequestPB.candidate_term)
}

// required .base.consensus.ConsensusStatusPB candidate_status = 4;
inline bool VoteRequestPB::has_candidate_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VoteRequestPB::set_has_candidate_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VoteRequestPB::clear_has_candidate_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VoteRequestPB::clear_candidate_status() {
  if (candidate_status_ != NULL) candidate_status_->::base::consensus::ConsensusStatusPB::Clear();
  clear_has_candidate_status();
}
inline const ::base::consensus::ConsensusStatusPB& VoteRequestPB::candidate_status() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.candidate_status)
  return candidate_status_ != NULL ? *candidate_status_ : *default_instance_->candidate_status_;
}
inline ::base::consensus::ConsensusStatusPB* VoteRequestPB::mutable_candidate_status() {
  set_has_candidate_status();
  if (candidate_status_ == NULL) candidate_status_ = new ::base::consensus::ConsensusStatusPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.VoteRequestPB.candidate_status)
  return candidate_status_;
}
inline ::base::consensus::ConsensusStatusPB* VoteRequestPB::release_candidate_status() {
  clear_has_candidate_status();
  ::base::consensus::ConsensusStatusPB* temp = candidate_status_;
  candidate_status_ = NULL;
  return temp;
}
inline void VoteRequestPB::set_allocated_candidate_status(::base::consensus::ConsensusStatusPB* candidate_status) {
  delete candidate_status_;
  candidate_status_ = candidate_status;
  if (candidate_status) {
    set_has_candidate_status();
  } else {
    clear_has_candidate_status();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.VoteRequestPB.candidate_status)
}

// optional bool ignore_live_leader = 5 [default = false];
inline bool VoteRequestPB::has_ignore_live_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VoteRequestPB::set_has_ignore_live_leader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VoteRequestPB::clear_has_ignore_live_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VoteRequestPB::clear_ignore_live_leader() {
  ignore_live_leader_ = false;
  clear_has_ignore_live_leader();
}
inline bool VoteRequestPB::ignore_live_leader() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.ignore_live_leader)
  return ignore_live_leader_;
}
inline void VoteRequestPB::set_ignore_live_leader(bool value) {
  set_has_ignore_live_leader();
  ignore_live_leader_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.VoteRequestPB.ignore_live_leader)
}

// optional bool is_pre_election = 7 [default = false];
inline bool VoteRequestPB::has_is_pre_election() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VoteRequestPB::set_has_is_pre_election() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VoteRequestPB::clear_has_is_pre_election() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VoteRequestPB::clear_is_pre_election() {
  is_pre_election_ = false;
  clear_has_is_pre_election();
}
inline bool VoteRequestPB::is_pre_election() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteRequestPB.is_pre_election)
  return is_pre_election_;
}
inline void VoteRequestPB::set_is_pre_election(bool value) {
  set_has_is_pre_election();
  is_pre_election_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.VoteRequestPB.is_pre_election)
}

// -------------------------------------------------------------------

// VoteResponsePB

// optional bytes responder_uuid = 1;
inline bool VoteResponsePB::has_responder_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteResponsePB::set_has_responder_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteResponsePB::clear_has_responder_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteResponsePB::clear_responder_uuid() {
  if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_->clear();
  }
  clear_has_responder_uuid();
}
inline const ::std::string& VoteResponsePB::responder_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteResponsePB.responder_uuid)
  return *responder_uuid_;
}
inline void VoteResponsePB::set_responder_uuid(const ::std::string& value) {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  responder_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.VoteResponsePB.responder_uuid)
}
inline void VoteResponsePB::set_responder_uuid(const char* value) {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  responder_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.VoteResponsePB.responder_uuid)
}
inline void VoteResponsePB::set_responder_uuid(const void* value, size_t size) {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  responder_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.VoteResponsePB.responder_uuid)
}
inline ::std::string* VoteResponsePB::mutable_responder_uuid() {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.VoteResponsePB.responder_uuid)
  return responder_uuid_;
}
inline ::std::string* VoteResponsePB::release_responder_uuid() {
  clear_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = responder_uuid_;
    responder_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VoteResponsePB::set_allocated_responder_uuid(::std::string* responder_uuid) {
  if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responder_uuid_;
  }
  if (responder_uuid) {
    set_has_responder_uuid();
    responder_uuid_ = responder_uuid;
  } else {
    clear_has_responder_uuid();
    responder_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.VoteResponsePB.responder_uuid)
}

// optional int64 responder_term = 2;
inline bool VoteResponsePB::has_responder_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteResponsePB::set_has_responder_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteResponsePB::clear_has_responder_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteResponsePB::clear_responder_term() {
  responder_term_ = GOOGLE_LONGLONG(0);
  clear_has_responder_term();
}
inline ::google::protobuf::int64 VoteResponsePB::responder_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteResponsePB.responder_term)
  return responder_term_;
}
inline void VoteResponsePB::set_responder_term(::google::protobuf::int64 value) {
  set_has_responder_term();
  responder_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.VoteResponsePB.responder_term)
}

// optional bool vote_granted = 3;
inline bool VoteResponsePB::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteResponsePB::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteResponsePB::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteResponsePB::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool VoteResponsePB::vote_granted() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteResponsePB.vote_granted)
  return vote_granted_;
}
inline void VoteResponsePB::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.VoteResponsePB.vote_granted)
}

// optional .base.consensus.ConsensusErrorPB consensus_error = 998;
inline bool VoteResponsePB::has_consensus_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteResponsePB::set_has_consensus_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteResponsePB::clear_has_consensus_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteResponsePB::clear_consensus_error() {
  if (consensus_error_ != NULL) consensus_error_->::base::consensus::ConsensusErrorPB::Clear();
  clear_has_consensus_error();
}
inline const ::base::consensus::ConsensusErrorPB& VoteResponsePB::consensus_error() const {
  // @@protoc_insertion_point(field_get:base.consensus.VoteResponsePB.consensus_error)
  return consensus_error_ != NULL ? *consensus_error_ : *default_instance_->consensus_error_;
}
inline ::base::consensus::ConsensusErrorPB* VoteResponsePB::mutable_consensus_error() {
  set_has_consensus_error();
  if (consensus_error_ == NULL) consensus_error_ = new ::base::consensus::ConsensusErrorPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.VoteResponsePB.consensus_error)
  return consensus_error_;
}
inline ::base::consensus::ConsensusErrorPB* VoteResponsePB::release_consensus_error() {
  clear_has_consensus_error();
  ::base::consensus::ConsensusErrorPB* temp = consensus_error_;
  consensus_error_ = NULL;
  return temp;
}
inline void VoteResponsePB::set_allocated_consensus_error(::base::consensus::ConsensusErrorPB* consensus_error) {
  delete consensus_error_;
  consensus_error_ = consensus_error;
  if (consensus_error) {
    set_has_consensus_error();
  } else {
    clear_has_consensus_error();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.VoteResponsePB.consensus_error)
}

// -------------------------------------------------------------------

// ConsensusRequestPB

// optional bytes dest_uuid = 7;
inline bool ConsensusRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& ConsensusRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void ConsensusRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.dest_uuid)
}
inline void ConsensusRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ConsensusRequestPB.dest_uuid)
}
inline void ConsensusRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ConsensusRequestPB.dest_uuid)
}
inline ::std::string* ConsensusRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* ConsensusRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsensusRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusRequestPB.dest_uuid)
}

// required string tablet_id = 1;
inline bool ConsensusRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& ConsensusRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.tablet_id)
  return *tablet_id_;
}
inline void ConsensusRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.tablet_id)
}
inline void ConsensusRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ConsensusRequestPB.tablet_id)
}
inline void ConsensusRequestPB::set_tablet_id(const char* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ConsensusRequestPB.tablet_id)
}
inline ::std::string* ConsensusRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* ConsensusRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsensusRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusRequestPB.tablet_id)
}

// required bytes caller_uuid = 2;
inline bool ConsensusRequestPB::has_caller_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusRequestPB::set_has_caller_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusRequestPB::clear_has_caller_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusRequestPB::clear_caller_uuid() {
  if (caller_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_uuid_->clear();
  }
  clear_has_caller_uuid();
}
inline const ::std::string& ConsensusRequestPB::caller_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.caller_uuid)
  return *caller_uuid_;
}
inline void ConsensusRequestPB::set_caller_uuid(const ::std::string& value) {
  set_has_caller_uuid();
  if (caller_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_uuid_ = new ::std::string;
  }
  caller_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.caller_uuid)
}
inline void ConsensusRequestPB::set_caller_uuid(const char* value) {
  set_has_caller_uuid();
  if (caller_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_uuid_ = new ::std::string;
  }
  caller_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ConsensusRequestPB.caller_uuid)
}
inline void ConsensusRequestPB::set_caller_uuid(const void* value, size_t size) {
  set_has_caller_uuid();
  if (caller_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_uuid_ = new ::std::string;
  }
  caller_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ConsensusRequestPB.caller_uuid)
}
inline ::std::string* ConsensusRequestPB::mutable_caller_uuid() {
  set_has_caller_uuid();
  if (caller_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caller_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusRequestPB.caller_uuid)
  return caller_uuid_;
}
inline ::std::string* ConsensusRequestPB::release_caller_uuid() {
  clear_has_caller_uuid();
  if (caller_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = caller_uuid_;
    caller_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsensusRequestPB::set_allocated_caller_uuid(::std::string* caller_uuid) {
  if (caller_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caller_uuid_;
  }
  if (caller_uuid) {
    set_has_caller_uuid();
    caller_uuid_ = caller_uuid;
  } else {
    clear_has_caller_uuid();
    caller_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusRequestPB.caller_uuid)
}

// required int64 caller_term = 3;
inline bool ConsensusRequestPB::has_caller_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConsensusRequestPB::set_has_caller_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConsensusRequestPB::clear_has_caller_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConsensusRequestPB::clear_caller_term() {
  caller_term_ = GOOGLE_LONGLONG(0);
  clear_has_caller_term();
}
inline ::google::protobuf::int64 ConsensusRequestPB::caller_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.caller_term)
  return caller_term_;
}
inline void ConsensusRequestPB::set_caller_term(::google::protobuf::int64 value) {
  set_has_caller_term();
  caller_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.caller_term)
}

// optional .base.consensus.OpId preceding_id = 4;
inline bool ConsensusRequestPB::has_preceding_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConsensusRequestPB::set_has_preceding_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConsensusRequestPB::clear_has_preceding_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConsensusRequestPB::clear_preceding_id() {
  if (preceding_id_ != NULL) preceding_id_->::base::consensus::OpId::Clear();
  clear_has_preceding_id();
}
inline const ::base::consensus::OpId& ConsensusRequestPB::preceding_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.preceding_id)
  return preceding_id_ != NULL ? *preceding_id_ : *default_instance_->preceding_id_;
}
inline ::base::consensus::OpId* ConsensusRequestPB::mutable_preceding_id() {
  set_has_preceding_id();
  if (preceding_id_ == NULL) preceding_id_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusRequestPB.preceding_id)
  return preceding_id_;
}
inline ::base::consensus::OpId* ConsensusRequestPB::release_preceding_id() {
  clear_has_preceding_id();
  ::base::consensus::OpId* temp = preceding_id_;
  preceding_id_ = NULL;
  return temp;
}
inline void ConsensusRequestPB::set_allocated_preceding_id(::base::consensus::OpId* preceding_id) {
  delete preceding_id_;
  preceding_id_ = preceding_id;
  if (preceding_id) {
    set_has_preceding_id();
  } else {
    clear_has_preceding_id();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusRequestPB.preceding_id)
}

// optional int64 committed_index = 8;
inline bool ConsensusRequestPB::has_committed_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConsensusRequestPB::set_has_committed_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConsensusRequestPB::clear_has_committed_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConsensusRequestPB::clear_committed_index() {
  committed_index_ = GOOGLE_LONGLONG(0);
  clear_has_committed_index();
}
inline ::google::protobuf::int64 ConsensusRequestPB::committed_index() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.committed_index)
  return committed_index_;
}
inline void ConsensusRequestPB::set_committed_index(::google::protobuf::int64 value) {
  set_has_committed_index();
  committed_index_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.committed_index)
}

// optional .base.consensus.OpId DEPRECATED_committed_index = 5;
inline bool ConsensusRequestPB::has_deprecated_committed_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConsensusRequestPB::set_has_deprecated_committed_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConsensusRequestPB::clear_has_deprecated_committed_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConsensusRequestPB::clear_deprecated_committed_index() {
  if (deprecated_committed_index_ != NULL) deprecated_committed_index_->::base::consensus::OpId::Clear();
  clear_has_deprecated_committed_index();
}
inline const ::base::consensus::OpId& ConsensusRequestPB::deprecated_committed_index() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  return deprecated_committed_index_ != NULL ? *deprecated_committed_index_ : *default_instance_->deprecated_committed_index_;
}
inline ::base::consensus::OpId* ConsensusRequestPB::mutable_deprecated_committed_index() {
  set_has_deprecated_committed_index();
  if (deprecated_committed_index_ == NULL) deprecated_committed_index_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
  return deprecated_committed_index_;
}
inline ::base::consensus::OpId* ConsensusRequestPB::release_deprecated_committed_index() {
  clear_has_deprecated_committed_index();
  ::base::consensus::OpId* temp = deprecated_committed_index_;
  deprecated_committed_index_ = NULL;
  return temp;
}
inline void ConsensusRequestPB::set_allocated_deprecated_committed_index(::base::consensus::OpId* deprecated_committed_index) {
  delete deprecated_committed_index_;
  deprecated_committed_index_ = deprecated_committed_index;
  if (deprecated_committed_index) {
    set_has_deprecated_committed_index();
  } else {
    clear_has_deprecated_committed_index();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusRequestPB.DEPRECATED_committed_index)
}

// repeated .base.consensus.ReplicateMsg ops = 6;
inline int ConsensusRequestPB::ops_size() const {
  return ops_.size();
}
inline void ConsensusRequestPB::clear_ops() {
  ops_.Clear();
}
inline const ::base::consensus::ReplicateMsg& ConsensusRequestPB::ops(int index) const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.ops)
  return ops_.Get(index);
}
inline ::base::consensus::ReplicateMsg* ConsensusRequestPB::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusRequestPB.ops)
  return ops_.Mutable(index);
}
inline ::base::consensus::ReplicateMsg* ConsensusRequestPB::add_ops() {
  // @@protoc_insertion_point(field_add:base.consensus.ConsensusRequestPB.ops)
  return ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::consensus::ReplicateMsg >&
ConsensusRequestPB::ops() const {
  // @@protoc_insertion_point(field_list:base.consensus.ConsensusRequestPB.ops)
  return ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::base::consensus::ReplicateMsg >*
ConsensusRequestPB::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:base.consensus.ConsensusRequestPB.ops)
  return &ops_;
}

// optional int64 all_replicated_index = 9;
inline bool ConsensusRequestPB::has_all_replicated_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConsensusRequestPB::set_has_all_replicated_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConsensusRequestPB::clear_has_all_replicated_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConsensusRequestPB::clear_all_replicated_index() {
  all_replicated_index_ = GOOGLE_LONGLONG(0);
  clear_has_all_replicated_index();
}
inline ::google::protobuf::int64 ConsensusRequestPB::all_replicated_index() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.all_replicated_index)
  return all_replicated_index_;
}
inline void ConsensusRequestPB::set_all_replicated_index(::google::protobuf::int64 value) {
  set_has_all_replicated_index();
  all_replicated_index_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.all_replicated_index)
}

// optional fixed64 safe_timestamp = 10;
inline bool ConsensusRequestPB::has_safe_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConsensusRequestPB::set_has_safe_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConsensusRequestPB::clear_has_safe_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConsensusRequestPB::clear_safe_timestamp() {
  safe_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_safe_timestamp();
}
inline ::google::protobuf::uint64 ConsensusRequestPB::safe_timestamp() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusRequestPB.safe_timestamp)
  return safe_timestamp_;
}
inline void ConsensusRequestPB::set_safe_timestamp(::google::protobuf::uint64 value) {
  set_has_safe_timestamp();
  safe_timestamp_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusRequestPB.safe_timestamp)
}

// -------------------------------------------------------------------

// ConsensusResponsePB

// optional bytes responder_uuid = 1;
inline bool ConsensusResponsePB::has_responder_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusResponsePB::set_has_responder_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusResponsePB::clear_has_responder_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusResponsePB::clear_responder_uuid() {
  if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_->clear();
  }
  clear_has_responder_uuid();
}
inline const ::std::string& ConsensusResponsePB::responder_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusResponsePB.responder_uuid)
  return *responder_uuid_;
}
inline void ConsensusResponsePB::set_responder_uuid(const ::std::string& value) {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  responder_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusResponsePB.responder_uuid)
}
inline void ConsensusResponsePB::set_responder_uuid(const char* value) {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  responder_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ConsensusResponsePB.responder_uuid)
}
inline void ConsensusResponsePB::set_responder_uuid(const void* value, size_t size) {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  responder_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ConsensusResponsePB.responder_uuid)
}
inline ::std::string* ConsensusResponsePB::mutable_responder_uuid() {
  set_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responder_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusResponsePB.responder_uuid)
  return responder_uuid_;
}
inline ::std::string* ConsensusResponsePB::release_responder_uuid() {
  clear_has_responder_uuid();
  if (responder_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = responder_uuid_;
    responder_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsensusResponsePB::set_allocated_responder_uuid(::std::string* responder_uuid) {
  if (responder_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responder_uuid_;
  }
  if (responder_uuid) {
    set_has_responder_uuid();
    responder_uuid_ = responder_uuid;
  } else {
    clear_has_responder_uuid();
    responder_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusResponsePB.responder_uuid)
}

// optional int64 responder_term = 2;
inline bool ConsensusResponsePB::has_responder_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusResponsePB::set_has_responder_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusResponsePB::clear_has_responder_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusResponsePB::clear_responder_term() {
  responder_term_ = GOOGLE_LONGLONG(0);
  clear_has_responder_term();
}
inline ::google::protobuf::int64 ConsensusResponsePB::responder_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusResponsePB.responder_term)
  return responder_term_;
}
inline void ConsensusResponsePB::set_responder_term(::google::protobuf::int64 value) {
  set_has_responder_term();
  responder_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusResponsePB.responder_term)
}

// optional .base.consensus.ConsensusStatusPB status = 3;
inline bool ConsensusResponsePB::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusResponsePB::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusResponsePB::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusResponsePB::clear_status() {
  if (status_ != NULL) status_->::base::consensus::ConsensusStatusPB::Clear();
  clear_has_status();
}
inline const ::base::consensus::ConsensusStatusPB& ConsensusResponsePB::status() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusResponsePB.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::base::consensus::ConsensusStatusPB* ConsensusResponsePB::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::base::consensus::ConsensusStatusPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusResponsePB.status)
  return status_;
}
inline ::base::consensus::ConsensusStatusPB* ConsensusResponsePB::release_status() {
  clear_has_status();
  ::base::consensus::ConsensusStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline void ConsensusResponsePB::set_allocated_status(::base::consensus::ConsensusStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusResponsePB.status)
}

// -------------------------------------------------------------------

// TransactionStatusPB

// required .base.consensus.OpId op_id = 1;
inline bool TransactionStatusPB::has_op_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStatusPB::set_has_op_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionStatusPB::clear_has_op_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionStatusPB::clear_op_id() {
  if (op_id_ != NULL) op_id_->::base::consensus::OpId::Clear();
  clear_has_op_id();
}
inline const ::base::consensus::OpId& TransactionStatusPB::op_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.TransactionStatusPB.op_id)
  return op_id_ != NULL ? *op_id_ : *default_instance_->op_id_;
}
inline ::base::consensus::OpId* TransactionStatusPB::mutable_op_id() {
  set_has_op_id();
  if (op_id_ == NULL) op_id_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.TransactionStatusPB.op_id)
  return op_id_;
}
inline ::base::consensus::OpId* TransactionStatusPB::release_op_id() {
  clear_has_op_id();
  ::base::consensus::OpId* temp = op_id_;
  op_id_ = NULL;
  return temp;
}
inline void TransactionStatusPB::set_allocated_op_id(::base::consensus::OpId* op_id) {
  delete op_id_;
  op_id_ = op_id;
  if (op_id) {
    set_has_op_id();
  } else {
    clear_has_op_id();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.TransactionStatusPB.op_id)
}

// required .base.consensus.OperationType tx_type = 2;
inline bool TransactionStatusPB::has_tx_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStatusPB::set_has_tx_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionStatusPB::clear_has_tx_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionStatusPB::clear_tx_type() {
  tx_type_ = 0;
  clear_has_tx_type();
}
inline ::base::consensus::OperationType TransactionStatusPB::tx_type() const {
  // @@protoc_insertion_point(field_get:base.consensus.TransactionStatusPB.tx_type)
  return static_cast< ::base::consensus::OperationType >(tx_type_);
}
inline void TransactionStatusPB::set_tx_type(::base::consensus::OperationType value) {
  assert(::base::consensus::OperationType_IsValid(value));
  set_has_tx_type();
  tx_type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.TransactionStatusPB.tx_type)
}

// required int64 running_for_micros = 3;
inline bool TransactionStatusPB::has_running_for_micros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionStatusPB::set_has_running_for_micros() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransactionStatusPB::clear_has_running_for_micros() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransactionStatusPB::clear_running_for_micros() {
  running_for_micros_ = GOOGLE_LONGLONG(0);
  clear_has_running_for_micros();
}
inline ::google::protobuf::int64 TransactionStatusPB::running_for_micros() const {
  // @@protoc_insertion_point(field_get:base.consensus.TransactionStatusPB.running_for_micros)
  return running_for_micros_;
}
inline void TransactionStatusPB::set_running_for_micros(::google::protobuf::int64 value) {
  set_has_running_for_micros();
  running_for_micros_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.TransactionStatusPB.running_for_micros)
}

// required string description = 4;
inline bool TransactionStatusPB::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionStatusPB::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransactionStatusPB::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransactionStatusPB::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& TransactionStatusPB::description() const {
  // @@protoc_insertion_point(field_get:base.consensus.TransactionStatusPB.description)
  return *description_;
}
inline void TransactionStatusPB::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.TransactionStatusPB.description)
}
inline void TransactionStatusPB::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.TransactionStatusPB.description)
}
inline void TransactionStatusPB::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.TransactionStatusPB.description)
}
inline ::std::string* TransactionStatusPB::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.TransactionStatusPB.description)
  return description_;
}
inline ::std::string* TransactionStatusPB::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionStatusPB::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.TransactionStatusPB.description)
}

// optional string trace_buffer = 6;
inline bool TransactionStatusPB::has_trace_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionStatusPB::set_has_trace_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransactionStatusPB::clear_has_trace_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransactionStatusPB::clear_trace_buffer() {
  if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_->clear();
  }
  clear_has_trace_buffer();
}
inline const ::std::string& TransactionStatusPB::trace_buffer() const {
  // @@protoc_insertion_point(field_get:base.consensus.TransactionStatusPB.trace_buffer)
  return *trace_buffer_;
}
inline void TransactionStatusPB::set_trace_buffer(const ::std::string& value) {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  trace_buffer_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.TransactionStatusPB.trace_buffer)
}
inline void TransactionStatusPB::set_trace_buffer(const char* value) {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  trace_buffer_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.TransactionStatusPB.trace_buffer)
}
inline void TransactionStatusPB::set_trace_buffer(const char* value, size_t size) {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  trace_buffer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.TransactionStatusPB.trace_buffer)
}
inline ::std::string* TransactionStatusPB::mutable_trace_buffer() {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.TransactionStatusPB.trace_buffer)
  return trace_buffer_;
}
inline ::std::string* TransactionStatusPB::release_trace_buffer() {
  clear_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trace_buffer_;
    trace_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionStatusPB::set_allocated_trace_buffer(::std::string* trace_buffer) {
  if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_buffer_;
  }
  if (trace_buffer) {
    set_has_trace_buffer();
    trace_buffer_ = trace_buffer;
  } else {
    clear_has_trace_buffer();
    trace_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.TransactionStatusPB.trace_buffer)
}

// -------------------------------------------------------------------

// GetNodeInstanceRequestPB

// -------------------------------------------------------------------

// GetNodeInstanceResponsePB

// required .base.NodeInstancePB node_instance = 1;
inline bool GetNodeInstanceResponsePB::has_node_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetNodeInstanceResponsePB::set_has_node_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetNodeInstanceResponsePB::clear_has_node_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetNodeInstanceResponsePB::clear_node_instance() {
  if (node_instance_ != NULL) node_instance_->::base::NodeInstancePB::Clear();
  clear_has_node_instance();
}
inline const ::base::NodeInstancePB& GetNodeInstanceResponsePB::node_instance() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetNodeInstanceResponsePB.node_instance)
  return node_instance_ != NULL ? *node_instance_ : *default_instance_->node_instance_;
}
inline ::base::NodeInstancePB* GetNodeInstanceResponsePB::mutable_node_instance() {
  set_has_node_instance();
  if (node_instance_ == NULL) node_instance_ = new ::base::NodeInstancePB;
  // @@protoc_insertion_point(field_mutable:base.consensus.GetNodeInstanceResponsePB.node_instance)
  return node_instance_;
}
inline ::base::NodeInstancePB* GetNodeInstanceResponsePB::release_node_instance() {
  clear_has_node_instance();
  ::base::NodeInstancePB* temp = node_instance_;
  node_instance_ = NULL;
  return temp;
}
inline void GetNodeInstanceResponsePB::set_allocated_node_instance(::base::NodeInstancePB* node_instance) {
  delete node_instance_;
  node_instance_ = node_instance;
  if (node_instance) {
    set_has_node_instance();
  } else {
    clear_has_node_instance();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetNodeInstanceResponsePB.node_instance)
}

// -------------------------------------------------------------------

// RunLeaderElectionRequestPB

// optional bytes dest_uuid = 2;
inline bool RunLeaderElectionRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunLeaderElectionRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunLeaderElectionRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunLeaderElectionRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& RunLeaderElectionRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.RunLeaderElectionRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void RunLeaderElectionRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
inline void RunLeaderElectionRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
inline void RunLeaderElectionRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.RunLeaderElectionRequestPB.dest_uuid)
}
inline ::std::string* RunLeaderElectionRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.RunLeaderElectionRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* RunLeaderElectionRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RunLeaderElectionRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.RunLeaderElectionRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool RunLeaderElectionRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunLeaderElectionRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunLeaderElectionRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunLeaderElectionRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& RunLeaderElectionRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.RunLeaderElectionRequestPB.tablet_id)
  return *tablet_id_;
}
inline void RunLeaderElectionRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.RunLeaderElectionRequestPB.tablet_id)
}
inline void RunLeaderElectionRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.RunLeaderElectionRequestPB.tablet_id)
}
inline void RunLeaderElectionRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.RunLeaderElectionRequestPB.tablet_id)
}
inline ::std::string* RunLeaderElectionRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.RunLeaderElectionRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* RunLeaderElectionRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RunLeaderElectionRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.RunLeaderElectionRequestPB.tablet_id)
}

// -------------------------------------------------------------------

// RunLeaderElectionResponsePB

// -------------------------------------------------------------------

// LeaderStepDownRequestPB

// optional bytes dest_uuid = 2;
inline bool LeaderStepDownRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderStepDownRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderStepDownRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderStepDownRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& LeaderStepDownRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.LeaderStepDownRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void LeaderStepDownRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.LeaderStepDownRequestPB.dest_uuid)
}
inline void LeaderStepDownRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.LeaderStepDownRequestPB.dest_uuid)
}
inline void LeaderStepDownRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.LeaderStepDownRequestPB.dest_uuid)
}
inline ::std::string* LeaderStepDownRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.LeaderStepDownRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* LeaderStepDownRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LeaderStepDownRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.LeaderStepDownRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool LeaderStepDownRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaderStepDownRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaderStepDownRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaderStepDownRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& LeaderStepDownRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.LeaderStepDownRequestPB.tablet_id)
  return *tablet_id_;
}
inline void LeaderStepDownRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.LeaderStepDownRequestPB.tablet_id)
}
inline void LeaderStepDownRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.LeaderStepDownRequestPB.tablet_id)
}
inline void LeaderStepDownRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.LeaderStepDownRequestPB.tablet_id)
}
inline ::std::string* LeaderStepDownRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.LeaderStepDownRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* LeaderStepDownRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LeaderStepDownRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.LeaderStepDownRequestPB.tablet_id)
}

// -------------------------------------------------------------------

// LeaderStepDownResponsePB

// -------------------------------------------------------------------

// GetLastOpIdRequestPB

// optional bytes dest_uuid = 2;
inline bool GetLastOpIdRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastOpIdRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastOpIdRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastOpIdRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& GetLastOpIdRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetLastOpIdRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void GetLastOpIdRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.GetLastOpIdRequestPB.dest_uuid)
}
inline void GetLastOpIdRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.GetLastOpIdRequestPB.dest_uuid)
}
inline void GetLastOpIdRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.GetLastOpIdRequestPB.dest_uuid)
}
inline ::std::string* GetLastOpIdRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.GetLastOpIdRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* GetLastOpIdRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetLastOpIdRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetLastOpIdRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool GetLastOpIdRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLastOpIdRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLastOpIdRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLastOpIdRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& GetLastOpIdRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetLastOpIdRequestPB.tablet_id)
  return *tablet_id_;
}
inline void GetLastOpIdRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.GetLastOpIdRequestPB.tablet_id)
}
inline void GetLastOpIdRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.GetLastOpIdRequestPB.tablet_id)
}
inline void GetLastOpIdRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.GetLastOpIdRequestPB.tablet_id)
}
inline ::std::string* GetLastOpIdRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.GetLastOpIdRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* GetLastOpIdRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetLastOpIdRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetLastOpIdRequestPB.tablet_id)
}

// optional .base.consensus.OpIdType opid_type = 3 [default = RECEIVED_OPID];
inline bool GetLastOpIdRequestPB::has_opid_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLastOpIdRequestPB::set_has_opid_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLastOpIdRequestPB::clear_has_opid_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLastOpIdRequestPB::clear_opid_type() {
  opid_type_ = 1;
  clear_has_opid_type();
}
inline ::base::consensus::OpIdType GetLastOpIdRequestPB::opid_type() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetLastOpIdRequestPB.opid_type)
  return static_cast< ::base::consensus::OpIdType >(opid_type_);
}
inline void GetLastOpIdRequestPB::set_opid_type(::base::consensus::OpIdType value) {
  assert(::base::consensus::OpIdType_IsValid(value));
  set_has_opid_type();
  opid_type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.GetLastOpIdRequestPB.opid_type)
}

// -------------------------------------------------------------------

// GetLastOpIdResponsePB

// optional .base.consensus.OpId opid = 1;
inline bool GetLastOpIdResponsePB::has_opid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastOpIdResponsePB::set_has_opid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastOpIdResponsePB::clear_has_opid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastOpIdResponsePB::clear_opid() {
  if (opid_ != NULL) opid_->::base::consensus::OpId::Clear();
  clear_has_opid();
}
inline const ::base::consensus::OpId& GetLastOpIdResponsePB::opid() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetLastOpIdResponsePB.opid)
  return opid_ != NULL ? *opid_ : *default_instance_->opid_;
}
inline ::base::consensus::OpId* GetLastOpIdResponsePB::mutable_opid() {
  set_has_opid();
  if (opid_ == NULL) opid_ = new ::base::consensus::OpId;
  // @@protoc_insertion_point(field_mutable:base.consensus.GetLastOpIdResponsePB.opid)
  return opid_;
}
inline ::base::consensus::OpId* GetLastOpIdResponsePB::release_opid() {
  clear_has_opid();
  ::base::consensus::OpId* temp = opid_;
  opid_ = NULL;
  return temp;
}
inline void GetLastOpIdResponsePB::set_allocated_opid(::base::consensus::OpId* opid) {
  delete opid_;
  opid_ = opid;
  if (opid) {
    set_has_opid();
  } else {
    clear_has_opid();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetLastOpIdResponsePB.opid)
}

// -------------------------------------------------------------------

// GetConsensusStateRequestPB

// optional bytes dest_uuid = 2;
inline bool GetConsensusStateRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConsensusStateRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConsensusStateRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConsensusStateRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& GetConsensusStateRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetConsensusStateRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void GetConsensusStateRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.GetConsensusStateRequestPB.dest_uuid)
}
inline void GetConsensusStateRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.GetConsensusStateRequestPB.dest_uuid)
}
inline void GetConsensusStateRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.GetConsensusStateRequestPB.dest_uuid)
}
inline ::std::string* GetConsensusStateRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.GetConsensusStateRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* GetConsensusStateRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetConsensusStateRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetConsensusStateRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool GetConsensusStateRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetConsensusStateRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetConsensusStateRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetConsensusStateRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& GetConsensusStateRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetConsensusStateRequestPB.tablet_id)
  return *tablet_id_;
}
inline void GetConsensusStateRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.GetConsensusStateRequestPB.tablet_id)
}
inline void GetConsensusStateRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.GetConsensusStateRequestPB.tablet_id)
}
inline void GetConsensusStateRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.GetConsensusStateRequestPB.tablet_id)
}
inline ::std::string* GetConsensusStateRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.GetConsensusStateRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* GetConsensusStateRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetConsensusStateRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetConsensusStateRequestPB.tablet_id)
}

// optional .base.consensus.ConsensusConfigType type = 3 [default = CONSENSUS_CONFIG_COMMITTED];
inline bool GetConsensusStateRequestPB::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetConsensusStateRequestPB::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetConsensusStateRequestPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetConsensusStateRequestPB::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::base::consensus::ConsensusConfigType GetConsensusStateRequestPB::type() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetConsensusStateRequestPB.type)
  return static_cast< ::base::consensus::ConsensusConfigType >(type_);
}
inline void GetConsensusStateRequestPB::set_type(::base::consensus::ConsensusConfigType value) {
  assert(::base::consensus::ConsensusConfigType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.GetConsensusStateRequestPB.type)
}

// -------------------------------------------------------------------

// GetConsensusStateResponsePB

// optional .base.consensus.ConsensusStatePB cstate = 1;
inline bool GetConsensusStateResponsePB::has_cstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConsensusStateResponsePB::set_has_cstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConsensusStateResponsePB::clear_has_cstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConsensusStateResponsePB::clear_cstate() {
  if (cstate_ != NULL) cstate_->::base::consensus::ConsensusStatePB::Clear();
  clear_has_cstate();
}
inline const ::base::consensus::ConsensusStatePB& GetConsensusStateResponsePB::cstate() const {
  // @@protoc_insertion_point(field_get:base.consensus.GetConsensusStateResponsePB.cstate)
  return cstate_ != NULL ? *cstate_ : *default_instance_->cstate_;
}
inline ::base::consensus::ConsensusStatePB* GetConsensusStateResponsePB::mutable_cstate() {
  set_has_cstate();
  if (cstate_ == NULL) cstate_ = new ::base::consensus::ConsensusStatePB;
  // @@protoc_insertion_point(field_mutable:base.consensus.GetConsensusStateResponsePB.cstate)
  return cstate_;
}
inline ::base::consensus::ConsensusStatePB* GetConsensusStateResponsePB::release_cstate() {
  clear_has_cstate();
  ::base::consensus::ConsensusStatePB* temp = cstate_;
  cstate_ = NULL;
  return temp;
}
inline void GetConsensusStateResponsePB::set_allocated_cstate(::base::consensus::ConsensusStatePB* cstate) {
  delete cstate_;
  cstate_ = cstate;
  if (cstate) {
    set_has_cstate();
  } else {
    clear_has_cstate();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.GetConsensusStateResponsePB.cstate)
}

// -------------------------------------------------------------------

// StartTabletCopyRequestPB

// optional bytes dest_uuid = 5;
inline bool StartTabletCopyRequestPB::has_dest_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_dest_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartTabletCopyRequestPB::clear_has_dest_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartTabletCopyRequestPB::clear_dest_uuid() {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_->clear();
  }
  clear_has_dest_uuid();
}
inline const ::std::string& StartTabletCopyRequestPB::dest_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.StartTabletCopyRequestPB.dest_uuid)
  return *dest_uuid_;
}
inline void StartTabletCopyRequestPB::set_dest_uuid(const ::std::string& value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.StartTabletCopyRequestPB.dest_uuid)
}
inline void StartTabletCopyRequestPB::set_dest_uuid(const char* value) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.StartTabletCopyRequestPB.dest_uuid)
}
inline void StartTabletCopyRequestPB::set_dest_uuid(const void* value, size_t size) {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  dest_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.StartTabletCopyRequestPB.dest_uuid)
}
inline ::std::string* StartTabletCopyRequestPB::mutable_dest_uuid() {
  set_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dest_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.StartTabletCopyRequestPB.dest_uuid)
  return dest_uuid_;
}
inline ::std::string* StartTabletCopyRequestPB::release_dest_uuid() {
  clear_has_dest_uuid();
  if (dest_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dest_uuid_;
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartTabletCopyRequestPB::set_allocated_dest_uuid(::std::string* dest_uuid) {
  if (dest_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_uuid_;
  }
  if (dest_uuid) {
    set_has_dest_uuid();
    dest_uuid_ = dest_uuid;
  } else {
    clear_has_dest_uuid();
    dest_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.StartTabletCopyRequestPB.dest_uuid)
}

// required bytes tablet_id = 1;
inline bool StartTabletCopyRequestPB::has_tablet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_tablet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartTabletCopyRequestPB::clear_has_tablet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartTabletCopyRequestPB::clear_tablet_id() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_->clear();
  }
  clear_has_tablet_id();
}
inline const ::std::string& StartTabletCopyRequestPB::tablet_id() const {
  // @@protoc_insertion_point(field_get:base.consensus.StartTabletCopyRequestPB.tablet_id)
  return *tablet_id_;
}
inline void StartTabletCopyRequestPB::set_tablet_id(const ::std::string& value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.StartTabletCopyRequestPB.tablet_id)
}
inline void StartTabletCopyRequestPB::set_tablet_id(const char* value) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.StartTabletCopyRequestPB.tablet_id)
}
inline void StartTabletCopyRequestPB::set_tablet_id(const void* value, size_t size) {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  tablet_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.StartTabletCopyRequestPB.tablet_id)
}
inline ::std::string* StartTabletCopyRequestPB::mutable_tablet_id() {
  set_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablet_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.StartTabletCopyRequestPB.tablet_id)
  return tablet_id_;
}
inline ::std::string* StartTabletCopyRequestPB::release_tablet_id() {
  clear_has_tablet_id();
  if (tablet_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablet_id_;
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartTabletCopyRequestPB::set_allocated_tablet_id(::std::string* tablet_id) {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (tablet_id) {
    set_has_tablet_id();
    tablet_id_ = tablet_id;
  } else {
    clear_has_tablet_id();
    tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.StartTabletCopyRequestPB.tablet_id)
}

// required bytes copy_peer_uuid = 2;
inline bool StartTabletCopyRequestPB::has_copy_peer_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_copy_peer_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartTabletCopyRequestPB::clear_has_copy_peer_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartTabletCopyRequestPB::clear_copy_peer_uuid() {
  if (copy_peer_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copy_peer_uuid_->clear();
  }
  clear_has_copy_peer_uuid();
}
inline const ::std::string& StartTabletCopyRequestPB::copy_peer_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  return *copy_peer_uuid_;
}
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(const ::std::string& value) {
  set_has_copy_peer_uuid();
  if (copy_peer_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copy_peer_uuid_ = new ::std::string;
  }
  copy_peer_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(const char* value) {
  set_has_copy_peer_uuid();
  if (copy_peer_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copy_peer_uuid_ = new ::std::string;
  }
  copy_peer_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
inline void StartTabletCopyRequestPB::set_copy_peer_uuid(const void* value, size_t size) {
  set_has_copy_peer_uuid();
  if (copy_peer_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copy_peer_uuid_ = new ::std::string;
  }
  copy_peer_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}
inline ::std::string* StartTabletCopyRequestPB::mutable_copy_peer_uuid() {
  set_has_copy_peer_uuid();
  if (copy_peer_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copy_peer_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
  return copy_peer_uuid_;
}
inline ::std::string* StartTabletCopyRequestPB::release_copy_peer_uuid() {
  clear_has_copy_peer_uuid();
  if (copy_peer_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = copy_peer_uuid_;
    copy_peer_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartTabletCopyRequestPB::set_allocated_copy_peer_uuid(::std::string* copy_peer_uuid) {
  if (copy_peer_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete copy_peer_uuid_;
  }
  if (copy_peer_uuid) {
    set_has_copy_peer_uuid();
    copy_peer_uuid_ = copy_peer_uuid;
  } else {
    clear_has_copy_peer_uuid();
    copy_peer_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.StartTabletCopyRequestPB.copy_peer_uuid)
}

// required .base.HostPortPB copy_peer_addr = 3;
inline bool StartTabletCopyRequestPB::has_copy_peer_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_copy_peer_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StartTabletCopyRequestPB::clear_has_copy_peer_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StartTabletCopyRequestPB::clear_copy_peer_addr() {
  if (copy_peer_addr_ != NULL) copy_peer_addr_->::base::HostPortPB::Clear();
  clear_has_copy_peer_addr();
}
inline const ::base::HostPortPB& StartTabletCopyRequestPB::copy_peer_addr() const {
  // @@protoc_insertion_point(field_get:base.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  return copy_peer_addr_ != NULL ? *copy_peer_addr_ : *default_instance_->copy_peer_addr_;
}
inline ::base::HostPortPB* StartTabletCopyRequestPB::mutable_copy_peer_addr() {
  set_has_copy_peer_addr();
  if (copy_peer_addr_ == NULL) copy_peer_addr_ = new ::base::HostPortPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.StartTabletCopyRequestPB.copy_peer_addr)
  return copy_peer_addr_;
}
inline ::base::HostPortPB* StartTabletCopyRequestPB::release_copy_peer_addr() {
  clear_has_copy_peer_addr();
  ::base::HostPortPB* temp = copy_peer_addr_;
  copy_peer_addr_ = NULL;
  return temp;
}
inline void StartTabletCopyRequestPB::set_allocated_copy_peer_addr(::base::HostPortPB* copy_peer_addr) {
  delete copy_peer_addr_;
  copy_peer_addr_ = copy_peer_addr;
  if (copy_peer_addr) {
    set_has_copy_peer_addr();
  } else {
    clear_has_copy_peer_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.StartTabletCopyRequestPB.copy_peer_addr)
}

// optional int64 caller_term = 4 [default = -1];
inline bool StartTabletCopyRequestPB::has_caller_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StartTabletCopyRequestPB::set_has_caller_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StartTabletCopyRequestPB::clear_has_caller_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StartTabletCopyRequestPB::clear_caller_term() {
  caller_term_ = GOOGLE_LONGLONG(-1);
  clear_has_caller_term();
}
inline ::google::protobuf::int64 StartTabletCopyRequestPB::caller_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.StartTabletCopyRequestPB.caller_term)
  return caller_term_;
}
inline void StartTabletCopyRequestPB::set_caller_term(::google::protobuf::int64 value) {
  set_has_caller_term();
  caller_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.StartTabletCopyRequestPB.caller_term)
}

// -------------------------------------------------------------------

// StartTabletCopyResponsePB


// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace base

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::base::consensus::ConsensusErrorPB_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::ConsensusErrorPB_Code>() {
  return ::base::consensus::ConsensusErrorPB_Code_descriptor();
}
template <> struct is_proto_enum< ::base::consensus::OperationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::OperationType>() {
  return ::base::consensus::OperationType_descriptor();
}
template <> struct is_proto_enum< ::base::consensus::DriverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::DriverType>() {
  return ::base::consensus::DriverType_descriptor();
}
template <> struct is_proto_enum< ::base::consensus::ChangeConfigType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::ChangeConfigType>() {
  return ::base::consensus::ChangeConfigType_descriptor();
}
template <> struct is_proto_enum< ::base::consensus::OpIdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::OpIdType>() {
  return ::base::consensus::OpIdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fraft_2fproto_2fconsensus_2eproto__INCLUDED
