// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/raft/proto/log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {
namespace log {

namespace {

const ::google::protobuf::Descriptor* LogEntryPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntryPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntryBatchPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntryBatchPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSegmentHeaderPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSegmentHeaderPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSegmentFooterPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSegmentFooterPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEntryTypePB_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fraft_2fproto_2flog_2eproto() {
  protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/raft/proto/log.proto");
  GOOGLE_CHECK(file != NULL);
  LogEntryPB_descriptor_ = file->message_type(0);
  static const int LogEntryPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryPB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryPB, replicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryPB, commit_),
  };
  LogEntryPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntryPB_descriptor_,
      LogEntryPB::default_instance_,
      LogEntryPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntryPB));
  LogEntryBatchPB_descriptor_ = file->message_type(1);
  static const int LogEntryBatchPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryBatchPB, entry_),
  };
  LogEntryBatchPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntryBatchPB_descriptor_,
      LogEntryBatchPB::default_instance_,
      LogEntryBatchPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryBatchPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryBatchPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntryBatchPB));
  LogSegmentHeaderPB_descriptor_ = file->message_type(2);
  static const int LogSegmentHeaderPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentHeaderPB, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentHeaderPB, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentHeaderPB, tablet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentHeaderPB, sequence_number_),
  };
  LogSegmentHeaderPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSegmentHeaderPB_descriptor_,
      LogSegmentHeaderPB::default_instance_,
      LogSegmentHeaderPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentHeaderPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentHeaderPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSegmentHeaderPB));
  LogSegmentFooterPB_descriptor_ = file->message_type(3);
  static const int LogSegmentFooterPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentFooterPB, num_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentFooterPB, min_replicate_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentFooterPB, max_replicate_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentFooterPB, close_timestamp_micros_),
  };
  LogSegmentFooterPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogSegmentFooterPB_descriptor_,
      LogSegmentFooterPB::default_instance_,
      LogSegmentFooterPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentFooterPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSegmentFooterPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogSegmentFooterPB));
  LogEntryTypePB_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fraft_2fproto_2flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntryPB_descriptor_, &LogEntryPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntryBatchPB_descriptor_, &LogEntryBatchPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSegmentHeaderPB_descriptor_, &LogSegmentHeaderPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogSegmentFooterPB_descriptor_, &LogSegmentFooterPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fraft_2fproto_2flog_2eproto() {
  delete LogEntryPB::default_instance_;
  delete LogEntryPB_reflection_;
  delete LogEntryBatchPB::default_instance_;
  delete LogEntryBatchPB_reflection_;
  delete LogSegmentHeaderPB::default_instance_;
  delete LogSegmentHeaderPB_reflection_;
  delete LogSegmentFooterPB::default_instance_;
  delete LogSegmentFooterPB_reflection_;
}

void protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::base::protobuf_AddDesc_base_2fcommon_2fcommon_2eproto();
  ::base::consensus::protobuf_AddDesc_base_2fraft_2fproto_2fconsensus_2eproto();
  ::base::consensus::protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031base/raft/proto/log.proto\022\010base.log\032\030b"
    "ase/common/common.proto\032\037base/raft/proto"
    "/consensus.proto\032\036base/raft/proto/metada"
    "ta.proto\"\220\001\n\nLogEntryPB\022&\n\004type\030\001 \002(\0162\030."
    "base.log.LogEntryTypePB\022/\n\treplicate\030\002 \001"
    "(\0132\034.base.consensus.ReplicateMsg\022)\n\006comm"
    "it\030\003 \001(\0132\031.base.consensus.CommitMsg\"6\n\017L"
    "ogEntryBatchPB\022#\n\005entry\030\001 \003(\0132\024.base.log"
    ".LogEntryPB\"n\n\022LogSegmentHeaderPB\022\025\n\rmaj"
    "or_version\030\001 \002(\r\022\025\n\rminor_version\030\002 \002(\r\022"
    "\021\n\ttablet_id\030\005 \002(\014\022\027\n\017sequence_number\030\006 "
    "\002(\004\"\213\001\n\022LogSegmentFooterPB\022\023\n\013num_entrie"
    "s\030\001 \002(\003\022\037\n\023min_replicate_index\030\002 \001(\003:\002-1"
    "\022\037\n\023max_replicate_index\030\003 \001(\003:\002-1\022\036\n\026clo"
    "se_timestamp_micros\030\004 \001(\003*K\n\016LogEntryTyp"
    "ePB\022\013\n\007UNKNOWN\020\000\022\r\n\tREPLICATE\020\001\022\n\n\006COMMI"
    "T\020\002\022\021\n\014FLUSH_MARKER\020\347\007", 662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/raft/proto/log.proto", &protobuf_RegisterTypes);
  LogEntryPB::default_instance_ = new LogEntryPB();
  LogEntryBatchPB::default_instance_ = new LogEntryBatchPB();
  LogSegmentHeaderPB::default_instance_ = new LogSegmentHeaderPB();
  LogSegmentFooterPB::default_instance_ = new LogSegmentFooterPB();
  LogEntryPB::default_instance_->InitAsDefaultInstance();
  LogEntryBatchPB::default_instance_->InitAsDefaultInstance();
  LogSegmentHeaderPB::default_instance_->InitAsDefaultInstance();
  LogSegmentFooterPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fraft_2fproto_2flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fraft_2fproto_2flog_2eproto {
  StaticDescriptorInitializer_base_2fraft_2fproto_2flog_2eproto() {
    protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto();
  }
} static_descriptor_initializer_base_2fraft_2fproto_2flog_2eproto_;
const ::google::protobuf::EnumDescriptor* LogEntryTypePB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryTypePB_descriptor_;
}
bool LogEntryTypePB_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntryPB::kTypeFieldNumber;
const int LogEntryPB::kReplicateFieldNumber;
const int LogEntryPB::kCommitFieldNumber;
#endif  // !_MSC_VER

LogEntryPB::LogEntryPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.log.LogEntryPB)
}

void LogEntryPB::InitAsDefaultInstance() {
  replicate_ = const_cast< ::base::consensus::ReplicateMsg*>(&::base::consensus::ReplicateMsg::default_instance());
  commit_ = const_cast< ::base::consensus::CommitMsg*>(&::base::consensus::CommitMsg::default_instance());
}

LogEntryPB::LogEntryPB(const LogEntryPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.log.LogEntryPB)
}

void LogEntryPB::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  replicate_ = NULL;
  commit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntryPB::~LogEntryPB() {
  // @@protoc_insertion_point(destructor:base.log.LogEntryPB)
  SharedDtor();
}

void LogEntryPB::SharedDtor() {
  if (this != default_instance_) {
    delete replicate_;
    delete commit_;
  }
}

void LogEntryPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryPB_descriptor_;
}

const LogEntryPB& LogEntryPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto();
  return *default_instance_;
}

LogEntryPB* LogEntryPB::default_instance_ = NULL;

LogEntryPB* LogEntryPB::New() const {
  return new LogEntryPB;
}

void LogEntryPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    if (has_replicate()) {
      if (replicate_ != NULL) replicate_->::base::consensus::ReplicateMsg::Clear();
    }
    if (has_commit()) {
      if (commit_ != NULL) commit_->::base::consensus::CommitMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntryPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.log.LogEntryPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.log.LogEntryTypePB type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::log::LogEntryTypePB_IsValid(value)) {
            set_type(static_cast< ::base::log::LogEntryTypePB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replicate;
        break;
      }

      // optional .base.consensus.ReplicateMsg replicate = 2;
      case 2: {
        if (tag == 18) {
         parse_replicate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replicate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commit;
        break;
      }

      // optional .base.consensus.CommitMsg commit = 3;
      case 3: {
        if (tag == 26) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.log.LogEntryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.log.LogEntryPB)
  return false;
#undef DO_
}

void LogEntryPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.log.LogEntryPB)
  // required .base.log.LogEntryTypePB type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .base.consensus.ReplicateMsg replicate = 2;
  if (has_replicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->replicate(), output);
  }

  // optional .base.consensus.CommitMsg commit = 3;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.log.LogEntryPB)
}

::google::protobuf::uint8* LogEntryPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.log.LogEntryPB)
  // required .base.log.LogEntryTypePB type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .base.consensus.ReplicateMsg replicate = 2;
  if (has_replicate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->replicate(), target);
  }

  // optional .base.consensus.CommitMsg commit = 3;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.log.LogEntryPB)
  return target;
}

int LogEntryPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.log.LogEntryTypePB type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .base.consensus.ReplicateMsg replicate = 2;
    if (has_replicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicate());
    }

    // optional .base.consensus.CommitMsg commit = 3;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntryPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntryPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntryPB::MergeFrom(const LogEntryPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_replicate()) {
      mutable_replicate()->::base::consensus::ReplicateMsg::MergeFrom(from.replicate());
    }
    if (from.has_commit()) {
      mutable_commit()->::base::consensus::CommitMsg::MergeFrom(from.commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntryPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryPB::CopyFrom(const LogEntryPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_replicate()) {
    if (!this->replicate().IsInitialized()) return false;
  }
  if (has_commit()) {
    if (!this->commit().IsInitialized()) return false;
  }
  return true;
}

void LogEntryPB::Swap(LogEntryPB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(replicate_, other->replicate_);
    std::swap(commit_, other->commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntryPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntryPB_descriptor_;
  metadata.reflection = LogEntryPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntryBatchPB::kEntryFieldNumber;
#endif  // !_MSC_VER

LogEntryBatchPB::LogEntryBatchPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.log.LogEntryBatchPB)
}

void LogEntryBatchPB::InitAsDefaultInstance() {
}

LogEntryBatchPB::LogEntryBatchPB(const LogEntryBatchPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.log.LogEntryBatchPB)
}

void LogEntryBatchPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntryBatchPB::~LogEntryBatchPB() {
  // @@protoc_insertion_point(destructor:base.log.LogEntryBatchPB)
  SharedDtor();
}

void LogEntryBatchPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogEntryBatchPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryBatchPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryBatchPB_descriptor_;
}

const LogEntryBatchPB& LogEntryBatchPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto();
  return *default_instance_;
}

LogEntryBatchPB* LogEntryBatchPB::default_instance_ = NULL;

LogEntryBatchPB* LogEntryBatchPB::New() const {
  return new LogEntryBatchPB;
}

void LogEntryBatchPB::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntryBatchPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.log.LogEntryBatchPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .base.log.LogEntryPB entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.log.LogEntryBatchPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.log.LogEntryBatchPB)
  return false;
#undef DO_
}

void LogEntryBatchPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.log.LogEntryBatchPB)
  // repeated .base.log.LogEntryPB entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.log.LogEntryBatchPB)
}

::google::protobuf::uint8* LogEntryBatchPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.log.LogEntryBatchPB)
  // repeated .base.log.LogEntryPB entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.log.LogEntryBatchPB)
  return target;
}

int LogEntryBatchPB::ByteSize() const {
  int total_size = 0;

  // repeated .base.log.LogEntryPB entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryBatchPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntryBatchPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntryBatchPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntryBatchPB::MergeFrom(const LogEntryBatchPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntryBatchPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryBatchPB::CopyFrom(const LogEntryBatchPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryBatchPB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void LogEntryBatchPB::Swap(LogEntryBatchPB* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntryBatchPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntryBatchPB_descriptor_;
  metadata.reflection = LogEntryBatchPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSegmentHeaderPB::kMajorVersionFieldNumber;
const int LogSegmentHeaderPB::kMinorVersionFieldNumber;
const int LogSegmentHeaderPB::kTabletIdFieldNumber;
const int LogSegmentHeaderPB::kSequenceNumberFieldNumber;
#endif  // !_MSC_VER

LogSegmentHeaderPB::LogSegmentHeaderPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.log.LogSegmentHeaderPB)
}

void LogSegmentHeaderPB::InitAsDefaultInstance() {
}

LogSegmentHeaderPB::LogSegmentHeaderPB(const LogSegmentHeaderPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.log.LogSegmentHeaderPB)
}

void LogSegmentHeaderPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  major_version_ = 0u;
  minor_version_ = 0u;
  tablet_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSegmentHeaderPB::~LogSegmentHeaderPB() {
  // @@protoc_insertion_point(destructor:base.log.LogSegmentHeaderPB)
  SharedDtor();
}

void LogSegmentHeaderPB::SharedDtor() {
  if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablet_id_;
  }
  if (this != default_instance_) {
  }
}

void LogSegmentHeaderPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSegmentHeaderPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSegmentHeaderPB_descriptor_;
}

const LogSegmentHeaderPB& LogSegmentHeaderPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto();
  return *default_instance_;
}

LogSegmentHeaderPB* LogSegmentHeaderPB::default_instance_ = NULL;

LogSegmentHeaderPB* LogSegmentHeaderPB::New() const {
  return new LogSegmentHeaderPB;
}

void LogSegmentHeaderPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogSegmentHeaderPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(major_version_, minor_version_);
    if (has_tablet_id()) {
      if (tablet_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablet_id_->clear();
      }
    }
    sequence_number_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSegmentHeaderPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.log.LogSegmentHeaderPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 major_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor_version;
        break;
      }

      // required uint32 minor_version = 2;
      case 2: {
        if (tag == 16) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tablet_id;
        break;
      }

      // required bytes tablet_id = 5;
      case 5: {
        if (tag == 42) {
         parse_tablet_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablet_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sequence_number;
        break;
      }

      // required uint64 sequence_number = 6;
      case 6: {
        if (tag == 48) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.log.LogSegmentHeaderPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.log.LogSegmentHeaderPB)
  return false;
#undef DO_
}

void LogSegmentHeaderPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.log.LogSegmentHeaderPB)
  // required uint32 major_version = 1;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major_version(), output);
  }

  // required uint32 minor_version = 2;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor_version(), output);
  }

  // required bytes tablet_id = 5;
  if (has_tablet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->tablet_id(), output);
  }

  // required uint64 sequence_number = 6;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sequence_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.log.LogSegmentHeaderPB)
}

::google::protobuf::uint8* LogSegmentHeaderPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.log.LogSegmentHeaderPB)
  // required uint32 major_version = 1;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major_version(), target);
  }

  // required uint32 minor_version = 2;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor_version(), target);
  }

  // required bytes tablet_id = 5;
  if (has_tablet_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->tablet_id(), target);
  }

  // required uint64 sequence_number = 6;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sequence_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.log.LogSegmentHeaderPB)
  return target;
}

int LogSegmentHeaderPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 major_version = 1;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major_version());
    }

    // required uint32 minor_version = 2;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_version());
    }

    // required bytes tablet_id = 5;
    if (has_tablet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablet_id());
    }

    // required uint64 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSegmentHeaderPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSegmentHeaderPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSegmentHeaderPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSegmentHeaderPB::MergeFrom(const LogSegmentHeaderPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_tablet_id()) {
      set_tablet_id(from.tablet_id());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSegmentHeaderPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSegmentHeaderPB::CopyFrom(const LogSegmentHeaderPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSegmentHeaderPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogSegmentHeaderPB::Swap(LogSegmentHeaderPB* other) {
  if (other != this) {
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(tablet_id_, other->tablet_id_);
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSegmentHeaderPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSegmentHeaderPB_descriptor_;
  metadata.reflection = LogSegmentHeaderPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogSegmentFooterPB::kNumEntriesFieldNumber;
const int LogSegmentFooterPB::kMinReplicateIndexFieldNumber;
const int LogSegmentFooterPB::kMaxReplicateIndexFieldNumber;
const int LogSegmentFooterPB::kCloseTimestampMicrosFieldNumber;
#endif  // !_MSC_VER

LogSegmentFooterPB::LogSegmentFooterPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.log.LogSegmentFooterPB)
}

void LogSegmentFooterPB::InitAsDefaultInstance() {
}

LogSegmentFooterPB::LogSegmentFooterPB(const LogSegmentFooterPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.log.LogSegmentFooterPB)
}

void LogSegmentFooterPB::SharedCtor() {
  _cached_size_ = 0;
  num_entries_ = GOOGLE_LONGLONG(0);
  min_replicate_index_ = GOOGLE_LONGLONG(-1);
  max_replicate_index_ = GOOGLE_LONGLONG(-1);
  close_timestamp_micros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogSegmentFooterPB::~LogSegmentFooterPB() {
  // @@protoc_insertion_point(destructor:base.log.LogSegmentFooterPB)
  SharedDtor();
}

void LogSegmentFooterPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogSegmentFooterPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSegmentFooterPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSegmentFooterPB_descriptor_;
}

const LogSegmentFooterPB& LogSegmentFooterPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2flog_2eproto();
  return *default_instance_;
}

LogSegmentFooterPB* LogSegmentFooterPB::default_instance_ = NULL;

LogSegmentFooterPB* LogSegmentFooterPB::New() const {
  return new LogSegmentFooterPB;
}

void LogSegmentFooterPB::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    num_entries_ = GOOGLE_LONGLONG(0);
    min_replicate_index_ = GOOGLE_LONGLONG(-1);
    max_replicate_index_ = GOOGLE_LONGLONG(-1);
    close_timestamp_micros_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogSegmentFooterPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.log.LogSegmentFooterPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 num_entries = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_replicate_index;
        break;
      }

      // optional int64 min_replicate_index = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_min_replicate_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_replicate_index_)));
          set_has_min_replicate_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_replicate_index;
        break;
      }

      // optional int64 max_replicate_index = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_max_replicate_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_replicate_index_)));
          set_has_max_replicate_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close_timestamp_micros;
        break;
      }

      // optional int64 close_timestamp_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_close_timestamp_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_timestamp_micros_)));
          set_has_close_timestamp_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.log.LogSegmentFooterPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.log.LogSegmentFooterPB)
  return false;
#undef DO_
}

void LogSegmentFooterPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.log.LogSegmentFooterPB)
  // required int64 num_entries = 1;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_entries(), output);
  }

  // optional int64 min_replicate_index = 2 [default = -1];
  if (has_min_replicate_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->min_replicate_index(), output);
  }

  // optional int64 max_replicate_index = 3 [default = -1];
  if (has_max_replicate_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_replicate_index(), output);
  }

  // optional int64 close_timestamp_micros = 4;
  if (has_close_timestamp_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->close_timestamp_micros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.log.LogSegmentFooterPB)
}

::google::protobuf::uint8* LogSegmentFooterPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.log.LogSegmentFooterPB)
  // required int64 num_entries = 1;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_entries(), target);
  }

  // optional int64 min_replicate_index = 2 [default = -1];
  if (has_min_replicate_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->min_replicate_index(), target);
  }

  // optional int64 max_replicate_index = 3 [default = -1];
  if (has_max_replicate_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_replicate_index(), target);
  }

  // optional int64 close_timestamp_micros = 4;
  if (has_close_timestamp_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->close_timestamp_micros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.log.LogSegmentFooterPB)
  return target;
}

int LogSegmentFooterPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 num_entries = 1;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_entries());
    }

    // optional int64 min_replicate_index = 2 [default = -1];
    if (has_min_replicate_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_replicate_index());
    }

    // optional int64 max_replicate_index = 3 [default = -1];
    if (has_max_replicate_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_replicate_index());
    }

    // optional int64 close_timestamp_micros = 4;
    if (has_close_timestamp_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->close_timestamp_micros());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSegmentFooterPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogSegmentFooterPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogSegmentFooterPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogSegmentFooterPB::MergeFrom(const LogSegmentFooterPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
    if (from.has_min_replicate_index()) {
      set_min_replicate_index(from.min_replicate_index());
    }
    if (from.has_max_replicate_index()) {
      set_max_replicate_index(from.max_replicate_index());
    }
    if (from.has_close_timestamp_micros()) {
      set_close_timestamp_micros(from.close_timestamp_micros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogSegmentFooterPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSegmentFooterPB::CopyFrom(const LogSegmentFooterPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSegmentFooterPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogSegmentFooterPB::Swap(LogSegmentFooterPB* other) {
  if (other != this) {
    std::swap(num_entries_, other->num_entries_);
    std::swap(min_replicate_index_, other->min_replicate_index_);
    std::swap(max_replicate_index_, other->max_replicate_index_);
    std::swap(close_timestamp_micros_, other->close_timestamp_micros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogSegmentFooterPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSegmentFooterPB_descriptor_;
  metadata.reflection = LogSegmentFooterPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace base

// @@protoc_insertion_point(global_scope)
