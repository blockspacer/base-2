// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/metadata.proto

#ifndef PROTOBUF_base_2fraft_2fproto_2fmetadata_2eproto__INCLUDED
#define PROTOBUF_base_2fraft_2fproto_2fmetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/common/common.pb.h"
// @@protoc_insertion_point(includes)

namespace base {
namespace consensus {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
void protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto();
void protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto();

class RaftPeerPB;
class RaftConfigPB;
class ConsensusStatePB;
class ConsensusMetadataPB;

enum RaftPeerPB_Role {
  RaftPeerPB_Role_UNKNOWN_ROLE = 999,
  RaftPeerPB_Role_FOLLOWER = 0,
  RaftPeerPB_Role_LEADER = 1,
  RaftPeerPB_Role_LEARNER = 2,
  RaftPeerPB_Role_NON_PARTICIPANT = 3
};
bool RaftPeerPB_Role_IsValid(int value);
const RaftPeerPB_Role RaftPeerPB_Role_Role_MIN = RaftPeerPB_Role_FOLLOWER;
const RaftPeerPB_Role RaftPeerPB_Role_Role_MAX = RaftPeerPB_Role_UNKNOWN_ROLE;
const int RaftPeerPB_Role_Role_ARRAYSIZE = RaftPeerPB_Role_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftPeerPB_Role_descriptor();
inline const ::std::string& RaftPeerPB_Role_Name(RaftPeerPB_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftPeerPB_Role_descriptor(), value);
}
inline bool RaftPeerPB_Role_Parse(
    const ::std::string& name, RaftPeerPB_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftPeerPB_Role>(
    RaftPeerPB_Role_descriptor(), name, value);
}
enum RaftPeerPB_MemberType {
  RaftPeerPB_MemberType_UNKNOWN_MEMBER_TYPE = 999,
  RaftPeerPB_MemberType_NON_VOTER = 0,
  RaftPeerPB_MemberType_VOTER = 1
};
bool RaftPeerPB_MemberType_IsValid(int value);
const RaftPeerPB_MemberType RaftPeerPB_MemberType_MemberType_MIN = RaftPeerPB_MemberType_NON_VOTER;
const RaftPeerPB_MemberType RaftPeerPB_MemberType_MemberType_MAX = RaftPeerPB_MemberType_UNKNOWN_MEMBER_TYPE;
const int RaftPeerPB_MemberType_MemberType_ARRAYSIZE = RaftPeerPB_MemberType_MemberType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftPeerPB_MemberType_descriptor();
inline const ::std::string& RaftPeerPB_MemberType_Name(RaftPeerPB_MemberType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftPeerPB_MemberType_descriptor(), value);
}
inline bool RaftPeerPB_MemberType_Parse(
    const ::std::string& name, RaftPeerPB_MemberType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftPeerPB_MemberType>(
    RaftPeerPB_MemberType_descriptor(), name, value);
}
enum ConsensusConfigType {
  CONSENSUS_CONFIG_UNKNOWN = 999,
  CONSENSUS_CONFIG_COMMITTED = 1,
  CONSENSUS_CONFIG_ACTIVE = 2
};
bool ConsensusConfigType_IsValid(int value);
const ConsensusConfigType ConsensusConfigType_MIN = CONSENSUS_CONFIG_COMMITTED;
const ConsensusConfigType ConsensusConfigType_MAX = CONSENSUS_CONFIG_UNKNOWN;
const int ConsensusConfigType_ARRAYSIZE = ConsensusConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConsensusConfigType_descriptor();
inline const ::std::string& ConsensusConfigType_Name(ConsensusConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConsensusConfigType_descriptor(), value);
}
inline bool ConsensusConfigType_Parse(
    const ::std::string& name, ConsensusConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConsensusConfigType>(
    ConsensusConfigType_descriptor(), name, value);
}
// ===================================================================

class RaftPeerPB : public ::google::protobuf::Message {
 public:
  RaftPeerPB();
  virtual ~RaftPeerPB();

  RaftPeerPB(const RaftPeerPB& from);

  inline RaftPeerPB& operator=(const RaftPeerPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftPeerPB& default_instance();

  void Swap(RaftPeerPB* other);

  // implements Message ----------------------------------------------

  RaftPeerPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftPeerPB& from);
  void MergeFrom(const RaftPeerPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RaftPeerPB_Role Role;
  static const Role UNKNOWN_ROLE = RaftPeerPB_Role_UNKNOWN_ROLE;
  static const Role FOLLOWER = RaftPeerPB_Role_FOLLOWER;
  static const Role LEADER = RaftPeerPB_Role_LEADER;
  static const Role LEARNER = RaftPeerPB_Role_LEARNER;
  static const Role NON_PARTICIPANT = RaftPeerPB_Role_NON_PARTICIPANT;
  static inline bool Role_IsValid(int value) {
    return RaftPeerPB_Role_IsValid(value);
  }
  static const Role Role_MIN =
    RaftPeerPB_Role_Role_MIN;
  static const Role Role_MAX =
    RaftPeerPB_Role_Role_MAX;
  static const int Role_ARRAYSIZE =
    RaftPeerPB_Role_Role_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Role_descriptor() {
    return RaftPeerPB_Role_descriptor();
  }
  static inline const ::std::string& Role_Name(Role value) {
    return RaftPeerPB_Role_Name(value);
  }
  static inline bool Role_Parse(const ::std::string& name,
      Role* value) {
    return RaftPeerPB_Role_Parse(name, value);
  }

  typedef RaftPeerPB_MemberType MemberType;
  static const MemberType UNKNOWN_MEMBER_TYPE = RaftPeerPB_MemberType_UNKNOWN_MEMBER_TYPE;
  static const MemberType NON_VOTER = RaftPeerPB_MemberType_NON_VOTER;
  static const MemberType VOTER = RaftPeerPB_MemberType_VOTER;
  static inline bool MemberType_IsValid(int value) {
    return RaftPeerPB_MemberType_IsValid(value);
  }
  static const MemberType MemberType_MIN =
    RaftPeerPB_MemberType_MemberType_MIN;
  static const MemberType MemberType_MAX =
    RaftPeerPB_MemberType_MemberType_MAX;
  static const int MemberType_ARRAYSIZE =
    RaftPeerPB_MemberType_MemberType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MemberType_descriptor() {
    return RaftPeerPB_MemberType_descriptor();
  }
  static inline const ::std::string& MemberType_Name(MemberType value) {
    return RaftPeerPB_MemberType_Name(value);
  }
  static inline bool MemberType_Parse(const ::std::string& name,
      MemberType* value) {
    return RaftPeerPB_MemberType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes permanent_uuid = 1;
  inline bool has_permanent_uuid() const;
  inline void clear_permanent_uuid();
  static const int kPermanentUuidFieldNumber = 1;
  inline const ::std::string& permanent_uuid() const;
  inline void set_permanent_uuid(const ::std::string& value);
  inline void set_permanent_uuid(const char* value);
  inline void set_permanent_uuid(const void* value, size_t size);
  inline ::std::string* mutable_permanent_uuid();
  inline ::std::string* release_permanent_uuid();
  inline void set_allocated_permanent_uuid(::std::string* permanent_uuid);

  // optional .base.consensus.RaftPeerPB.MemberType member_type = 2;
  inline bool has_member_type() const;
  inline void clear_member_type();
  static const int kMemberTypeFieldNumber = 2;
  inline ::base::consensus::RaftPeerPB_MemberType member_type() const;
  inline void set_member_type(::base::consensus::RaftPeerPB_MemberType value);

  // optional .base.HostPortPB last_known_addr = 3;
  inline bool has_last_known_addr() const;
  inline void clear_last_known_addr();
  static const int kLastKnownAddrFieldNumber = 3;
  inline const ::base::HostPortPB& last_known_addr() const;
  inline ::base::HostPortPB* mutable_last_known_addr();
  inline ::base::HostPortPB* release_last_known_addr();
  inline void set_allocated_last_known_addr(::base::HostPortPB* last_known_addr);

  // @@protoc_insertion_point(class_scope:base.consensus.RaftPeerPB)
 private:
  inline void set_has_permanent_uuid();
  inline void clear_has_permanent_uuid();
  inline void set_has_member_type();
  inline void clear_has_member_type();
  inline void set_has_last_known_addr();
  inline void clear_has_last_known_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* permanent_uuid_;
  ::base::HostPortPB* last_known_addr_;
  int member_type_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto();

  void InitAsDefaultInstance();
  static RaftPeerPB* default_instance_;
};
// -------------------------------------------------------------------

class RaftConfigPB : public ::google::protobuf::Message {
 public:
  RaftConfigPB();
  virtual ~RaftConfigPB();

  RaftConfigPB(const RaftConfigPB& from);

  inline RaftConfigPB& operator=(const RaftConfigPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftConfigPB& default_instance();

  void Swap(RaftConfigPB* other);

  // implements Message ----------------------------------------------

  RaftConfigPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftConfigPB& from);
  void MergeFrom(const RaftConfigPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 opid_index = 1;
  inline bool has_opid_index() const;
  inline void clear_opid_index();
  static const int kOpidIndexFieldNumber = 1;
  inline ::google::protobuf::int64 opid_index() const;
  inline void set_opid_index(::google::protobuf::int64 value);

  // optional bool OBSOLETE_local = 2;
  inline bool has_obsolete_local() const;
  inline void clear_obsolete_local();
  static const int kOBSOLETELocalFieldNumber = 2;
  inline bool obsolete_local() const;
  inline void set_obsolete_local(bool value);

  // repeated .base.consensus.RaftPeerPB peers = 3;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 3;
  inline const ::base::consensus::RaftPeerPB& peers(int index) const;
  inline ::base::consensus::RaftPeerPB* mutable_peers(int index);
  inline ::base::consensus::RaftPeerPB* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::base::consensus::RaftPeerPB >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::base::consensus::RaftPeerPB >*
      mutable_peers();

  // @@protoc_insertion_point(class_scope:base.consensus.RaftConfigPB)
 private:
  inline void set_has_opid_index();
  inline void clear_has_opid_index();
  inline void set_has_obsolete_local();
  inline void clear_has_obsolete_local();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 opid_index_;
  ::google::protobuf::RepeatedPtrField< ::base::consensus::RaftPeerPB > peers_;
  bool obsolete_local_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto();

  void InitAsDefaultInstance();
  static RaftConfigPB* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusStatePB : public ::google::protobuf::Message {
 public:
  ConsensusStatePB();
  virtual ~ConsensusStatePB();

  ConsensusStatePB(const ConsensusStatePB& from);

  inline ConsensusStatePB& operator=(const ConsensusStatePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusStatePB& default_instance();

  void Swap(ConsensusStatePB* other);

  // implements Message ----------------------------------------------

  ConsensusStatePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusStatePB& from);
  void MergeFrom(const ConsensusStatePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 current_term = 1;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 1;
  inline ::google::protobuf::int64 current_term() const;
  inline void set_current_term(::google::protobuf::int64 value);

  // optional string leader_uuid = 2;
  inline bool has_leader_uuid() const;
  inline void clear_leader_uuid();
  static const int kLeaderUuidFieldNumber = 2;
  inline const ::std::string& leader_uuid() const;
  inline void set_leader_uuid(const ::std::string& value);
  inline void set_leader_uuid(const char* value);
  inline void set_leader_uuid(const char* value, size_t size);
  inline ::std::string* mutable_leader_uuid();
  inline ::std::string* release_leader_uuid();
  inline void set_allocated_leader_uuid(::std::string* leader_uuid);

  // required .base.consensus.RaftConfigPB config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::base::consensus::RaftConfigPB& config() const;
  inline ::base::consensus::RaftConfigPB* mutable_config();
  inline ::base::consensus::RaftConfigPB* release_config();
  inline void set_allocated_config(::base::consensus::RaftConfigPB* config);

  // @@protoc_insertion_point(class_scope:base.consensus.ConsensusStatePB)
 private:
  inline void set_has_current_term();
  inline void clear_has_current_term();
  inline void set_has_leader_uuid();
  inline void clear_has_leader_uuid();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 current_term_;
  ::std::string* leader_uuid_;
  ::base::consensus::RaftConfigPB* config_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto();

  void InitAsDefaultInstance();
  static ConsensusStatePB* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusMetadataPB : public ::google::protobuf::Message {
 public:
  ConsensusMetadataPB();
  virtual ~ConsensusMetadataPB();

  ConsensusMetadataPB(const ConsensusMetadataPB& from);

  inline ConsensusMetadataPB& operator=(const ConsensusMetadataPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusMetadataPB& default_instance();

  void Swap(ConsensusMetadataPB* other);

  // implements Message ----------------------------------------------

  ConsensusMetadataPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusMetadataPB& from);
  void MergeFrom(const ConsensusMetadataPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .base.consensus.RaftConfigPB committed_config = 1;
  inline bool has_committed_config() const;
  inline void clear_committed_config();
  static const int kCommittedConfigFieldNumber = 1;
  inline const ::base::consensus::RaftConfigPB& committed_config() const;
  inline ::base::consensus::RaftConfigPB* mutable_committed_config();
  inline ::base::consensus::RaftConfigPB* release_committed_config();
  inline void set_allocated_committed_config(::base::consensus::RaftConfigPB* committed_config);

  // required int64 current_term = 2;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 2;
  inline ::google::protobuf::int64 current_term() const;
  inline void set_current_term(::google::protobuf::int64 value);

  // optional string voted_for = 3;
  inline bool has_voted_for() const;
  inline void clear_voted_for();
  static const int kVotedForFieldNumber = 3;
  inline const ::std::string& voted_for() const;
  inline void set_voted_for(const ::std::string& value);
  inline void set_voted_for(const char* value);
  inline void set_voted_for(const char* value, size_t size);
  inline ::std::string* mutable_voted_for();
  inline ::std::string* release_voted_for();
  inline void set_allocated_voted_for(::std::string* voted_for);

  // @@protoc_insertion_point(class_scope:base.consensus.ConsensusMetadataPB)
 private:
  inline void set_has_committed_config();
  inline void clear_has_committed_config();
  inline void set_has_current_term();
  inline void clear_has_current_term();
  inline void set_has_voted_for();
  inline void clear_has_voted_for();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::base::consensus::RaftConfigPB* committed_config_;
  ::google::protobuf::int64 current_term_;
  ::std::string* voted_for_;
  friend void  protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto();

  void InitAsDefaultInstance();
  static ConsensusMetadataPB* default_instance_;
};
// ===================================================================


// ===================================================================

// RaftPeerPB

// optional bytes permanent_uuid = 1;
inline bool RaftPeerPB::has_permanent_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftPeerPB::set_has_permanent_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftPeerPB::clear_has_permanent_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftPeerPB::clear_permanent_uuid() {
  if (permanent_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    permanent_uuid_->clear();
  }
  clear_has_permanent_uuid();
}
inline const ::std::string& RaftPeerPB::permanent_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.RaftPeerPB.permanent_uuid)
  return *permanent_uuid_;
}
inline void RaftPeerPB::set_permanent_uuid(const ::std::string& value) {
  set_has_permanent_uuid();
  if (permanent_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    permanent_uuid_ = new ::std::string;
  }
  permanent_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.RaftPeerPB.permanent_uuid)
}
inline void RaftPeerPB::set_permanent_uuid(const char* value) {
  set_has_permanent_uuid();
  if (permanent_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    permanent_uuid_ = new ::std::string;
  }
  permanent_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.RaftPeerPB.permanent_uuid)
}
inline void RaftPeerPB::set_permanent_uuid(const void* value, size_t size) {
  set_has_permanent_uuid();
  if (permanent_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    permanent_uuid_ = new ::std::string;
  }
  permanent_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.RaftPeerPB.permanent_uuid)
}
inline ::std::string* RaftPeerPB::mutable_permanent_uuid() {
  set_has_permanent_uuid();
  if (permanent_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    permanent_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.RaftPeerPB.permanent_uuid)
  return permanent_uuid_;
}
inline ::std::string* RaftPeerPB::release_permanent_uuid() {
  clear_has_permanent_uuid();
  if (permanent_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = permanent_uuid_;
    permanent_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RaftPeerPB::set_allocated_permanent_uuid(::std::string* permanent_uuid) {
  if (permanent_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete permanent_uuid_;
  }
  if (permanent_uuid) {
    set_has_permanent_uuid();
    permanent_uuid_ = permanent_uuid;
  } else {
    clear_has_permanent_uuid();
    permanent_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.RaftPeerPB.permanent_uuid)
}

// optional .base.consensus.RaftPeerPB.MemberType member_type = 2;
inline bool RaftPeerPB::has_member_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftPeerPB::set_has_member_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftPeerPB::clear_has_member_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftPeerPB::clear_member_type() {
  member_type_ = 999;
  clear_has_member_type();
}
inline ::base::consensus::RaftPeerPB_MemberType RaftPeerPB::member_type() const {
  // @@protoc_insertion_point(field_get:base.consensus.RaftPeerPB.member_type)
  return static_cast< ::base::consensus::RaftPeerPB_MemberType >(member_type_);
}
inline void RaftPeerPB::set_member_type(::base::consensus::RaftPeerPB_MemberType value) {
  assert(::base::consensus::RaftPeerPB_MemberType_IsValid(value));
  set_has_member_type();
  member_type_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.RaftPeerPB.member_type)
}

// optional .base.HostPortPB last_known_addr = 3;
inline bool RaftPeerPB::has_last_known_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftPeerPB::set_has_last_known_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftPeerPB::clear_has_last_known_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftPeerPB::clear_last_known_addr() {
  if (last_known_addr_ != NULL) last_known_addr_->::base::HostPortPB::Clear();
  clear_has_last_known_addr();
}
inline const ::base::HostPortPB& RaftPeerPB::last_known_addr() const {
  // @@protoc_insertion_point(field_get:base.consensus.RaftPeerPB.last_known_addr)
  return last_known_addr_ != NULL ? *last_known_addr_ : *default_instance_->last_known_addr_;
}
inline ::base::HostPortPB* RaftPeerPB::mutable_last_known_addr() {
  set_has_last_known_addr();
  if (last_known_addr_ == NULL) last_known_addr_ = new ::base::HostPortPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.RaftPeerPB.last_known_addr)
  return last_known_addr_;
}
inline ::base::HostPortPB* RaftPeerPB::release_last_known_addr() {
  clear_has_last_known_addr();
  ::base::HostPortPB* temp = last_known_addr_;
  last_known_addr_ = NULL;
  return temp;
}
inline void RaftPeerPB::set_allocated_last_known_addr(::base::HostPortPB* last_known_addr) {
  delete last_known_addr_;
  last_known_addr_ = last_known_addr;
  if (last_known_addr) {
    set_has_last_known_addr();
  } else {
    clear_has_last_known_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.RaftPeerPB.last_known_addr)
}

// -------------------------------------------------------------------

// RaftConfigPB

// optional int64 opid_index = 1;
inline bool RaftConfigPB::has_opid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftConfigPB::set_has_opid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftConfigPB::clear_has_opid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftConfigPB::clear_opid_index() {
  opid_index_ = GOOGLE_LONGLONG(0);
  clear_has_opid_index();
}
inline ::google::protobuf::int64 RaftConfigPB::opid_index() const {
  // @@protoc_insertion_point(field_get:base.consensus.RaftConfigPB.opid_index)
  return opid_index_;
}
inline void RaftConfigPB::set_opid_index(::google::protobuf::int64 value) {
  set_has_opid_index();
  opid_index_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.RaftConfigPB.opid_index)
}

// optional bool OBSOLETE_local = 2;
inline bool RaftConfigPB::has_obsolete_local() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftConfigPB::set_has_obsolete_local() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftConfigPB::clear_has_obsolete_local() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftConfigPB::clear_obsolete_local() {
  obsolete_local_ = false;
  clear_has_obsolete_local();
}
inline bool RaftConfigPB::obsolete_local() const {
  // @@protoc_insertion_point(field_get:base.consensus.RaftConfigPB.OBSOLETE_local)
  return obsolete_local_;
}
inline void RaftConfigPB::set_obsolete_local(bool value) {
  set_has_obsolete_local();
  obsolete_local_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.RaftConfigPB.OBSOLETE_local)
}

// repeated .base.consensus.RaftPeerPB peers = 3;
inline int RaftConfigPB::peers_size() const {
  return peers_.size();
}
inline void RaftConfigPB::clear_peers() {
  peers_.Clear();
}
inline const ::base::consensus::RaftPeerPB& RaftConfigPB::peers(int index) const {
  // @@protoc_insertion_point(field_get:base.consensus.RaftConfigPB.peers)
  return peers_.Get(index);
}
inline ::base::consensus::RaftPeerPB* RaftConfigPB::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:base.consensus.RaftConfigPB.peers)
  return peers_.Mutable(index);
}
inline ::base::consensus::RaftPeerPB* RaftConfigPB::add_peers() {
  // @@protoc_insertion_point(field_add:base.consensus.RaftConfigPB.peers)
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::base::consensus::RaftPeerPB >&
RaftConfigPB::peers() const {
  // @@protoc_insertion_point(field_list:base.consensus.RaftConfigPB.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::base::consensus::RaftPeerPB >*
RaftConfigPB::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:base.consensus.RaftConfigPB.peers)
  return &peers_;
}

// -------------------------------------------------------------------

// ConsensusStatePB

// required int64 current_term = 1;
inline bool ConsensusStatePB::has_current_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusStatePB::set_has_current_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusStatePB::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusStatePB::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::int64 ConsensusStatePB::current_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatePB.current_term)
  return current_term_;
}
inline void ConsensusStatePB::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusStatePB.current_term)
}

// optional string leader_uuid = 2;
inline bool ConsensusStatePB::has_leader_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusStatePB::set_has_leader_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusStatePB::clear_has_leader_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusStatePB::clear_leader_uuid() {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_->clear();
  }
  clear_has_leader_uuid();
}
inline const ::std::string& ConsensusStatePB::leader_uuid() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatePB.leader_uuid)
  return *leader_uuid_;
}
inline void ConsensusStatePB::set_leader_uuid(const ::std::string& value) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusStatePB.leader_uuid)
}
inline void ConsensusStatePB::set_leader_uuid(const char* value) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ConsensusStatePB.leader_uuid)
}
inline void ConsensusStatePB::set_leader_uuid(const char* value, size_t size) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ConsensusStatePB.leader_uuid)
}
inline ::std::string* ConsensusStatePB::mutable_leader_uuid() {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusStatePB.leader_uuid)
  return leader_uuid_;
}
inline ::std::string* ConsensusStatePB::release_leader_uuid() {
  clear_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_uuid_;
    leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsensusStatePB::set_allocated_leader_uuid(::std::string* leader_uuid) {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_uuid_;
  }
  if (leader_uuid) {
    set_has_leader_uuid();
    leader_uuid_ = leader_uuid;
  } else {
    clear_has_leader_uuid();
    leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusStatePB.leader_uuid)
}

// required .base.consensus.RaftConfigPB config = 3;
inline bool ConsensusStatePB::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusStatePB::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusStatePB::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusStatePB::clear_config() {
  if (config_ != NULL) config_->::base::consensus::RaftConfigPB::Clear();
  clear_has_config();
}
inline const ::base::consensus::RaftConfigPB& ConsensusStatePB::config() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusStatePB.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::base::consensus::RaftConfigPB* ConsensusStatePB::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::base::consensus::RaftConfigPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusStatePB.config)
  return config_;
}
inline ::base::consensus::RaftConfigPB* ConsensusStatePB::release_config() {
  clear_has_config();
  ::base::consensus::RaftConfigPB* temp = config_;
  config_ = NULL;
  return temp;
}
inline void ConsensusStatePB::set_allocated_config(::base::consensus::RaftConfigPB* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusStatePB.config)
}

// -------------------------------------------------------------------

// ConsensusMetadataPB

// required .base.consensus.RaftConfigPB committed_config = 1;
inline bool ConsensusMetadataPB::has_committed_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsensusMetadataPB::set_has_committed_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsensusMetadataPB::clear_has_committed_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsensusMetadataPB::clear_committed_config() {
  if (committed_config_ != NULL) committed_config_->::base::consensus::RaftConfigPB::Clear();
  clear_has_committed_config();
}
inline const ::base::consensus::RaftConfigPB& ConsensusMetadataPB::committed_config() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusMetadataPB.committed_config)
  return committed_config_ != NULL ? *committed_config_ : *default_instance_->committed_config_;
}
inline ::base::consensus::RaftConfigPB* ConsensusMetadataPB::mutable_committed_config() {
  set_has_committed_config();
  if (committed_config_ == NULL) committed_config_ = new ::base::consensus::RaftConfigPB;
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusMetadataPB.committed_config)
  return committed_config_;
}
inline ::base::consensus::RaftConfigPB* ConsensusMetadataPB::release_committed_config() {
  clear_has_committed_config();
  ::base::consensus::RaftConfigPB* temp = committed_config_;
  committed_config_ = NULL;
  return temp;
}
inline void ConsensusMetadataPB::set_allocated_committed_config(::base::consensus::RaftConfigPB* committed_config) {
  delete committed_config_;
  committed_config_ = committed_config;
  if (committed_config) {
    set_has_committed_config();
  } else {
    clear_has_committed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusMetadataPB.committed_config)
}

// required int64 current_term = 2;
inline bool ConsensusMetadataPB::has_current_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsensusMetadataPB::set_has_current_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsensusMetadataPB::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsensusMetadataPB::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::int64 ConsensusMetadataPB::current_term() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusMetadataPB.current_term)
  return current_term_;
}
inline void ConsensusMetadataPB::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusMetadataPB.current_term)
}

// optional string voted_for = 3;
inline bool ConsensusMetadataPB::has_voted_for() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConsensusMetadataPB::set_has_voted_for() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConsensusMetadataPB::clear_has_voted_for() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConsensusMetadataPB::clear_voted_for() {
  if (voted_for_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voted_for_->clear();
  }
  clear_has_voted_for();
}
inline const ::std::string& ConsensusMetadataPB::voted_for() const {
  // @@protoc_insertion_point(field_get:base.consensus.ConsensusMetadataPB.voted_for)
  return *voted_for_;
}
inline void ConsensusMetadataPB::set_voted_for(const ::std::string& value) {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voted_for_ = new ::std::string;
  }
  voted_for_->assign(value);
  // @@protoc_insertion_point(field_set:base.consensus.ConsensusMetadataPB.voted_for)
}
inline void ConsensusMetadataPB::set_voted_for(const char* value) {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voted_for_ = new ::std::string;
  }
  voted_for_->assign(value);
  // @@protoc_insertion_point(field_set_char:base.consensus.ConsensusMetadataPB.voted_for)
}
inline void ConsensusMetadataPB::set_voted_for(const char* value, size_t size) {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voted_for_ = new ::std::string;
  }
  voted_for_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.consensus.ConsensusMetadataPB.voted_for)
}
inline ::std::string* ConsensusMetadataPB::mutable_voted_for() {
  set_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voted_for_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:base.consensus.ConsensusMetadataPB.voted_for)
  return voted_for_;
}
inline ::std::string* ConsensusMetadataPB::release_voted_for() {
  clear_has_voted_for();
  if (voted_for_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voted_for_;
    voted_for_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConsensusMetadataPB::set_allocated_voted_for(::std::string* voted_for) {
  if (voted_for_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voted_for_;
  }
  if (voted_for) {
    set_has_voted_for();
    voted_for_ = voted_for;
  } else {
    clear_has_voted_for();
    voted_for_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:base.consensus.ConsensusMetadataPB.voted_for)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace base

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::base::consensus::RaftPeerPB_Role> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::RaftPeerPB_Role>() {
  return ::base::consensus::RaftPeerPB_Role_descriptor();
}
template <> struct is_proto_enum< ::base::consensus::RaftPeerPB_MemberType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::RaftPeerPB_MemberType>() {
  return ::base::consensus::RaftPeerPB_MemberType_descriptor();
}
template <> struct is_proto_enum< ::base::consensus::ConsensusConfigType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::base::consensus::ConsensusConfigType>() {
  return ::base::consensus::ConsensusConfigType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fraft_2fproto_2fmetadata_2eproto__INCLUDED
