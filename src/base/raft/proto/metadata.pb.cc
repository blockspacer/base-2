// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/raft/proto/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {
namespace consensus {

namespace {

const ::google::protobuf::Descriptor* RaftPeerPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftPeerPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RaftPeerPB_Role_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RaftPeerPB_MemberType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RaftConfigPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftConfigPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusStatePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusStatePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusMetadataPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusMetadataPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConsensusConfigType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto() {
  protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/raft/proto/metadata.proto");
  GOOGLE_CHECK(file != NULL);
  RaftPeerPB_descriptor_ = file->message_type(0);
  static const int RaftPeerPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, permanent_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, member_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, last_known_addr_),
  };
  RaftPeerPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftPeerPB_descriptor_,
      RaftPeerPB::default_instance_,
      RaftPeerPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftPeerPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftPeerPB));
  RaftPeerPB_Role_descriptor_ = RaftPeerPB_descriptor_->enum_type(0);
  RaftPeerPB_MemberType_descriptor_ = RaftPeerPB_descriptor_->enum_type(1);
  RaftConfigPB_descriptor_ = file->message_type(1);
  static const int RaftConfigPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, opid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, obsolete_local_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, peers_),
  };
  RaftConfigPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftConfigPB_descriptor_,
      RaftConfigPB::default_instance_,
      RaftConfigPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftConfigPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftConfigPB));
  ConsensusStatePB_descriptor_ = file->message_type(2);
  static const int ConsensusStatePB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, current_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, leader_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, config_),
  };
  ConsensusStatePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusStatePB_descriptor_,
      ConsensusStatePB::default_instance_,
      ConsensusStatePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusStatePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusStatePB));
  ConsensusMetadataPB_descriptor_ = file->message_type(3);
  static const int ConsensusMetadataPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, committed_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, current_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, voted_for_),
  };
  ConsensusMetadataPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsensusMetadataPB_descriptor_,
      ConsensusMetadataPB::default_instance_,
      ConsensusMetadataPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusMetadataPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsensusMetadataPB));
  ConsensusConfigType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fraft_2fproto_2fmetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftPeerPB_descriptor_, &RaftPeerPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftConfigPB_descriptor_, &RaftConfigPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusStatePB_descriptor_, &ConsensusStatePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsensusMetadataPB_descriptor_, &ConsensusMetadataPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto() {
  delete RaftPeerPB::default_instance_;
  delete RaftPeerPB_reflection_;
  delete RaftConfigPB::default_instance_;
  delete RaftConfigPB_reflection_;
  delete ConsensusStatePB::default_instance_;
  delete ConsensusStatePB_reflection_;
  delete ConsensusMetadataPB::default_instance_;
  delete ConsensusMetadataPB_reflection_;
}

void protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::base::protobuf_AddDesc_base_2fcommon_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036base/raft/proto/metadata.proto\022\016base.c"
    "onsensus\032\030base/common/common.proto\"\244\002\n\nR"
    "aftPeerPB\022\026\n\016permanent_uuid\030\001 \001(\014\022:\n\013mem"
    "ber_type\030\002 \001(\0162%.base.consensus.RaftPeer"
    "PB.MemberType\022)\n\017last_known_addr\030\003 \001(\0132\020"
    ".base.HostPortPB\"U\n\004Role\022\021\n\014UNKNOWN_ROLE"
    "\020\347\007\022\014\n\010FOLLOWER\020\000\022\n\n\006LEADER\020\001\022\013\n\007LEARNER"
    "\020\002\022\023\n\017NON_PARTICIPANT\020\003\"@\n\nMemberType\022\030\n"
    "\023UNKNOWN_MEMBER_TYPE\020\347\007\022\r\n\tNON_VOTER\020\000\022\t"
    "\n\005VOTER\020\001\"e\n\014RaftConfigPB\022\022\n\nopid_index\030"
    "\001 \001(\003\022\026\n\016OBSOLETE_local\030\002 \001(\010\022)\n\005peers\030\003"
    " \003(\0132\032.base.consensus.RaftPeerPB\"k\n\020Cons"
    "ensusStatePB\022\024\n\014current_term\030\001 \002(\003\022\023\n\013le"
    "ader_uuid\030\002 \001(\t\022,\n\006config\030\003 \002(\0132\034.base.c"
    "onsensus.RaftConfigPB\"v\n\023ConsensusMetada"
    "taPB\0226\n\020committed_config\030\001 \002(\0132\034.base.co"
    "nsensus.RaftConfigPB\022\024\n\014current_term\030\002 \002"
    "(\003\022\021\n\tvoted_for\030\003 \001(\t*q\n\023ConsensusConfig"
    "Type\022\035\n\030CONSENSUS_CONFIG_UNKNOWN\020\347\007\022\036\n\032C"
    "ONSENSUS_CONFIG_COMMITTED\020\001\022\033\n\027CONSENSUS"
    "_CONFIG_ACTIVE\020\002", 816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/raft/proto/metadata.proto", &protobuf_RegisterTypes);
  RaftPeerPB::default_instance_ = new RaftPeerPB();
  RaftConfigPB::default_instance_ = new RaftConfigPB();
  ConsensusStatePB::default_instance_ = new ConsensusStatePB();
  ConsensusMetadataPB::default_instance_ = new ConsensusMetadataPB();
  RaftPeerPB::default_instance_->InitAsDefaultInstance();
  RaftConfigPB::default_instance_->InitAsDefaultInstance();
  ConsensusStatePB::default_instance_->InitAsDefaultInstance();
  ConsensusMetadataPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fraft_2fproto_2fmetadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fraft_2fproto_2fmetadata_2eproto {
  StaticDescriptorInitializer_base_2fraft_2fproto_2fmetadata_2eproto() {
    protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  }
} static_descriptor_initializer_base_2fraft_2fproto_2fmetadata_2eproto_;
const ::google::protobuf::EnumDescriptor* ConsensusConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusConfigType_descriptor_;
}
bool ConsensusConfigType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RaftPeerPB_Role_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftPeerPB_Role_descriptor_;
}
bool RaftPeerPB_Role_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RaftPeerPB_Role RaftPeerPB::UNKNOWN_ROLE;
const RaftPeerPB_Role RaftPeerPB::FOLLOWER;
const RaftPeerPB_Role RaftPeerPB::LEADER;
const RaftPeerPB_Role RaftPeerPB::LEARNER;
const RaftPeerPB_Role RaftPeerPB::NON_PARTICIPANT;
const RaftPeerPB_Role RaftPeerPB::Role_MIN;
const RaftPeerPB_Role RaftPeerPB::Role_MAX;
const int RaftPeerPB::Role_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RaftPeerPB_MemberType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftPeerPB_MemberType_descriptor_;
}
bool RaftPeerPB_MemberType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RaftPeerPB_MemberType RaftPeerPB::UNKNOWN_MEMBER_TYPE;
const RaftPeerPB_MemberType RaftPeerPB::NON_VOTER;
const RaftPeerPB_MemberType RaftPeerPB::VOTER;
const RaftPeerPB_MemberType RaftPeerPB::MemberType_MIN;
const RaftPeerPB_MemberType RaftPeerPB::MemberType_MAX;
const int RaftPeerPB::MemberType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RaftPeerPB::kPermanentUuidFieldNumber;
const int RaftPeerPB::kMemberTypeFieldNumber;
const int RaftPeerPB::kLastKnownAddrFieldNumber;
#endif  // !_MSC_VER

RaftPeerPB::RaftPeerPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.RaftPeerPB)
}

void RaftPeerPB::InitAsDefaultInstance() {
  last_known_addr_ = const_cast< ::base::HostPortPB*>(&::base::HostPortPB::default_instance());
}

RaftPeerPB::RaftPeerPB(const RaftPeerPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.RaftPeerPB)
}

void RaftPeerPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  permanent_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_type_ = 999;
  last_known_addr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftPeerPB::~RaftPeerPB() {
  // @@protoc_insertion_point(destructor:base.consensus.RaftPeerPB)
  SharedDtor();
}

void RaftPeerPB::SharedDtor() {
  if (permanent_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete permanent_uuid_;
  }
  if (this != default_instance_) {
    delete last_known_addr_;
  }
}

void RaftPeerPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftPeerPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftPeerPB_descriptor_;
}

const RaftPeerPB& RaftPeerPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  return *default_instance_;
}

RaftPeerPB* RaftPeerPB::default_instance_ = NULL;

RaftPeerPB* RaftPeerPB::New() const {
  return new RaftPeerPB;
}

void RaftPeerPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_permanent_uuid()) {
      if (permanent_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        permanent_uuid_->clear();
      }
    }
    member_type_ = 999;
    if (has_last_known_addr()) {
      if (last_known_addr_ != NULL) last_known_addr_->::base::HostPortPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftPeerPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.RaftPeerPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes permanent_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_permanent_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_type;
        break;
      }

      // optional .base.consensus.RaftPeerPB.MemberType member_type = 2;
      case 2: {
        if (tag == 16) {
         parse_member_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::consensus::RaftPeerPB_MemberType_IsValid(value)) {
            set_member_type(static_cast< ::base::consensus::RaftPeerPB_MemberType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_last_known_addr;
        break;
      }

      // optional .base.HostPortPB last_known_addr = 3;
      case 3: {
        if (tag == 26) {
         parse_last_known_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_known_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.RaftPeerPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.RaftPeerPB)
  return false;
#undef DO_
}

void RaftPeerPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.RaftPeerPB)
  // optional bytes permanent_uuid = 1;
  if (has_permanent_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->permanent_uuid(), output);
  }

  // optional .base.consensus.RaftPeerPB.MemberType member_type = 2;
  if (has_member_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->member_type(), output);
  }

  // optional .base.HostPortPB last_known_addr = 3;
  if (has_last_known_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->last_known_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.RaftPeerPB)
}

::google::protobuf::uint8* RaftPeerPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.RaftPeerPB)
  // optional bytes permanent_uuid = 1;
  if (has_permanent_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->permanent_uuid(), target);
  }

  // optional .base.consensus.RaftPeerPB.MemberType member_type = 2;
  if (has_member_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->member_type(), target);
  }

  // optional .base.HostPortPB last_known_addr = 3;
  if (has_last_known_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->last_known_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.RaftPeerPB)
  return target;
}

int RaftPeerPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes permanent_uuid = 1;
    if (has_permanent_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->permanent_uuid());
    }

    // optional .base.consensus.RaftPeerPB.MemberType member_type = 2;
    if (has_member_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->member_type());
    }

    // optional .base.HostPortPB last_known_addr = 3;
    if (has_last_known_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_known_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftPeerPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftPeerPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftPeerPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftPeerPB::MergeFrom(const RaftPeerPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permanent_uuid()) {
      set_permanent_uuid(from.permanent_uuid());
    }
    if (from.has_member_type()) {
      set_member_type(from.member_type());
    }
    if (from.has_last_known_addr()) {
      mutable_last_known_addr()->::base::HostPortPB::MergeFrom(from.last_known_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftPeerPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftPeerPB::CopyFrom(const RaftPeerPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftPeerPB::IsInitialized() const {

  if (has_last_known_addr()) {
    if (!this->last_known_addr().IsInitialized()) return false;
  }
  return true;
}

void RaftPeerPB::Swap(RaftPeerPB* other) {
  if (other != this) {
    std::swap(permanent_uuid_, other->permanent_uuid_);
    std::swap(member_type_, other->member_type_);
    std::swap(last_known_addr_, other->last_known_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftPeerPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftPeerPB_descriptor_;
  metadata.reflection = RaftPeerPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftConfigPB::kOpidIndexFieldNumber;
const int RaftConfigPB::kOBSOLETELocalFieldNumber;
const int RaftConfigPB::kPeersFieldNumber;
#endif  // !_MSC_VER

RaftConfigPB::RaftConfigPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.RaftConfigPB)
}

void RaftConfigPB::InitAsDefaultInstance() {
}

RaftConfigPB::RaftConfigPB(const RaftConfigPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.RaftConfigPB)
}

void RaftConfigPB::SharedCtor() {
  _cached_size_ = 0;
  opid_index_ = GOOGLE_LONGLONG(0);
  obsolete_local_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftConfigPB::~RaftConfigPB() {
  // @@protoc_insertion_point(destructor:base.consensus.RaftConfigPB)
  SharedDtor();
}

void RaftConfigPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftConfigPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftConfigPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftConfigPB_descriptor_;
}

const RaftConfigPB& RaftConfigPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  return *default_instance_;
}

RaftConfigPB* RaftConfigPB::default_instance_ = NULL;

RaftConfigPB* RaftConfigPB::New() const {
  return new RaftConfigPB;
}

void RaftConfigPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    opid_index_ = GOOGLE_LONGLONG(0);
    obsolete_local_ = false;
  }
  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftConfigPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.RaftConfigPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 opid_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opid_index_)));
          set_has_opid_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OBSOLETE_local;
        break;
      }

      // optional bool OBSOLETE_local = 2;
      case 2: {
        if (tag == 16) {
         parse_OBSOLETE_local:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_local_)));
          set_has_obsolete_local();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        break;
      }

      // repeated .base.consensus.RaftPeerPB peers = 3;
      case 3: {
        if (tag == 26) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.RaftConfigPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.RaftConfigPB)
  return false;
#undef DO_
}

void RaftConfigPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.RaftConfigPB)
  // optional int64 opid_index = 1;
  if (has_opid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->opid_index(), output);
  }

  // optional bool OBSOLETE_local = 2;
  if (has_obsolete_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->obsolete_local(), output);
  }

  // repeated .base.consensus.RaftPeerPB peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->peers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.RaftConfigPB)
}

::google::protobuf::uint8* RaftConfigPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.RaftConfigPB)
  // optional int64 opid_index = 1;
  if (has_opid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->opid_index(), target);
  }

  // optional bool OBSOLETE_local = 2;
  if (has_obsolete_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->obsolete_local(), target);
  }

  // repeated .base.consensus.RaftPeerPB peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->peers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.RaftConfigPB)
  return target;
}

int RaftConfigPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 opid_index = 1;
    if (has_opid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opid_index());
    }

    // optional bool OBSOLETE_local = 2;
    if (has_obsolete_local()) {
      total_size += 1 + 1;
    }

  }
  // repeated .base.consensus.RaftPeerPB peers = 3;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftConfigPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftConfigPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftConfigPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftConfigPB::MergeFrom(const RaftConfigPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opid_index()) {
      set_opid_index(from.opid_index());
    }
    if (from.has_obsolete_local()) {
      set_obsolete_local(from.obsolete_local());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftConfigPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftConfigPB::CopyFrom(const RaftConfigPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftConfigPB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->peers())) return false;
  return true;
}

void RaftConfigPB::Swap(RaftConfigPB* other) {
  if (other != this) {
    std::swap(opid_index_, other->opid_index_);
    std::swap(obsolete_local_, other->obsolete_local_);
    peers_.Swap(&other->peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftConfigPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftConfigPB_descriptor_;
  metadata.reflection = RaftConfigPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusStatePB::kCurrentTermFieldNumber;
const int ConsensusStatePB::kLeaderUuidFieldNumber;
const int ConsensusStatePB::kConfigFieldNumber;
#endif  // !_MSC_VER

ConsensusStatePB::ConsensusStatePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ConsensusStatePB)
}

void ConsensusStatePB::InitAsDefaultInstance() {
  config_ = const_cast< ::base::consensus::RaftConfigPB*>(&::base::consensus::RaftConfigPB::default_instance());
}

ConsensusStatePB::ConsensusStatePB(const ConsensusStatePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ConsensusStatePB)
}

void ConsensusStatePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  current_term_ = GOOGLE_LONGLONG(0);
  leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusStatePB::~ConsensusStatePB() {
  // @@protoc_insertion_point(destructor:base.consensus.ConsensusStatePB)
  SharedDtor();
}

void ConsensusStatePB::SharedDtor() {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_uuid_;
  }
  if (this != default_instance_) {
    delete config_;
  }
}

void ConsensusStatePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusStatePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusStatePB_descriptor_;
}

const ConsensusStatePB& ConsensusStatePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  return *default_instance_;
}

ConsensusStatePB* ConsensusStatePB::default_instance_ = NULL;

ConsensusStatePB* ConsensusStatePB::New() const {
  return new ConsensusStatePB;
}

void ConsensusStatePB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    current_term_ = GOOGLE_LONGLONG(0);
    if (has_leader_uuid()) {
      if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_uuid_->clear();
      }
    }
    if (has_config()) {
      if (config_ != NULL) config_->::base::consensus::RaftConfigPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusStatePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ConsensusStatePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 current_term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_term_)));
          set_has_current_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_uuid;
        break;
      }

      // optional string leader_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_uuid().data(), this->leader_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // required .base.consensus.RaftConfigPB config = 3;
      case 3: {
        if (tag == 26) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ConsensusStatePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ConsensusStatePB)
  return false;
#undef DO_
}

void ConsensusStatePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ConsensusStatePB)
  // required int64 current_term = 1;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->current_term(), output);
  }

  // optional string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_uuid(), output);
  }

  // required .base.consensus.RaftConfigPB config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ConsensusStatePB)
}

::google::protobuf::uint8* ConsensusStatePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ConsensusStatePB)
  // required int64 current_term = 1;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->current_term(), target);
  }

  // optional string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_uuid(), target);
  }

  // required .base.consensus.RaftConfigPB config = 3;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ConsensusStatePB)
  return target;
}

int ConsensusStatePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 current_term = 1;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_term());
    }

    // optional string leader_uuid = 2;
    if (has_leader_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_uuid());
    }

    // required .base.consensus.RaftConfigPB config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusStatePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusStatePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusStatePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusStatePB::MergeFrom(const ConsensusStatePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
    if (from.has_leader_uuid()) {
      set_leader_uuid(from.leader_uuid());
    }
    if (from.has_config()) {
      mutable_config()->::base::consensus::RaftConfigPB::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusStatePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusStatePB::CopyFrom(const ConsensusStatePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStatePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void ConsensusStatePB::Swap(ConsensusStatePB* other) {
  if (other != this) {
    std::swap(current_term_, other->current_term_);
    std::swap(leader_uuid_, other->leader_uuid_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusStatePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusStatePB_descriptor_;
  metadata.reflection = ConsensusStatePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsensusMetadataPB::kCommittedConfigFieldNumber;
const int ConsensusMetadataPB::kCurrentTermFieldNumber;
const int ConsensusMetadataPB::kVotedForFieldNumber;
#endif  // !_MSC_VER

ConsensusMetadataPB::ConsensusMetadataPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.consensus.ConsensusMetadataPB)
}

void ConsensusMetadataPB::InitAsDefaultInstance() {
  committed_config_ = const_cast< ::base::consensus::RaftConfigPB*>(&::base::consensus::RaftConfigPB::default_instance());
}

ConsensusMetadataPB::ConsensusMetadataPB(const ConsensusMetadataPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.consensus.ConsensusMetadataPB)
}

void ConsensusMetadataPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  committed_config_ = NULL;
  current_term_ = GOOGLE_LONGLONG(0);
  voted_for_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsensusMetadataPB::~ConsensusMetadataPB() {
  // @@protoc_insertion_point(destructor:base.consensus.ConsensusMetadataPB)
  SharedDtor();
}

void ConsensusMetadataPB::SharedDtor() {
  if (voted_for_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voted_for_;
  }
  if (this != default_instance_) {
    delete committed_config_;
  }
}

void ConsensusMetadataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusMetadataPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusMetadataPB_descriptor_;
}

const ConsensusMetadataPB& ConsensusMetadataPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fmetadata_2eproto();
  return *default_instance_;
}

ConsensusMetadataPB* ConsensusMetadataPB::default_instance_ = NULL;

ConsensusMetadataPB* ConsensusMetadataPB::New() const {
  return new ConsensusMetadataPB;
}

void ConsensusMetadataPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_committed_config()) {
      if (committed_config_ != NULL) committed_config_->::base::consensus::RaftConfigPB::Clear();
    }
    current_term_ = GOOGLE_LONGLONG(0);
    if (has_voted_for()) {
      if (voted_for_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voted_for_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsensusMetadataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.consensus.ConsensusMetadataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.consensus.RaftConfigPB committed_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_committed_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_term;
        break;
      }

      // required int64 current_term = 2;
      case 2: {
        if (tag == 16) {
         parse_current_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_term_)));
          set_has_current_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voted_for;
        break;
      }

      // optional string voted_for = 3;
      case 3: {
        if (tag == 26) {
         parse_voted_for:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voted_for()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voted_for().data(), this->voted_for().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voted_for");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.consensus.ConsensusMetadataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.consensus.ConsensusMetadataPB)
  return false;
#undef DO_
}

void ConsensusMetadataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.consensus.ConsensusMetadataPB)
  // required .base.consensus.RaftConfigPB committed_config = 1;
  if (has_committed_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->committed_config(), output);
  }

  // required int64 current_term = 2;
  if (has_current_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current_term(), output);
  }

  // optional string voted_for = 3;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voted_for().data(), this->voted_for().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voted_for");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->voted_for(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.consensus.ConsensusMetadataPB)
}

::google::protobuf::uint8* ConsensusMetadataPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.consensus.ConsensusMetadataPB)
  // required .base.consensus.RaftConfigPB committed_config = 1;
  if (has_committed_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->committed_config(), target);
  }

  // required int64 current_term = 2;
  if (has_current_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->current_term(), target);
  }

  // optional string voted_for = 3;
  if (has_voted_for()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voted_for().data(), this->voted_for().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voted_for");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voted_for(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.consensus.ConsensusMetadataPB)
  return target;
}

int ConsensusMetadataPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.consensus.RaftConfigPB committed_config = 1;
    if (has_committed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->committed_config());
    }

    // required int64 current_term = 2;
    if (has_current_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->current_term());
    }

    // optional string voted_for = 3;
    if (has_voted_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voted_for());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusMetadataPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsensusMetadataPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsensusMetadataPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsensusMetadataPB::MergeFrom(const ConsensusMetadataPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_committed_config()) {
      mutable_committed_config()->::base::consensus::RaftConfigPB::MergeFrom(from.committed_config());
    }
    if (from.has_current_term()) {
      set_current_term(from.current_term());
    }
    if (from.has_voted_for()) {
      set_voted_for(from.voted_for());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsensusMetadataPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusMetadataPB::CopyFrom(const ConsensusMetadataPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusMetadataPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_committed_config()) {
    if (!this->committed_config().IsInitialized()) return false;
  }
  return true;
}

void ConsensusMetadataPB::Swap(ConsensusMetadataPB* other) {
  if (other != this) {
    std::swap(committed_config_, other->committed_config_);
    std::swap(current_term_, other->current_term_);
    std::swap(voted_for_, other->voted_for_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsensusMetadataPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusMetadataPB_descriptor_;
  metadata.reflection = ConsensusMetadataPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace consensus
}  // namespace base

// @@protoc_insertion_point(global_scope)
