// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/raft/proto/raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/raft/proto/raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {
namespace raft {
namespace raft {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleConfigurationPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleConfigurationPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntryPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesResponsePB_ServerCapabilities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesResponsePB_ServerCapabilities_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallSnapshotRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallSnapshotRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallSnapshotResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallSnapshotResponsePB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EntryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto() {
  protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/raft/proto/raft.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[1] = {
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  ServerPB_descriptor_ = file->message_type(1);
  static const int ServerPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPB, addresses_),
  };
  ServerPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPB_descriptor_,
      ServerPB::default_instance_,
      ServerPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPB));
  SimpleConfigurationPB_descriptor_ = file->message_type(2);
  static const int SimpleConfigurationPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleConfigurationPB, servers_),
  };
  SimpleConfigurationPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleConfigurationPB_descriptor_,
      SimpleConfigurationPB::default_instance_,
      SimpleConfigurationPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleConfigurationPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleConfigurationPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleConfigurationPB));
  ConfigurationPB_descriptor_ = file->message_type(3);
  static const int ConfigurationPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationPB, prev_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationPB, next_configuration_),
  };
  ConfigurationPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationPB_descriptor_,
      ConfigurationPB::default_instance_,
      ConfigurationPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationPB));
  EntryPB_descriptor_ = file->message_type(4);
  static const int EntryPB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, cluster_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, data_),
  };
  EntryPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryPB_descriptor_,
      EntryPB::default_instance_,
      EntryPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryPB));
  RequestVoteRequestPB_descriptor_ = file->message_type(5);
  static const int RequestVoteRequestPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequestPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequestPB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequestPB, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequestPB, last_log_index_),
  };
  RequestVoteRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVoteRequestPB_descriptor_,
      RequestVoteRequestPB::default_instance_,
      RequestVoteRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVoteRequestPB));
  RequestVoteResponsePB_descriptor_ = file->message_type(6);
  static const int RequestVoteResponsePB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponsePB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponsePB, granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponsePB, log_ok_),
  };
  RequestVoteResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVoteResponsePB_descriptor_,
      RequestVoteResponsePB::default_instance_,
      RequestVoteResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVoteResponsePB));
  AppendEntriesRequestPB_descriptor_ = file->message_type(7);
  static const int AppendEntriesRequestPB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, prev_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, commit_index_),
  };
  AppendEntriesRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesRequestPB_descriptor_,
      AppendEntriesRequestPB::default_instance_,
      AppendEntriesRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesRequestPB));
  AppendEntriesResponsePB_descriptor_ = file->message_type(8);
  static const int AppendEntriesResponsePB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB, server_capabilities_),
  };
  AppendEntriesResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesResponsePB_descriptor_,
      AppendEntriesResponsePB::default_instance_,
      AppendEntriesResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesResponsePB));
  AppendEntriesResponsePB_ServerCapabilities_descriptor_ = AppendEntriesResponsePB_descriptor_->nested_type(0);
  static const int AppendEntriesResponsePB_ServerCapabilities_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB_ServerCapabilities, min_supported_state_machine_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB_ServerCapabilities, max_supported_state_machine_version_),
  };
  AppendEntriesResponsePB_ServerCapabilities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesResponsePB_ServerCapabilities_descriptor_,
      AppendEntriesResponsePB_ServerCapabilities::default_instance_,
      AppendEntriesResponsePB_ServerCapabilities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB_ServerCapabilities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesResponsePB_ServerCapabilities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesResponsePB_ServerCapabilities));
  InstallSnapshotRequestPB_descriptor_ = file->message_type(9);
  static const int InstallSnapshotRequestPB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, last_snapshot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, byte_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, version_),
  };
  InstallSnapshotRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallSnapshotRequestPB_descriptor_,
      InstallSnapshotRequestPB::default_instance_,
      InstallSnapshotRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallSnapshotRequestPB));
  InstallSnapshotResponsePB_descriptor_ = file->message_type(10);
  static const int InstallSnapshotResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponsePB, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponsePB, bytes_stored_),
  };
  InstallSnapshotResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallSnapshotResponsePB_descriptor_,
      InstallSnapshotResponsePB::default_instance_,
      InstallSnapshotResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallSnapshotResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallSnapshotResponsePB));
  OpCode_descriptor_ = file->enum_type(0);
  EntryType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fraft_2fproto_2fraft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPB_descriptor_, &ServerPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleConfigurationPB_descriptor_, &SimpleConfigurationPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationPB_descriptor_, &ConfigurationPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryPB_descriptor_, &EntryPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVoteRequestPB_descriptor_, &RequestVoteRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVoteResponsePB_descriptor_, &RequestVoteResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesRequestPB_descriptor_, &AppendEntriesRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesResponsePB_descriptor_, &AppendEntriesResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesResponsePB_ServerCapabilities_descriptor_, &AppendEntriesResponsePB_ServerCapabilities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallSnapshotRequestPB_descriptor_, &InstallSnapshotRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallSnapshotResponsePB_descriptor_, &InstallSnapshotResponsePB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete ServerPB::default_instance_;
  delete ServerPB_reflection_;
  delete SimpleConfigurationPB::default_instance_;
  delete SimpleConfigurationPB_reflection_;
  delete ConfigurationPB::default_instance_;
  delete ConfigurationPB_reflection_;
  delete EntryPB::default_instance_;
  delete EntryPB_reflection_;
  delete RequestVoteRequestPB::default_instance_;
  delete RequestVoteRequestPB_reflection_;
  delete RequestVoteResponsePB::default_instance_;
  delete RequestVoteResponsePB_reflection_;
  delete AppendEntriesRequestPB::default_instance_;
  delete AppendEntriesRequestPB_reflection_;
  delete AppendEntriesResponsePB::default_instance_;
  delete AppendEntriesResponsePB_reflection_;
  delete AppendEntriesResponsePB_ServerCapabilities::default_instance_;
  delete AppendEntriesResponsePB_ServerCapabilities_reflection_;
  delete InstallSnapshotRequestPB::default_instance_;
  delete InstallSnapshotRequestPB_reflection_;
  delete InstallSnapshotResponsePB::default_instance_;
  delete InstallSnapshotResponsePB_reflection_;
}

void protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032base/raft/proto/raft.proto\022\016base.raft."
    "raft\"\007\n\005Error\"0\n\010ServerPB\022\021\n\tserver_id\030\001"
    " \002(\004\022\021\n\taddresses\030\002 \002(\t\"B\n\025SimpleConfigu"
    "rationPB\022)\n\007servers\030\001 \003(\0132\030.base.raft.ra"
    "ft.ServerPB\"\227\001\n\017ConfigurationPB\022A\n\022prev_"
    "configuration\030\001 \002(\0132%.base.raft.raft.Sim"
    "pleConfigurationPB\022A\n\022next_configuration"
    "\030\002 \001(\0132%.base.raft.raft.SimpleConfigurat"
    "ionPB\"\253\001\n\007EntryPB\022\014\n\004term\030\001 \002(\004\022\r\n\005index"
    "\030\005 \001(\004\022\024\n\014cluster_time\030\006 \002(\004\022\'\n\004type\030\002 \001"
    "(\0162\031.base.raft.raft.EntryType\0226\n\rconfigu"
    "ration\030\003 \001(\0132\037.base.raft.raft.Configurat"
    "ionPB\022\014\n\004data\030\004 \001(\014\"f\n\024RequestVoteReques"
    "tPB\022\021\n\tserver_id\030\001 \002(\004\022\014\n\004term\030\002 \002(\004\022\025\n\r"
    "last_log_term\030\003 \002(\004\022\026\n\016last_log_index\030\004 "
    "\002(\004\"F\n\025RequestVoteResponsePB\022\014\n\004term\030\001 \002"
    "(\004\022\017\n\007granted\030\002 \002(\010\022\016\n\006log_ok\030\003 \001(\010\"\250\001\n\026"
    "AppendEntriesRequestPB\022\021\n\tserver_id\030\001 \002("
    "\004\022\014\n\004term\030\002 \002(\004\022\026\n\016prev_log_index\030\003 \002(\004\022"
    "\025\n\rprev_log_term\030\004 \002(\004\022(\n\007entries\030\005 \003(\0132"
    "\027.base.raft.raft.EntryPB\022\024\n\014commit_index"
    "\030\006 \002(\004\"\231\002\n\027AppendEntriesResponsePB\022\014\n\004te"
    "rm\030\001 \002(\004\022\017\n\007success\030\002 \002(\010\022\026\n\016last_log_in"
    "dex\030\003 \001(\004\022W\n\023server_capabilities\030\004 \001(\0132:"
    ".base.raft.raft.AppendEntriesResponsePB."
    "ServerCapabilities\032n\n\022ServerCapabilities"
    "\022+\n#min_supported_state_machine_version\030"
    "\001 \001(\r\022+\n#max_supported_state_machine_ver"
    "sion\030\002 \001(\r\"\232\001\n\030InstallSnapshotRequestPB\022"
    "\021\n\tserver_id\030\001 \002(\004\022\014\n\004term\030\003 \002(\004\022\033\n\023last"
    "_snapshot_index\030\004 \002(\004\022\023\n\013byte_offset\030\005 \002"
    "(\004\022\014\n\004data\030\006 \002(\014\022\014\n\004done\030\007 \002(\010\022\017\n\007versio"
    "n\030\010 \001(\r\"\?\n\031InstallSnapshotResponsePB\022\014\n\004"
    "term\030\001 \002(\004\022\024\n\014bytes_stored\030\002 \001(\004*D\n\006OpCo"
    "de\022\020\n\014REQUEST_VOTE\020\001\022\022\n\016APPEND_ENTRIES\020\002"
    "\022\024\n\020INSTALL_SNAPSHOT\020\003*\?\n\tEntryType\022\013\n\007U"
    "NKNOWN\020\000\022\021\n\rCONFIGURATION\020\001\022\010\n\004DATA\020\002\022\010\n"
    "\004NOOP\020\003", 1487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/raft/proto/raft.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  ServerPB::default_instance_ = new ServerPB();
  SimpleConfigurationPB::default_instance_ = new SimpleConfigurationPB();
  ConfigurationPB::default_instance_ = new ConfigurationPB();
  EntryPB::default_instance_ = new EntryPB();
  RequestVoteRequestPB::default_instance_ = new RequestVoteRequestPB();
  RequestVoteResponsePB::default_instance_ = new RequestVoteResponsePB();
  AppendEntriesRequestPB::default_instance_ = new AppendEntriesRequestPB();
  AppendEntriesResponsePB::default_instance_ = new AppendEntriesResponsePB();
  AppendEntriesResponsePB_ServerCapabilities::default_instance_ = new AppendEntriesResponsePB_ServerCapabilities();
  InstallSnapshotRequestPB::default_instance_ = new InstallSnapshotRequestPB();
  InstallSnapshotResponsePB::default_instance_ = new InstallSnapshotResponsePB();
  Error::default_instance_->InitAsDefaultInstance();
  ServerPB::default_instance_->InitAsDefaultInstance();
  SimpleConfigurationPB::default_instance_->InitAsDefaultInstance();
  ConfigurationPB::default_instance_->InitAsDefaultInstance();
  EntryPB::default_instance_->InitAsDefaultInstance();
  RequestVoteRequestPB::default_instance_->InitAsDefaultInstance();
  RequestVoteResponsePB::default_instance_->InitAsDefaultInstance();
  AppendEntriesRequestPB::default_instance_->InitAsDefaultInstance();
  AppendEntriesResponsePB::default_instance_->InitAsDefaultInstance();
  AppendEntriesResponsePB_ServerCapabilities::default_instance_->InitAsDefaultInstance();
  InstallSnapshotRequestPB::default_instance_->InitAsDefaultInstance();
  InstallSnapshotResponsePB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fraft_2fproto_2fraft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fraft_2fproto_2fraft_2eproto {
  StaticDescriptorInitializer_base_2fraft_2fproto_2fraft_2eproto() {
    protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  }
} static_descriptor_initializer_base_2fraft_2fproto_2fraft_2eproto_;
const ::google::protobuf::EnumDescriptor* OpCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpCode_descriptor_;
}
bool OpCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryType_descriptor_;
}
bool EntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:base.raft.raft.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.Error)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.Error)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPB::kServerIdFieldNumber;
const int ServerPB::kAddressesFieldNumber;
#endif  // !_MSC_VER

ServerPB::ServerPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.ServerPB)
}

void ServerPB::InitAsDefaultInstance() {
}

ServerPB::ServerPB(const ServerPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.ServerPB)
}

void ServerPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  addresses_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPB::~ServerPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.ServerPB)
  SharedDtor();
}

void ServerPB::SharedDtor() {
  if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addresses_;
  }
  if (this != default_instance_) {
  }
}

void ServerPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPB_descriptor_;
}

const ServerPB& ServerPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

ServerPB* ServerPB::default_instance_ = NULL;

ServerPB* ServerPB::New() const {
  return new ServerPB;
}

void ServerPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    server_id_ = GOOGLE_ULONGLONG(0);
    if (has_addresses()) {
      if (addresses_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addresses_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.ServerPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addresses;
        break;
      }

      // required string addresses = 2;
      case 2: {
        if (tag == 18) {
         parse_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addresses().data(), this->addresses().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addresses");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.ServerPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.ServerPB)
  return false;
#undef DO_
}

void ServerPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.ServerPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addresses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.ServerPB)
}

::google::protobuf::uint8* ServerPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.ServerPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required string addresses = 2;
  if (has_addresses()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addresses().data(), this->addresses().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addresses");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addresses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.ServerPB)
  return target;
}

int ServerPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required string addresses = 2;
    if (has_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addresses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPB::MergeFrom(const ServerPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_addresses()) {
      set_addresses(from.addresses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPB::CopyFrom(const ServerPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerPB::Swap(ServerPB* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(addresses_, other->addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPB_descriptor_;
  metadata.reflection = ServerPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleConfigurationPB::kServersFieldNumber;
#endif  // !_MSC_VER

SimpleConfigurationPB::SimpleConfigurationPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.SimpleConfigurationPB)
}

void SimpleConfigurationPB::InitAsDefaultInstance() {
}

SimpleConfigurationPB::SimpleConfigurationPB(const SimpleConfigurationPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.SimpleConfigurationPB)
}

void SimpleConfigurationPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleConfigurationPB::~SimpleConfigurationPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.SimpleConfigurationPB)
  SharedDtor();
}

void SimpleConfigurationPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleConfigurationPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleConfigurationPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleConfigurationPB_descriptor_;
}

const SimpleConfigurationPB& SimpleConfigurationPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

SimpleConfigurationPB* SimpleConfigurationPB::default_instance_ = NULL;

SimpleConfigurationPB* SimpleConfigurationPB::New() const {
  return new SimpleConfigurationPB;
}

void SimpleConfigurationPB::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleConfigurationPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.SimpleConfigurationPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .base.raft.raft.ServerPB servers = 1;
      case 1: {
        if (tag == 10) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.SimpleConfigurationPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.SimpleConfigurationPB)
  return false;
#undef DO_
}

void SimpleConfigurationPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.SimpleConfigurationPB)
  // repeated .base.raft.raft.ServerPB servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.SimpleConfigurationPB)
}

::google::protobuf::uint8* SimpleConfigurationPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.SimpleConfigurationPB)
  // repeated .base.raft.raft.ServerPB servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.SimpleConfigurationPB)
  return target;
}

int SimpleConfigurationPB::ByteSize() const {
  int total_size = 0;

  // repeated .base.raft.raft.ServerPB servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleConfigurationPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleConfigurationPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleConfigurationPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleConfigurationPB::MergeFrom(const SimpleConfigurationPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleConfigurationPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleConfigurationPB::CopyFrom(const SimpleConfigurationPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleConfigurationPB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void SimpleConfigurationPB::Swap(SimpleConfigurationPB* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleConfigurationPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleConfigurationPB_descriptor_;
  metadata.reflection = SimpleConfigurationPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationPB::kPrevConfigurationFieldNumber;
const int ConfigurationPB::kNextConfigurationFieldNumber;
#endif  // !_MSC_VER

ConfigurationPB::ConfigurationPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.ConfigurationPB)
}

void ConfigurationPB::InitAsDefaultInstance() {
  prev_configuration_ = const_cast< ::base::raft::raft::SimpleConfigurationPB*>(&::base::raft::raft::SimpleConfigurationPB::default_instance());
  next_configuration_ = const_cast< ::base::raft::raft::SimpleConfigurationPB*>(&::base::raft::raft::SimpleConfigurationPB::default_instance());
}

ConfigurationPB::ConfigurationPB(const ConfigurationPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.ConfigurationPB)
}

void ConfigurationPB::SharedCtor() {
  _cached_size_ = 0;
  prev_configuration_ = NULL;
  next_configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationPB::~ConfigurationPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.ConfigurationPB)
  SharedDtor();
}

void ConfigurationPB::SharedDtor() {
  if (this != default_instance_) {
    delete prev_configuration_;
    delete next_configuration_;
  }
}

void ConfigurationPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationPB_descriptor_;
}

const ConfigurationPB& ConfigurationPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

ConfigurationPB* ConfigurationPB::default_instance_ = NULL;

ConfigurationPB* ConfigurationPB::New() const {
  return new ConfigurationPB;
}

void ConfigurationPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_prev_configuration()) {
      if (prev_configuration_ != NULL) prev_configuration_->::base::raft::raft::SimpleConfigurationPB::Clear();
    }
    if (has_next_configuration()) {
      if (next_configuration_ != NULL) next_configuration_->::base::raft::raft::SimpleConfigurationPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.ConfigurationPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.raft.raft.SimpleConfigurationPB prev_configuration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_next_configuration;
        break;
      }

      // optional .base.raft.raft.SimpleConfigurationPB next_configuration = 2;
      case 2: {
        if (tag == 18) {
         parse_next_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.ConfigurationPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.ConfigurationPB)
  return false;
#undef DO_
}

void ConfigurationPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.ConfigurationPB)
  // required .base.raft.raft.SimpleConfigurationPB prev_configuration = 1;
  if (has_prev_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prev_configuration(), output);
  }

  // optional .base.raft.raft.SimpleConfigurationPB next_configuration = 2;
  if (has_next_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->next_configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.ConfigurationPB)
}

::google::protobuf::uint8* ConfigurationPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.ConfigurationPB)
  // required .base.raft.raft.SimpleConfigurationPB prev_configuration = 1;
  if (has_prev_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prev_configuration(), target);
  }

  // optional .base.raft.raft.SimpleConfigurationPB next_configuration = 2;
  if (has_next_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->next_configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.ConfigurationPB)
  return target;
}

int ConfigurationPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.raft.raft.SimpleConfigurationPB prev_configuration = 1;
    if (has_prev_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_configuration());
    }

    // optional .base.raft.raft.SimpleConfigurationPB next_configuration = 2;
    if (has_next_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationPB::MergeFrom(const ConfigurationPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prev_configuration()) {
      mutable_prev_configuration()->::base::raft::raft::SimpleConfigurationPB::MergeFrom(from.prev_configuration());
    }
    if (from.has_next_configuration()) {
      mutable_next_configuration()->::base::raft::raft::SimpleConfigurationPB::MergeFrom(from.next_configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationPB::CopyFrom(const ConfigurationPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_prev_configuration()) {
    if (!this->prev_configuration().IsInitialized()) return false;
  }
  if (has_next_configuration()) {
    if (!this->next_configuration().IsInitialized()) return false;
  }
  return true;
}

void ConfigurationPB::Swap(ConfigurationPB* other) {
  if (other != this) {
    std::swap(prev_configuration_, other->prev_configuration_);
    std::swap(next_configuration_, other->next_configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationPB_descriptor_;
  metadata.reflection = ConfigurationPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntryPB::kTermFieldNumber;
const int EntryPB::kIndexFieldNumber;
const int EntryPB::kClusterTimeFieldNumber;
const int EntryPB::kTypeFieldNumber;
const int EntryPB::kConfigurationFieldNumber;
const int EntryPB::kDataFieldNumber;
#endif  // !_MSC_VER

EntryPB::EntryPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.EntryPB)
}

void EntryPB::InitAsDefaultInstance() {
  configuration_ = const_cast< ::base::raft::raft::ConfigurationPB*>(&::base::raft::raft::ConfigurationPB::default_instance());
}

EntryPB::EntryPB(const EntryPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.EntryPB)
}

void EntryPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  cluster_time_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  configuration_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryPB::~EntryPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.EntryPB)
  SharedDtor();
}

void EntryPB::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete configuration_;
  }
}

void EntryPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryPB_descriptor_;
}

const EntryPB& EntryPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

EntryPB* EntryPB::default_instance_ = NULL;

EntryPB* EntryPB::New() const {
  return new EntryPB;
}

void EntryPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EntryPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(term_, cluster_time_);
    type_ = 0;
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::base::raft::raft::ConfigurationPB::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.EntryPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .base.raft.raft.EntryType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::raft::raft::EntryType_IsValid(value)) {
            set_type(static_cast< ::base::raft::raft::EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_configuration;
        break;
      }

      // optional .base.raft.raft.ConfigurationPB configuration = 3;
      case 3: {
        if (tag == 26) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint64 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cluster_time;
        break;
      }

      // required uint64 cluster_time = 6;
      case 6: {
        if (tag == 48) {
         parse_cluster_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_time_)));
          set_has_cluster_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.EntryPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.EntryPB)
  return false;
#undef DO_
}

void EntryPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.EntryPB)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional .base.raft.raft.EntryType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .base.raft.raft.ConfigurationPB configuration = 3;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configuration(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint64 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->index(), output);
  }

  // required uint64 cluster_time = 6;
  if (has_cluster_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cluster_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.EntryPB)
}

::google::protobuf::uint8* EntryPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.EntryPB)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional .base.raft.raft.EntryType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .base.raft.raft.ConfigurationPB configuration = 3;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configuration(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint64 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->index(), target);
  }

  // required uint64 cluster_time = 6;
  if (has_cluster_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cluster_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.EntryPB)
  return target;
}

int EntryPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // required uint64 cluster_time = 6;
    if (has_cluster_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cluster_time());
    }

    // optional .base.raft.raft.EntryType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .base.raft.raft.ConfigurationPB configuration = 3;
    if (has_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryPB::MergeFrom(const EntryPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cluster_time()) {
      set_cluster_time(from.cluster_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::base::raft::raft::ConfigurationPB::MergeFrom(from.configuration());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryPB::CopyFrom(const EntryPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  return true;
}

void EntryPB::Swap(EntryPB* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(index_, other->index_);
    std::swap(cluster_time_, other->cluster_time_);
    std::swap(type_, other->type_);
    std::swap(configuration_, other->configuration_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryPB_descriptor_;
  metadata.reflection = EntryPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVoteRequestPB::kServerIdFieldNumber;
const int RequestVoteRequestPB::kTermFieldNumber;
const int RequestVoteRequestPB::kLastLogTermFieldNumber;
const int RequestVoteRequestPB::kLastLogIndexFieldNumber;
#endif  // !_MSC_VER

RequestVoteRequestPB::RequestVoteRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.RequestVoteRequestPB)
}

void RequestVoteRequestPB::InitAsDefaultInstance() {
}

RequestVoteRequestPB::RequestVoteRequestPB(const RequestVoteRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.RequestVoteRequestPB)
}

void RequestVoteRequestPB::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  last_log_term_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVoteRequestPB::~RequestVoteRequestPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.RequestVoteRequestPB)
  SharedDtor();
}

void RequestVoteRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVoteRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteRequestPB_descriptor_;
}

const RequestVoteRequestPB& RequestVoteRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

RequestVoteRequestPB* RequestVoteRequestPB::default_instance_ = NULL;

RequestVoteRequestPB* RequestVoteRequestPB::New() const {
  return new RequestVoteRequestPB;
}

void RequestVoteRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVoteRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(server_id_, last_log_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVoteRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.RequestVoteRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_term;
        break;
      }

      // required uint64 last_log_term = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_log_index;
        break;
      }

      // required uint64 last_log_index = 4;
      case 4: {
        if (tag == 32) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.RequestVoteRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.RequestVoteRequestPB)
  return false;
#undef DO_
}

void RequestVoteRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.RequestVoteRequestPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // required uint64 last_log_term = 3;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_term(), output);
  }

  // required uint64 last_log_index = 4;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.RequestVoteRequestPB)
}

::google::protobuf::uint8* RequestVoteRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.RequestVoteRequestPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // required uint64 last_log_term = 3;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_term(), target);
  }

  // required uint64 last_log_index = 4;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.RequestVoteRequestPB)
  return target;
}

int RequestVoteRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 last_log_term = 3;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

    // required uint64 last_log_index = 4;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVoteRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVoteRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVoteRequestPB::MergeFrom(const RequestVoteRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVoteRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRequestPB::CopyFrom(const RequestVoteRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestVoteRequestPB::Swap(RequestVoteRequestPB* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(term_, other->term_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVoteRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteRequestPB_descriptor_;
  metadata.reflection = RequestVoteRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVoteResponsePB::kTermFieldNumber;
const int RequestVoteResponsePB::kGrantedFieldNumber;
const int RequestVoteResponsePB::kLogOkFieldNumber;
#endif  // !_MSC_VER

RequestVoteResponsePB::RequestVoteResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.RequestVoteResponsePB)
}

void RequestVoteResponsePB::InitAsDefaultInstance() {
}

RequestVoteResponsePB::RequestVoteResponsePB(const RequestVoteResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.RequestVoteResponsePB)
}

void RequestVoteResponsePB::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  granted_ = false;
  log_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVoteResponsePB::~RequestVoteResponsePB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.RequestVoteResponsePB)
  SharedDtor();
}

void RequestVoteResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVoteResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteResponsePB_descriptor_;
}

const RequestVoteResponsePB& RequestVoteResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

RequestVoteResponsePB* RequestVoteResponsePB::default_instance_ = NULL;

RequestVoteResponsePB* RequestVoteResponsePB::New() const {
  return new RequestVoteResponsePB;
}

void RequestVoteResponsePB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVoteResponsePB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, log_ok_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVoteResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.RequestVoteResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_granted;
        break;
      }

      // required bool granted = 2;
      case 2: {
        if (tag == 16) {
         parse_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &granted_)));
          set_has_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_ok;
        break;
      }

      // optional bool log_ok = 3;
      case 3: {
        if (tag == 24) {
         parse_log_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_ok_)));
          set_has_log_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.RequestVoteResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.RequestVoteResponsePB)
  return false;
#undef DO_
}

void RequestVoteResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.RequestVoteResponsePB)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool granted = 2;
  if (has_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->granted(), output);
  }

  // optional bool log_ok = 3;
  if (has_log_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->log_ok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.RequestVoteResponsePB)
}

::google::protobuf::uint8* RequestVoteResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.RequestVoteResponsePB)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool granted = 2;
  if (has_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->granted(), target);
  }

  // optional bool log_ok = 3;
  if (has_log_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->log_ok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.RequestVoteResponsePB)
  return target;
}

int RequestVoteResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool granted = 2;
    if (has_granted()) {
      total_size += 1 + 1;
    }

    // optional bool log_ok = 3;
    if (has_log_ok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVoteResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVoteResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVoteResponsePB::MergeFrom(const RequestVoteResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_granted()) {
      set_granted(from.granted());
    }
    if (from.has_log_ok()) {
      set_log_ok(from.log_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVoteResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResponsePB::CopyFrom(const RequestVoteResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestVoteResponsePB::Swap(RequestVoteResponsePB* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(granted_, other->granted_);
    std::swap(log_ok_, other->log_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVoteResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteResponsePB_descriptor_;
  metadata.reflection = RequestVoteResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesRequestPB::kServerIdFieldNumber;
const int AppendEntriesRequestPB::kTermFieldNumber;
const int AppendEntriesRequestPB::kPrevLogIndexFieldNumber;
const int AppendEntriesRequestPB::kPrevLogTermFieldNumber;
const int AppendEntriesRequestPB::kEntriesFieldNumber;
const int AppendEntriesRequestPB::kCommitIndexFieldNumber;
#endif  // !_MSC_VER

AppendEntriesRequestPB::AppendEntriesRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.AppendEntriesRequestPB)
}

void AppendEntriesRequestPB::InitAsDefaultInstance() {
}

AppendEntriesRequestPB::AppendEntriesRequestPB(const AppendEntriesRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.AppendEntriesRequestPB)
}

void AppendEntriesRequestPB::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  commit_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesRequestPB::~AppendEntriesRequestPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.AppendEntriesRequestPB)
  SharedDtor();
}

void AppendEntriesRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesRequestPB_descriptor_;
}

const AppendEntriesRequestPB& AppendEntriesRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesRequestPB* AppendEntriesRequestPB::default_instance_ = NULL;

AppendEntriesRequestPB* AppendEntriesRequestPB::New() const {
  return new AppendEntriesRequestPB;
}

void AppendEntriesRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(server_id_, prev_log_term_);
    commit_index_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.AppendEntriesRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // required uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prev_log_index;
        break;
      }

      // required uint64 prev_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_prev_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
          set_has_prev_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_term;
        break;
      }

      // required uint64 prev_log_term = 4;
      case 4: {
        if (tag == 32) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        break;
      }

      // repeated .base.raft.raft.EntryPB entries = 5;
      case 5: {
        if (tag == 42) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        if (input->ExpectTag(48)) goto parse_commit_index;
        break;
      }

      // required uint64 commit_index = 6;
      case 6: {
        if (tag == 48) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.AppendEntriesRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.AppendEntriesRequestPB)
  return false;
#undef DO_
}

void AppendEntriesRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.AppendEntriesRequestPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // required uint64 prev_log_index = 3;
  if (has_prev_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prev_log_index(), output);
  }

  // required uint64 prev_log_term = 4;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_term(), output);
  }

  // repeated .base.raft.raft.EntryPB entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries(i), output);
  }

  // required uint64 commit_index = 6;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commit_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.AppendEntriesRequestPB)
}

::google::protobuf::uint8* AppendEntriesRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.AppendEntriesRequestPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // required uint64 prev_log_index = 3;
  if (has_prev_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prev_log_index(), target);
  }

  // required uint64 prev_log_term = 4;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_term(), target);
  }

  // repeated .base.raft.raft.EntryPB entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries(i), target);
  }

  // required uint64 commit_index = 6;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commit_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.AppendEntriesRequestPB)
  return target;
}

int AppendEntriesRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 prev_log_index = 3;
    if (has_prev_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_index());
    }

    // required uint64 prev_log_term = 4;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_term());
    }

    // required uint64 commit_index = 6;
    if (has_commit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commit_index());
    }

  }
  // repeated .base.raft.raft.EntryPB entries = 5;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesRequestPB::MergeFrom(const AppendEntriesRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_prev_log_index()) {
      set_prev_log_index(from.prev_log_index());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequestPB::CopyFrom(const AppendEntriesRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void AppendEntriesRequestPB::Swap(AppendEntriesRequestPB* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(term_, other->term_);
    std::swap(prev_log_index_, other->prev_log_index_);
    std::swap(prev_log_term_, other->prev_log_term_);
    entries_.Swap(&other->entries_);
    std::swap(commit_index_, other->commit_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesRequestPB_descriptor_;
  metadata.reflection = AppendEntriesRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesResponsePB_ServerCapabilities::kMinSupportedStateMachineVersionFieldNumber;
const int AppendEntriesResponsePB_ServerCapabilities::kMaxSupportedStateMachineVersionFieldNumber;
#endif  // !_MSC_VER

AppendEntriesResponsePB_ServerCapabilities::AppendEntriesResponsePB_ServerCapabilities()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
}

void AppendEntriesResponsePB_ServerCapabilities::InitAsDefaultInstance() {
}

AppendEntriesResponsePB_ServerCapabilities::AppendEntriesResponsePB_ServerCapabilities(const AppendEntriesResponsePB_ServerCapabilities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
}

void AppendEntriesResponsePB_ServerCapabilities::SharedCtor() {
  _cached_size_ = 0;
  min_supported_state_machine_version_ = 0u;
  max_supported_state_machine_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesResponsePB_ServerCapabilities::~AppendEntriesResponsePB_ServerCapabilities() {
  // @@protoc_insertion_point(destructor:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  SharedDtor();
}

void AppendEntriesResponsePB_ServerCapabilities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesResponsePB_ServerCapabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponsePB_ServerCapabilities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesResponsePB_ServerCapabilities_descriptor_;
}

const AppendEntriesResponsePB_ServerCapabilities& AppendEntriesResponsePB_ServerCapabilities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesResponsePB_ServerCapabilities* AppendEntriesResponsePB_ServerCapabilities::default_instance_ = NULL;

AppendEntriesResponsePB_ServerCapabilities* AppendEntriesResponsePB_ServerCapabilities::New() const {
  return new AppendEntriesResponsePB_ServerCapabilities;
}

void AppendEntriesResponsePB_ServerCapabilities::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesResponsePB_ServerCapabilities*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_supported_state_machine_version_, max_supported_state_machine_version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesResponsePB_ServerCapabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_supported_state_machine_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_supported_state_machine_version_)));
          set_has_min_supported_state_machine_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_supported_state_machine_version;
        break;
      }

      // optional uint32 max_supported_state_machine_version = 2;
      case 2: {
        if (tag == 16) {
         parse_max_supported_state_machine_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_supported_state_machine_version_)));
          set_has_max_supported_state_machine_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  return false;
#undef DO_
}

void AppendEntriesResponsePB_ServerCapabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  // optional uint32 min_supported_state_machine_version = 1;
  if (has_min_supported_state_machine_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_supported_state_machine_version(), output);
  }

  // optional uint32 max_supported_state_machine_version = 2;
  if (has_max_supported_state_machine_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_supported_state_machine_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
}

::google::protobuf::uint8* AppendEntriesResponsePB_ServerCapabilities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  // optional uint32 min_supported_state_machine_version = 1;
  if (has_min_supported_state_machine_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_supported_state_machine_version(), target);
  }

  // optional uint32 max_supported_state_machine_version = 2;
  if (has_max_supported_state_machine_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_supported_state_machine_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.AppendEntriesResponsePB.ServerCapabilities)
  return target;
}

int AppendEntriesResponsePB_ServerCapabilities::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 min_supported_state_machine_version = 1;
    if (has_min_supported_state_machine_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_supported_state_machine_version());
    }

    // optional uint32 max_supported_state_machine_version = 2;
    if (has_max_supported_state_machine_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_supported_state_machine_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponsePB_ServerCapabilities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesResponsePB_ServerCapabilities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesResponsePB_ServerCapabilities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesResponsePB_ServerCapabilities::MergeFrom(const AppendEntriesResponsePB_ServerCapabilities& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_supported_state_machine_version()) {
      set_min_supported_state_machine_version(from.min_supported_state_machine_version());
    }
    if (from.has_max_supported_state_machine_version()) {
      set_max_supported_state_machine_version(from.max_supported_state_machine_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesResponsePB_ServerCapabilities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponsePB_ServerCapabilities::CopyFrom(const AppendEntriesResponsePB_ServerCapabilities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponsePB_ServerCapabilities::IsInitialized() const {

  return true;
}

void AppendEntriesResponsePB_ServerCapabilities::Swap(AppendEntriesResponsePB_ServerCapabilities* other) {
  if (other != this) {
    std::swap(min_supported_state_machine_version_, other->min_supported_state_machine_version_);
    std::swap(max_supported_state_machine_version_, other->max_supported_state_machine_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesResponsePB_ServerCapabilities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesResponsePB_ServerCapabilities_descriptor_;
  metadata.reflection = AppendEntriesResponsePB_ServerCapabilities_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AppendEntriesResponsePB::kTermFieldNumber;
const int AppendEntriesResponsePB::kSuccessFieldNumber;
const int AppendEntriesResponsePB::kLastLogIndexFieldNumber;
const int AppendEntriesResponsePB::kServerCapabilitiesFieldNumber;
#endif  // !_MSC_VER

AppendEntriesResponsePB::AppendEntriesResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.AppendEntriesResponsePB)
}

void AppendEntriesResponsePB::InitAsDefaultInstance() {
  server_capabilities_ = const_cast< ::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities*>(&::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities::default_instance());
}

AppendEntriesResponsePB::AppendEntriesResponsePB(const AppendEntriesResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.AppendEntriesResponsePB)
}

void AppendEntriesResponsePB::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  last_log_index_ = GOOGLE_ULONGLONG(0);
  server_capabilities_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesResponsePB::~AppendEntriesResponsePB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.AppendEntriesResponsePB)
  SharedDtor();
}

void AppendEntriesResponsePB::SharedDtor() {
  if (this != default_instance_) {
    delete server_capabilities_;
  }
}

void AppendEntriesResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesResponsePB_descriptor_;
}

const AppendEntriesResponsePB& AppendEntriesResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

AppendEntriesResponsePB* AppendEntriesResponsePB::default_instance_ = NULL;

AppendEntriesResponsePB* AppendEntriesResponsePB::New() const {
  return new AppendEntriesResponsePB;
}

void AppendEntriesResponsePB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesResponsePB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(term_, last_log_index_);
    success_ = false;
    if (has_server_capabilities()) {
      if (server_capabilities_ != NULL) server_capabilities_->::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.AppendEntriesResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_capabilities;
        break;
      }

      // optional .base.raft.raft.AppendEntriesResponsePB.ServerCapabilities server_capabilities = 4;
      case 4: {
        if (tag == 34) {
         parse_server_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.AppendEntriesResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.AppendEntriesResponsePB)
  return false;
#undef DO_
}

void AppendEntriesResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.AppendEntriesResponsePB)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_index(), output);
  }

  // optional .base.raft.raft.AppendEntriesResponsePB.ServerCapabilities server_capabilities = 4;
  if (has_server_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->server_capabilities(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.AppendEntriesResponsePB)
}

::google::protobuf::uint8* AppendEntriesResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.AppendEntriesResponsePB)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_index(), target);
  }

  // optional .base.raft.raft.AppendEntriesResponsePB.ServerCapabilities server_capabilities = 4;
  if (has_server_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->server_capabilities(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.AppendEntriesResponsePB)
  return target;
}

int AppendEntriesResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_log_index = 3;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // optional .base.raft.raft.AppendEntriesResponsePB.ServerCapabilities server_capabilities = 4;
    if (has_server_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_capabilities());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesResponsePB::MergeFrom(const AppendEntriesResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_server_capabilities()) {
      mutable_server_capabilities()->::base::raft::raft::AppendEntriesResponsePB_ServerCapabilities::MergeFrom(from.server_capabilities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponsePB::CopyFrom(const AppendEntriesResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppendEntriesResponsePB::Swap(AppendEntriesResponsePB* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(last_log_index_, other->last_log_index_);
    std::swap(server_capabilities_, other->server_capabilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesResponsePB_descriptor_;
  metadata.reflection = AppendEntriesResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallSnapshotRequestPB::kServerIdFieldNumber;
const int InstallSnapshotRequestPB::kTermFieldNumber;
const int InstallSnapshotRequestPB::kLastSnapshotIndexFieldNumber;
const int InstallSnapshotRequestPB::kByteOffsetFieldNumber;
const int InstallSnapshotRequestPB::kDataFieldNumber;
const int InstallSnapshotRequestPB::kDoneFieldNumber;
const int InstallSnapshotRequestPB::kVersionFieldNumber;
#endif  // !_MSC_VER

InstallSnapshotRequestPB::InstallSnapshotRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.InstallSnapshotRequestPB)
}

void InstallSnapshotRequestPB::InitAsDefaultInstance() {
}

InstallSnapshotRequestPB::InstallSnapshotRequestPB(const InstallSnapshotRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.InstallSnapshotRequestPB)
}

void InstallSnapshotRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
  byte_offset_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallSnapshotRequestPB::~InstallSnapshotRequestPB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.InstallSnapshotRequestPB)
  SharedDtor();
}

void InstallSnapshotRequestPB::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void InstallSnapshotRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallSnapshotRequestPB_descriptor_;
}

const InstallSnapshotRequestPB& InstallSnapshotRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

InstallSnapshotRequestPB* InstallSnapshotRequestPB::default_instance_ = NULL;

InstallSnapshotRequestPB* InstallSnapshotRequestPB::New() const {
  return new InstallSnapshotRequestPB;
}

void InstallSnapshotRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstallSnapshotRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(server_id_, byte_offset_);
    ZR_(done_, version_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallSnapshotRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.InstallSnapshotRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // required uint64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_snapshot_index;
        break;
      }

      // required uint64 last_snapshot_index = 4;
      case 4: {
        if (tag == 32) {
         parse_last_snapshot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_snapshot_index_)));
          set_has_last_snapshot_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_byte_offset;
        break;
      }

      // required uint64 byte_offset = 5;
      case 5: {
        if (tag == 40) {
         parse_byte_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &byte_offset_)));
          set_has_byte_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // required bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_done;
        break;
      }

      // required bool done = 7;
      case 7: {
        if (tag == 56) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional uint32 version = 8;
      case 8: {
        if (tag == 64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.InstallSnapshotRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.InstallSnapshotRequestPB)
  return false;
#undef DO_
}

void InstallSnapshotRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.InstallSnapshotRequestPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->server_id(), output);
  }

  // required uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // required uint64 last_snapshot_index = 4;
  if (has_last_snapshot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_snapshot_index(), output);
  }

  // required uint64 byte_offset = 5;
  if (has_byte_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->byte_offset(), output);
  }

  // required bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // required bool done = 7;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->done(), output);
  }

  // optional uint32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.InstallSnapshotRequestPB)
}

::google::protobuf::uint8* InstallSnapshotRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.InstallSnapshotRequestPB)
  // required uint64 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->server_id(), target);
  }

  // required uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // required uint64 last_snapshot_index = 4;
  if (has_last_snapshot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_snapshot_index(), target);
  }

  // required uint64 byte_offset = 5;
  if (has_byte_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->byte_offset(), target);
  }

  // required bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // required bool done = 7;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->done(), target);
  }

  // optional uint32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.InstallSnapshotRequestPB)
  return target;
}

int InstallSnapshotRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // required uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 last_snapshot_index = 4;
    if (has_last_snapshot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_snapshot_index());
    }

    // required uint64 byte_offset = 5;
    if (has_byte_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->byte_offset());
    }

    // required bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bool done = 7;
    if (has_done()) {
      total_size += 1 + 1;
    }

    // optional uint32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallSnapshotRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallSnapshotRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallSnapshotRequestPB::MergeFrom(const InstallSnapshotRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_last_snapshot_index()) {
      set_last_snapshot_index(from.last_snapshot_index());
    }
    if (from.has_byte_offset()) {
      set_byte_offset(from.byte_offset());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallSnapshotRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotRequestPB::CopyFrom(const InstallSnapshotRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void InstallSnapshotRequestPB::Swap(InstallSnapshotRequestPB* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(term_, other->term_);
    std::swap(last_snapshot_index_, other->last_snapshot_index_);
    std::swap(byte_offset_, other->byte_offset_);
    std::swap(data_, other->data_);
    std::swap(done_, other->done_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallSnapshotRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallSnapshotRequestPB_descriptor_;
  metadata.reflection = InstallSnapshotRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallSnapshotResponsePB::kTermFieldNumber;
const int InstallSnapshotResponsePB::kBytesStoredFieldNumber;
#endif  // !_MSC_VER

InstallSnapshotResponsePB::InstallSnapshotResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.raft.raft.InstallSnapshotResponsePB)
}

void InstallSnapshotResponsePB::InitAsDefaultInstance() {
}

InstallSnapshotResponsePB::InstallSnapshotResponsePB(const InstallSnapshotResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.raft.raft.InstallSnapshotResponsePB)
}

void InstallSnapshotResponsePB::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  bytes_stored_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallSnapshotResponsePB::~InstallSnapshotResponsePB() {
  // @@protoc_insertion_point(destructor:base.raft.raft.InstallSnapshotResponsePB)
  SharedDtor();
}

void InstallSnapshotResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstallSnapshotResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallSnapshotResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallSnapshotResponsePB_descriptor_;
}

const InstallSnapshotResponsePB& InstallSnapshotResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2fraft_2fproto_2fraft_2eproto();
  return *default_instance_;
}

InstallSnapshotResponsePB* InstallSnapshotResponsePB::default_instance_ = NULL;

InstallSnapshotResponsePB* InstallSnapshotResponsePB::New() const {
  return new InstallSnapshotResponsePB;
}

void InstallSnapshotResponsePB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstallSnapshotResponsePB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, bytes_stored_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallSnapshotResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.raft.raft.InstallSnapshotResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytes_stored;
        break;
      }

      // optional uint64 bytes_stored = 2;
      case 2: {
        if (tag == 16) {
         parse_bytes_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_stored_)));
          set_has_bytes_stored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.raft.raft.InstallSnapshotResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.raft.raft.InstallSnapshotResponsePB)
  return false;
#undef DO_
}

void InstallSnapshotResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.raft.raft.InstallSnapshotResponsePB)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional uint64 bytes_stored = 2;
  if (has_bytes_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_stored(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.raft.raft.InstallSnapshotResponsePB)
}

::google::protobuf::uint8* InstallSnapshotResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.raft.raft.InstallSnapshotResponsePB)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional uint64 bytes_stored = 2;
  if (has_bytes_stored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_stored(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.raft.raft.InstallSnapshotResponsePB)
  return target;
}

int InstallSnapshotResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 bytes_stored = 2;
    if (has_bytes_stored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_stored());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallSnapshotResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallSnapshotResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallSnapshotResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallSnapshotResponsePB::MergeFrom(const InstallSnapshotResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_bytes_stored()) {
      set_bytes_stored(from.bytes_stored());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallSnapshotResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallSnapshotResponsePB::CopyFrom(const InstallSnapshotResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstallSnapshotResponsePB::Swap(InstallSnapshotResponsePB* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(bytes_stored_, other->bytes_stored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallSnapshotResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallSnapshotResponsePB_descriptor_;
  metadata.reflection = InstallSnapshotResponsePB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft
}  // namespace raft
}  // namespace base

// @@protoc_insertion_point(global_scope)
