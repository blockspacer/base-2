// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/fs/fs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/fs/fs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {

namespace {

const ::google::protobuf::Descriptor* InstanceMetadataPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceMetadataPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathSetPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathSetPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathInstanceMetadataPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathInstanceMetadataPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockIdPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockIdPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockRecordPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockRecordPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockRecordType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2ffs_2ffs_2eproto() {
  protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/fs/fs.proto");
  GOOGLE_CHECK(file != NULL);
  InstanceMetadataPB_descriptor_ = file->message_type(0);
  static const int InstanceMetadataPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMetadataPB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMetadataPB, format_stamp_),
  };
  InstanceMetadataPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceMetadataPB_descriptor_,
      InstanceMetadataPB::default_instance_,
      InstanceMetadataPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMetadataPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMetadataPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceMetadataPB));
  PathSetPB_descriptor_ = file->message_type(1);
  static const int PathSetPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSetPB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSetPB, all_uuids_),
  };
  PathSetPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathSetPB_descriptor_,
      PathSetPB::default_instance_,
      PathSetPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSetPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSetPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathSetPB));
  PathInstanceMetadataPB_descriptor_ = file->message_type(2);
  static const int PathInstanceMetadataPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInstanceMetadataPB, path_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInstanceMetadataPB, block_manager_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInstanceMetadataPB, filesystem_block_size_bytes_),
  };
  PathInstanceMetadataPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathInstanceMetadataPB_descriptor_,
      PathInstanceMetadataPB::default_instance_,
      PathInstanceMetadataPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInstanceMetadataPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathInstanceMetadataPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathInstanceMetadataPB));
  BlockIdPB_descriptor_ = file->message_type(3);
  static const int BlockIdPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIdPB, id_),
  };
  BlockIdPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockIdPB_descriptor_,
      BlockIdPB::default_instance_,
      BlockIdPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIdPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIdPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockIdPB));
  BlockRecordPB_descriptor_ = file->message_type(4);
  static const int BlockRecordPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, timestamp_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, length_),
  };
  BlockRecordPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockRecordPB_descriptor_,
      BlockRecordPB::default_instance_,
      BlockRecordPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRecordPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockRecordPB));
  BlockRecordType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2ffs_2ffs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceMetadataPB_descriptor_, &InstanceMetadataPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathSetPB_descriptor_, &PathSetPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathInstanceMetadataPB_descriptor_, &PathInstanceMetadataPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockIdPB_descriptor_, &BlockIdPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockRecordPB_descriptor_, &BlockRecordPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2ffs_2ffs_2eproto() {
  delete InstanceMetadataPB::default_instance_;
  delete InstanceMetadataPB_reflection_;
  delete PathSetPB::default_instance_;
  delete PathSetPB_reflection_;
  delete PathInstanceMetadataPB::default_instance_;
  delete PathInstanceMetadataPB_reflection_;
  delete BlockIdPB::default_instance_;
  delete BlockIdPB_reflection_;
  delete BlockRecordPB::default_instance_;
  delete BlockRecordPB_reflection_;
}

void protobuf_AddDesc_base_2ffs_2ffs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020base/fs/fs.proto\022\004base\"8\n\022InstanceMeta"
    "dataPB\022\014\n\004uuid\030\001 \002(\014\022\024\n\014format_stamp\030\002 \002"
    "(\t\",\n\tPathSetPB\022\014\n\004uuid\030\001 \002(\014\022\021\n\tall_uui"
    "ds\030\002 \003(\014\"|\n\026PathInstanceMetadataPB\022!\n\010pa"
    "th_set\030\001 \002(\0132\017.base.PathSetPB\022\032\n\022block_m"
    "anager_type\030\002 \002(\t\022#\n\033filesystem_block_si"
    "ze_bytes\030\003 \002(\004\"\027\n\tBlockIdPB\022\n\n\002id\030\001 \002(\006\""
    "\220\001\n\rBlockRecordPB\022!\n\010block_id\030\001 \002(\0132\017.ba"
    "se.BlockIdPB\022&\n\007op_type\030\002 \002(\0162\025.base.Blo"
    "ckRecordType\022\024\n\014timestamp_us\030\003 \002(\004\022\016\n\006of"
    "fset\030\004 \001(\003\022\016\n\006length\030\005 \001(\003*6\n\017BlockRecor"
    "dType\022\013\n\007UNKNOWN\020\000\022\n\n\006CREATE\020\001\022\n\n\006DELETE"
    "\020\002", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/fs/fs.proto", &protobuf_RegisterTypes);
  InstanceMetadataPB::default_instance_ = new InstanceMetadataPB();
  PathSetPB::default_instance_ = new PathSetPB();
  PathInstanceMetadataPB::default_instance_ = new PathInstanceMetadataPB();
  BlockIdPB::default_instance_ = new BlockIdPB();
  BlockRecordPB::default_instance_ = new BlockRecordPB();
  InstanceMetadataPB::default_instance_->InitAsDefaultInstance();
  PathSetPB::default_instance_->InitAsDefaultInstance();
  PathInstanceMetadataPB::default_instance_->InitAsDefaultInstance();
  BlockIdPB::default_instance_->InitAsDefaultInstance();
  BlockRecordPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2ffs_2ffs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2ffs_2ffs_2eproto {
  StaticDescriptorInitializer_base_2ffs_2ffs_2eproto() {
    protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  }
} static_descriptor_initializer_base_2ffs_2ffs_2eproto_;
const ::google::protobuf::EnumDescriptor* BlockRecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRecordType_descriptor_;
}
bool BlockRecordType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceMetadataPB::kUuidFieldNumber;
const int InstanceMetadataPB::kFormatStampFieldNumber;
#endif  // !_MSC_VER

InstanceMetadataPB::InstanceMetadataPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.InstanceMetadataPB)
}

void InstanceMetadataPB::InitAsDefaultInstance() {
}

InstanceMetadataPB::InstanceMetadataPB(const InstanceMetadataPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.InstanceMetadataPB)
}

void InstanceMetadataPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceMetadataPB::~InstanceMetadataPB() {
  // @@protoc_insertion_point(destructor:base.InstanceMetadataPB)
  SharedDtor();
}

void InstanceMetadataPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (format_stamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_stamp_;
  }
  if (this != default_instance_) {
  }
}

void InstanceMetadataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceMetadataPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceMetadataPB_descriptor_;
}

const InstanceMetadataPB& InstanceMetadataPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  return *default_instance_;
}

InstanceMetadataPB* InstanceMetadataPB::default_instance_ = NULL;

InstanceMetadataPB* InstanceMetadataPB::New() const {
  return new InstanceMetadataPB;
}

void InstanceMetadataPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_format_stamp()) {
      if (format_stamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_stamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceMetadataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.InstanceMetadataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_format_stamp;
        break;
      }

      // required string format_stamp = 2;
      case 2: {
        if (tag == 18) {
         parse_format_stamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format_stamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format_stamp().data(), this->format_stamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format_stamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.InstanceMetadataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.InstanceMetadataPB)
  return false;
#undef DO_
}

void InstanceMetadataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.InstanceMetadataPB)
  // required bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  // required string format_stamp = 2;
  if (has_format_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format_stamp().data(), this->format_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format_stamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.InstanceMetadataPB)
}

::google::protobuf::uint8* InstanceMetadataPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.InstanceMetadataPB)
  // required bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // required string format_stamp = 2;
  if (has_format_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format_stamp().data(), this->format_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format_stamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.InstanceMetadataPB)
  return target;
}

int InstanceMetadataPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // required string format_stamp = 2;
    if (has_format_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceMetadataPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceMetadataPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceMetadataPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceMetadataPB::MergeFrom(const InstanceMetadataPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_format_stamp()) {
      set_format_stamp(from.format_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceMetadataPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceMetadataPB::CopyFrom(const InstanceMetadataPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceMetadataPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InstanceMetadataPB::Swap(InstanceMetadataPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(format_stamp_, other->format_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceMetadataPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceMetadataPB_descriptor_;
  metadata.reflection = InstanceMetadataPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathSetPB::kUuidFieldNumber;
const int PathSetPB::kAllUuidsFieldNumber;
#endif  // !_MSC_VER

PathSetPB::PathSetPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.PathSetPB)
}

void PathSetPB::InitAsDefaultInstance() {
}

PathSetPB::PathSetPB(const PathSetPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.PathSetPB)
}

void PathSetPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathSetPB::~PathSetPB() {
  // @@protoc_insertion_point(destructor:base.PathSetPB)
  SharedDtor();
}

void PathSetPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void PathSetPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathSetPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathSetPB_descriptor_;
}

const PathSetPB& PathSetPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  return *default_instance_;
}

PathSetPB* PathSetPB::default_instance_ = NULL;

PathSetPB* PathSetPB::New() const {
  return new PathSetPB;
}

void PathSetPB::Clear() {
  if (has_uuid()) {
    if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uuid_->clear();
    }
  }
  all_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathSetPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.PathSetPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_all_uuids;
        break;
      }

      // repeated bytes all_uuids = 2;
      case 2: {
        if (tag == 18) {
         parse_all_uuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_all_uuids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_all_uuids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.PathSetPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.PathSetPB)
  return false;
#undef DO_
}

void PathSetPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.PathSetPB)
  // required bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  // repeated bytes all_uuids = 2;
  for (int i = 0; i < this->all_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->all_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.PathSetPB)
}

::google::protobuf::uint8* PathSetPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.PathSetPB)
  // required bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // repeated bytes all_uuids = 2;
  for (int i = 0; i < this->all_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->all_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.PathSetPB)
  return target;
}

int PathSetPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  // repeated bytes all_uuids = 2;
  total_size += 1 * this->all_uuids_size();
  for (int i = 0; i < this->all_uuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->all_uuids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathSetPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathSetPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathSetPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathSetPB::MergeFrom(const PathSetPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_uuids_.MergeFrom(from.all_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathSetPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSetPB::CopyFrom(const PathSetPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSetPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PathSetPB::Swap(PathSetPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    all_uuids_.Swap(&other->all_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathSetPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathSetPB_descriptor_;
  metadata.reflection = PathSetPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathInstanceMetadataPB::kPathSetFieldNumber;
const int PathInstanceMetadataPB::kBlockManagerTypeFieldNumber;
const int PathInstanceMetadataPB::kFilesystemBlockSizeBytesFieldNumber;
#endif  // !_MSC_VER

PathInstanceMetadataPB::PathInstanceMetadataPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.PathInstanceMetadataPB)
}

void PathInstanceMetadataPB::InitAsDefaultInstance() {
  path_set_ = const_cast< ::base::PathSetPB*>(&::base::PathSetPB::default_instance());
}

PathInstanceMetadataPB::PathInstanceMetadataPB(const PathInstanceMetadataPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.PathInstanceMetadataPB)
}

void PathInstanceMetadataPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_set_ = NULL;
  block_manager_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesystem_block_size_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathInstanceMetadataPB::~PathInstanceMetadataPB() {
  // @@protoc_insertion_point(destructor:base.PathInstanceMetadataPB)
  SharedDtor();
}

void PathInstanceMetadataPB::SharedDtor() {
  if (block_manager_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete block_manager_type_;
  }
  if (this != default_instance_) {
    delete path_set_;
  }
}

void PathInstanceMetadataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathInstanceMetadataPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathInstanceMetadataPB_descriptor_;
}

const PathInstanceMetadataPB& PathInstanceMetadataPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  return *default_instance_;
}

PathInstanceMetadataPB* PathInstanceMetadataPB::default_instance_ = NULL;

PathInstanceMetadataPB* PathInstanceMetadataPB::New() const {
  return new PathInstanceMetadataPB;
}

void PathInstanceMetadataPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_path_set()) {
      if (path_set_ != NULL) path_set_->::base::PathSetPB::Clear();
    }
    if (has_block_manager_type()) {
      if (block_manager_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        block_manager_type_->clear();
      }
    }
    filesystem_block_size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathInstanceMetadataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.PathInstanceMetadataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.PathSetPB path_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_block_manager_type;
        break;
      }

      // required string block_manager_type = 2;
      case 2: {
        if (tag == 18) {
         parse_block_manager_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_manager_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->block_manager_type().data(), this->block_manager_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "block_manager_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_filesystem_block_size_bytes;
        break;
      }

      // required uint64 filesystem_block_size_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_filesystem_block_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filesystem_block_size_bytes_)));
          set_has_filesystem_block_size_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.PathInstanceMetadataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.PathInstanceMetadataPB)
  return false;
#undef DO_
}

void PathInstanceMetadataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.PathInstanceMetadataPB)
  // required .base.PathSetPB path_set = 1;
  if (has_path_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_set(), output);
  }

  // required string block_manager_type = 2;
  if (has_block_manager_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_manager_type().data(), this->block_manager_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "block_manager_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->block_manager_type(), output);
  }

  // required uint64 filesystem_block_size_bytes = 3;
  if (has_filesystem_block_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->filesystem_block_size_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.PathInstanceMetadataPB)
}

::google::protobuf::uint8* PathInstanceMetadataPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.PathInstanceMetadataPB)
  // required .base.PathSetPB path_set = 1;
  if (has_path_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_set(), target);
  }

  // required string block_manager_type = 2;
  if (has_block_manager_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block_manager_type().data(), this->block_manager_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "block_manager_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_manager_type(), target);
  }

  // required uint64 filesystem_block_size_bytes = 3;
  if (has_filesystem_block_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->filesystem_block_size_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.PathInstanceMetadataPB)
  return target;
}

int PathInstanceMetadataPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.PathSetPB path_set = 1;
    if (has_path_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_set());
    }

    // required string block_manager_type = 2;
    if (has_block_manager_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_manager_type());
    }

    // required uint64 filesystem_block_size_bytes = 3;
    if (has_filesystem_block_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filesystem_block_size_bytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathInstanceMetadataPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathInstanceMetadataPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathInstanceMetadataPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathInstanceMetadataPB::MergeFrom(const PathInstanceMetadataPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_set()) {
      mutable_path_set()->::base::PathSetPB::MergeFrom(from.path_set());
    }
    if (from.has_block_manager_type()) {
      set_block_manager_type(from.block_manager_type());
    }
    if (from.has_filesystem_block_size_bytes()) {
      set_filesystem_block_size_bytes(from.filesystem_block_size_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathInstanceMetadataPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathInstanceMetadataPB::CopyFrom(const PathInstanceMetadataPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathInstanceMetadataPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_path_set()) {
    if (!this->path_set().IsInitialized()) return false;
  }
  return true;
}

void PathInstanceMetadataPB::Swap(PathInstanceMetadataPB* other) {
  if (other != this) {
    std::swap(path_set_, other->path_set_);
    std::swap(block_manager_type_, other->block_manager_type_);
    std::swap(filesystem_block_size_bytes_, other->filesystem_block_size_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathInstanceMetadataPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathInstanceMetadataPB_descriptor_;
  metadata.reflection = PathInstanceMetadataPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockIdPB::kIdFieldNumber;
#endif  // !_MSC_VER

BlockIdPB::BlockIdPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.BlockIdPB)
}

void BlockIdPB::InitAsDefaultInstance() {
}

BlockIdPB::BlockIdPB(const BlockIdPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.BlockIdPB)
}

void BlockIdPB::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockIdPB::~BlockIdPB() {
  // @@protoc_insertion_point(destructor:base.BlockIdPB)
  SharedDtor();
}

void BlockIdPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockIdPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockIdPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockIdPB_descriptor_;
}

const BlockIdPB& BlockIdPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  return *default_instance_;
}

BlockIdPB* BlockIdPB::default_instance_ = NULL;

BlockIdPB* BlockIdPB::New() const {
  return new BlockIdPB;
}

void BlockIdPB::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockIdPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.BlockIdPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.BlockIdPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.BlockIdPB)
  return false;
#undef DO_
}

void BlockIdPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.BlockIdPB)
  // required fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.BlockIdPB)
}

::google::protobuf::uint8* BlockIdPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.BlockIdPB)
  // required fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.BlockIdPB)
  return target;
}

int BlockIdPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockIdPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockIdPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockIdPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockIdPB::MergeFrom(const BlockIdPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockIdPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockIdPB::CopyFrom(const BlockIdPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIdPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlockIdPB::Swap(BlockIdPB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockIdPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockIdPB_descriptor_;
  metadata.reflection = BlockIdPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockRecordPB::kBlockIdFieldNumber;
const int BlockRecordPB::kOpTypeFieldNumber;
const int BlockRecordPB::kTimestampUsFieldNumber;
const int BlockRecordPB::kOffsetFieldNumber;
const int BlockRecordPB::kLengthFieldNumber;
#endif  // !_MSC_VER

BlockRecordPB::BlockRecordPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.BlockRecordPB)
}

void BlockRecordPB::InitAsDefaultInstance() {
  block_id_ = const_cast< ::base::BlockIdPB*>(&::base::BlockIdPB::default_instance());
}

BlockRecordPB::BlockRecordPB(const BlockRecordPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.BlockRecordPB)
}

void BlockRecordPB::SharedCtor() {
  _cached_size_ = 0;
  block_id_ = NULL;
  op_type_ = 0;
  timestamp_us_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  length_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockRecordPB::~BlockRecordPB() {
  // @@protoc_insertion_point(destructor:base.BlockRecordPB)
  SharedDtor();
}

void BlockRecordPB::SharedDtor() {
  if (this != default_instance_) {
    delete block_id_;
  }
}

void BlockRecordPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockRecordPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRecordPB_descriptor_;
}

const BlockRecordPB& BlockRecordPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ffs_2ffs_2eproto();
  return *default_instance_;
}

BlockRecordPB* BlockRecordPB::default_instance_ = NULL;

BlockRecordPB* BlockRecordPB::New() const {
  return new BlockRecordPB;
}

void BlockRecordPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlockRecordPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(timestamp_us_, op_type_);
    if (has_block_id()) {
      if (block_id_ != NULL) block_id_->::base::BlockIdPB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockRecordPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.BlockRecordPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .base.BlockIdPB block_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op_type;
        break;
      }

      // required .base.BlockRecordType op_type = 2;
      case 2: {
        if (tag == 16) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::base::BlockRecordType_IsValid(value)) {
            set_op_type(static_cast< ::base::BlockRecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_us;
        break;
      }

      // required uint64 timestamp_us = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_us_)));
          set_has_timestamp_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int64 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_length;
        break;
      }

      // optional int64 length = 5;
      case 5: {
        if (tag == 40) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.BlockRecordPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.BlockRecordPB)
  return false;
#undef DO_
}

void BlockRecordPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.BlockRecordPB)
  // required .base.BlockIdPB block_id = 1;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block_id(), output);
  }

  // required .base.BlockRecordType op_type = 2;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op_type(), output);
  }

  // required uint64 timestamp_us = 3;
  if (has_timestamp_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_us(), output);
  }

  // optional int64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  // optional int64 length = 5;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.BlockRecordPB)
}

::google::protobuf::uint8* BlockRecordPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.BlockRecordPB)
  // required .base.BlockIdPB block_id = 1;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block_id(), target);
  }

  // required .base.BlockRecordType op_type = 2;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op_type(), target);
  }

  // required uint64 timestamp_us = 3;
  if (has_timestamp_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_us(), target);
  }

  // optional int64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  // optional int64 length = 5;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.BlockRecordPB)
  return target;
}

int BlockRecordPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .base.BlockIdPB block_id = 1;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_id());
    }

    // required .base.BlockRecordType op_type = 2;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint64 timestamp_us = 3;
    if (has_timestamp_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_us());
    }

    // optional int64 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

    // optional int64 length = 5;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockRecordPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockRecordPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockRecordPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockRecordPB::MergeFrom(const BlockRecordPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_id()) {
      mutable_block_id()->::base::BlockIdPB::MergeFrom(from.block_id());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_timestamp_us()) {
      set_timestamp_us(from.timestamp_us());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockRecordPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRecordPB::CopyFrom(const BlockRecordPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRecordPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_block_id()) {
    if (!this->block_id().IsInitialized()) return false;
  }
  return true;
}

void BlockRecordPB::Swap(BlockRecordPB* other) {
  if (other != this) {
    std::swap(block_id_, other->block_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(timestamp_us_, other->timestamp_us_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockRecordPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockRecordPB_descriptor_;
  metadata.reflection = BlockRecordPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace base

// @@protoc_insertion_point(global_scope)
