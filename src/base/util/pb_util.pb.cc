// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/util/pb_util.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/util/pb_util.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {

namespace {

const ::google::protobuf::Descriptor* ContainerSupHeaderPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerSupHeaderPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2futil_2fpb_5futil_2eproto() {
  protobuf_AddDesc_base_2futil_2fpb_5futil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/util/pb_util.proto");
  GOOGLE_CHECK(file != NULL);
  ContainerSupHeaderPB_descriptor_ = file->message_type(0);
  static const int ContainerSupHeaderPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSupHeaderPB, protos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSupHeaderPB, pb_type_),
  };
  ContainerSupHeaderPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerSupHeaderPB_descriptor_,
      ContainerSupHeaderPB::default_instance_,
      ContainerSupHeaderPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSupHeaderPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSupHeaderPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerSupHeaderPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2futil_2fpb_5futil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerSupHeaderPB_descriptor_, &ContainerSupHeaderPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2futil_2fpb_5futil_2eproto() {
  delete ContainerSupHeaderPB::default_instance_;
  delete ContainerSupHeaderPB_reflection_;
}

void protobuf_AddDesc_base_2futil_2fpb_5futil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027base/util/pb_util.proto\022\004base\032 google/"
    "protobuf/descriptor.proto\"[\n\024ContainerSu"
    "pHeaderPB\0222\n\006protos\030\001 \002(\0132\".google.proto"
    "buf.FileDescriptorSet\022\017\n\007pb_type\030\002 \002(\t:6"
    "\n\006REDACT\022\035.google.protobuf.FieldOptions\030"
    "\321\206\003 \001(\010:\005false", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/util/pb_util.proto", &protobuf_RegisterTypes);
  ContainerSupHeaderPB::default_instance_ = new ContainerSupHeaderPB();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    50001, 8, false, false);
  ContainerSupHeaderPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2futil_2fpb_5futil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2futil_2fpb_5futil_2eproto {
  StaticDescriptorInitializer_base_2futil_2fpb_5futil_2eproto() {
    protobuf_AddDesc_base_2futil_2fpb_5futil_2eproto();
  }
} static_descriptor_initializer_base_2futil_2fpb_5futil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContainerSupHeaderPB::kProtosFieldNumber;
const int ContainerSupHeaderPB::kPbTypeFieldNumber;
#endif  // !_MSC_VER

ContainerSupHeaderPB::ContainerSupHeaderPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.ContainerSupHeaderPB)
}

void ContainerSupHeaderPB::InitAsDefaultInstance() {
  protos_ = const_cast< ::google::protobuf::FileDescriptorSet*>(&::google::protobuf::FileDescriptorSet::default_instance());
}

ContainerSupHeaderPB::ContainerSupHeaderPB(const ContainerSupHeaderPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.ContainerSupHeaderPB)
}

void ContainerSupHeaderPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protos_ = NULL;
  pb_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerSupHeaderPB::~ContainerSupHeaderPB() {
  // @@protoc_insertion_point(destructor:base.ContainerSupHeaderPB)
  SharedDtor();
}

void ContainerSupHeaderPB::SharedDtor() {
  if (pb_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pb_type_;
  }
  if (this != default_instance_) {
    delete protos_;
  }
}

void ContainerSupHeaderPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerSupHeaderPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerSupHeaderPB_descriptor_;
}

const ContainerSupHeaderPB& ContainerSupHeaderPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2futil_2fpb_5futil_2eproto();
  return *default_instance_;
}

ContainerSupHeaderPB* ContainerSupHeaderPB::default_instance_ = NULL;

ContainerSupHeaderPB* ContainerSupHeaderPB::New() const {
  return new ContainerSupHeaderPB;
}

void ContainerSupHeaderPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_protos()) {
      if (protos_ != NULL) protos_->::google::protobuf::FileDescriptorSet::Clear();
    }
    if (has_pb_type()) {
      if (pb_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pb_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerSupHeaderPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.ContainerSupHeaderPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .google.protobuf.FileDescriptorSet protos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pb_type;
        break;
      }

      // required string pb_type = 2;
      case 2: {
        if (tag == 18) {
         parse_pb_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pb_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pb_type().data(), this->pb_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.ContainerSupHeaderPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.ContainerSupHeaderPB)
  return false;
#undef DO_
}

void ContainerSupHeaderPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.ContainerSupHeaderPB)
  // required .google.protobuf.FileDescriptorSet protos = 1;
  if (has_protos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protos(), output);
  }

  // required string pb_type = 2;
  if (has_pb_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pb_type().data(), this->pb_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pb_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.ContainerSupHeaderPB)
}

::google::protobuf::uint8* ContainerSupHeaderPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.ContainerSupHeaderPB)
  // required .google.protobuf.FileDescriptorSet protos = 1;
  if (has_protos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->protos(), target);
  }

  // required string pb_type = 2;
  if (has_pb_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pb_type().data(), this->pb_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pb_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ContainerSupHeaderPB)
  return target;
}

int ContainerSupHeaderPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .google.protobuf.FileDescriptorSet protos = 1;
    if (has_protos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protos());
    }

    // required string pb_type = 2;
    if (has_pb_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pb_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerSupHeaderPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerSupHeaderPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerSupHeaderPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerSupHeaderPB::MergeFrom(const ContainerSupHeaderPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protos()) {
      mutable_protos()->::google::protobuf::FileDescriptorSet::MergeFrom(from.protos());
    }
    if (from.has_pb_type()) {
      set_pb_type(from.pb_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerSupHeaderPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerSupHeaderPB::CopyFrom(const ContainerSupHeaderPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerSupHeaderPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_protos()) {
    if (!this->protos().IsInitialized()) return false;
  }
  return true;
}

void ContainerSupHeaderPB::Swap(ContainerSupHeaderPB* other) {
  if (other != this) {
    std::swap(protos_, other->protos_);
    std::swap(pb_type_, other->pb_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerSupHeaderPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerSupHeaderPB_descriptor_;
  metadata.reflection = ContainerSupHeaderPB_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  REDACT(kREDACTFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

}  // namespace base

// @@protoc_insertion_point(global_scope)
