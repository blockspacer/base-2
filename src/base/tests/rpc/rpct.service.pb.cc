// THIS FILE IS AUTOGENERATED FROM base/tests/rpc/rpct.proto

#include "base/tests/rpc/rpct.pb.h"
#include "base/tests/rpc/rpct.service.pb.h"

#include <glog/logging.h>

#include "base/rpc/inbound_call.h"
#include "base/rpc/remote_method.h"
#include "base/rpc/rpc_context.h"
#include "base/rpc/service_if.h"
#include "base/util/metrics.h"

METRIC_DEFINE_histogram(server, handler_latency_base_rpct_CalculatorService_Add,
  "base.rpct.CalculatorService.Add RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpct.CalculatorService.Add() RPC requests",
  60000000LU, 2);

using google::protobuf::Message;
using base::MetricEntity;
using base::rpc::ResultTracker;
using base::rpc::RpcContext;
using base::rpc::RpcMethodInfo;
using std::unique_ptr;

namespace base {
namespace rpct {

CalculatorServiceIf::CalculatorServiceIf(const scoped_refptr<MetricEntity>& entity, const scoped_refptr<ResultTracker>& result_tracker) {
result_tracker_ = result_tracker;  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new AddRequestPB());
    mi->resp_prototype.reset(new AddResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpct_CalculatorService_Add.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->Add(static_cast<const AddRequestPB*>(req),
                       static_cast<AddResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["Add"] = std::move(mi);
  }
}

CalculatorServiceIf::~CalculatorServiceIf() {
}

std::string CalculatorServiceIf::service_name() const {
  return "base.rpct.CalculatorService";
}
std::string CalculatorServiceIf::static_service_name() {
  return "base.rpct.CalculatorService";
}

} // namespace rpct
} // namespace base
