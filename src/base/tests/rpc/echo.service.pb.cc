// THIS FILE IS AUTOGENERATED FROM base/tests/rpc/echo.proto

#include "base/tests/rpc/echo.pb.h"
#include "base/tests/rpc/echo.service.pb.h"

#include <glog/logging.h>

#include "base/rpc/inbound_call.h"
#include "base/rpc/remote_method.h"
#include "base/rpc/rpc_context.h"
#include "base/rpc/service_if.h"
#include "base/util/metrics.h"

METRIC_DEFINE_histogram(server, handler_latency_base_echo_service_EchoService_Echo,
  "base.echo_service.EchoService.Echo RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.echo_service.EchoService.Echo() RPC requests",
  60000000LU, 2);

using google::protobuf::Message;
using base::MetricEntity;
using base::rpc::ResultTracker;
using base::rpc::RpcContext;
using base::rpc::RpcMethodInfo;
using std::unique_ptr;

namespace base {
namespace echo_service {

EchoServiceIf::EchoServiceIf(const scoped_refptr<MetricEntity>& entity, const scoped_refptr<ResultTracker>& result_tracker) {
result_tracker_ = result_tracker;  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new EchoRequestPB());
    mi->resp_prototype.reset(new EchoResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_echo_service_EchoService_Echo.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->Echo(static_cast<const EchoRequestPB*>(req),
                       static_cast<EchoResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["Echo"] = std::move(mi);
  }
}

EchoServiceIf::~EchoServiceIf() {
}

std::string EchoServiceIf::service_name() const {
  return "base.echo_service.EchoService";
}
std::string EchoServiceIf::static_service_name() {
  return "base.echo_service.EchoService";
}

} // namespace echo_service
} // namespace base
