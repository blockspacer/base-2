// THIS FILE IS AUTOGENERATED FROM base/tests/rpc/rtest.proto

#ifndef BASE_RPC_RTEST_PROXY_DOT_H
#define BASE_RPC_RTEST_PROXY_DOT_H

#include "base/tests/rpc/rtest.pb.h"

#include "base/rpc/proxy.h"
#include "base/util/status.h"

namespace base { class Sockaddr; }
namespace base { namespace rpc { class UserCredentials; } }
namespace base {
namespace rpc_test {


class CalculatorServiceProxy : public ::base::rpc::Proxy {
 public:
  CalculatorServiceProxy(const std::shared_ptr< ::base::rpc::Messenger>
                &messenger, const ::base::Sockaddr &sockaddr);
  ~CalculatorServiceProxy();


  ::base::Status Add(const AddRequestPB &req, AddResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void AddAsync(const AddRequestPB &req,
                       AddResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status Sleep(const SleepRequestPB &req, SleepResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void SleepAsync(const SleepRequestPB &req,
                       SleepResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status Echo(const EchoRequestPB &req, EchoResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void EchoAsync(const EchoRequestPB &req,
                       EchoResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status WhoAmI(const WhoAmIRequestPB &req, WhoAmIResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void WhoAmIAsync(const WhoAmIRequestPB &req,
                       WhoAmIResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status TestArgumentsInDiffPackage(const base::rpc_test_diff_package::ReqDiffPackagePB &req, base::rpc_test_diff_package::RespDiffPackagePB *resp,
                          ::base::rpc::RpcController *controller);
  void TestArgumentsInDiffPackageAsync(const base::rpc_test_diff_package::ReqDiffPackagePB &req,
                       base::rpc_test_diff_package::RespDiffPackagePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status Panic(const PanicRequestPB &req, PanicResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void PanicAsync(const PanicRequestPB &req,
                       PanicResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status AddExactlyOnce(const ExactlyOnceRequestPB &req, ExactlyOnceResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void AddExactlyOnceAsync(const ExactlyOnceRequestPB &req,
                       ExactlyOnceResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);

  ::base::Status TestInvalidResponse(const TestInvalidResponseRequestPB &req, TestInvalidResponseResponsePB *resp,
                          ::base::rpc::RpcController *controller);
  void TestInvalidResponseAsync(const TestInvalidResponseRequestPB &req,
                       TestInvalidResponseResponsePB *response,
                       ::base::rpc::RpcController *controller,
                       const ::base::rpc::ResponseCallback &callback);
};

} // namespace rpc_test
} // namespace base

#endif
