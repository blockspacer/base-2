// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/tests/rpc/rpct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/tests/rpc/rpct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace base {
namespace rpct {

namespace {

const ::google::protobuf::Descriptor* AddRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRequestPartialPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRequestPartialPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddResponsePB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2ftests_2frpc_2frpct_2eproto() {
  protobuf_AddDesc_base_2ftests_2frpc_2frpct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/tests/rpc/rpct.proto");
  GOOGLE_CHECK(file != NULL);
  AddRequestPB_descriptor_ = file->message_type(0);
  static const int AddRequestPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, y_),
  };
  AddRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRequestPB_descriptor_,
      AddRequestPB::default_instance_,
      AddRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRequestPB));
  AddRequestPartialPB_descriptor_ = file->message_type(1);
  static const int AddRequestPartialPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPartialPB, x_),
  };
  AddRequestPartialPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRequestPartialPB_descriptor_,
      AddRequestPartialPB::default_instance_,
      AddRequestPartialPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPartialPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPartialPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRequestPartialPB));
  AddResponsePB_descriptor_ = file->message_type(2);
  static const int AddResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponsePB, result_),
  };
  AddResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddResponsePB_descriptor_,
      AddResponsePB::default_instance_,
      AddResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddResponsePB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2ftests_2frpc_2frpct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRequestPB_descriptor_, &AddRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRequestPartialPB_descriptor_, &AddRequestPartialPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddResponsePB_descriptor_, &AddResponsePB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2ftests_2frpc_2frpct_2eproto() {
  delete AddRequestPB::default_instance_;
  delete AddRequestPB_reflection_;
  delete AddRequestPartialPB::default_instance_;
  delete AddRequestPartialPB_reflection_;
  delete AddResponsePB::default_instance_;
  delete AddResponsePB_reflection_;
}

void protobuf_AddDesc_base_2ftests_2frpc_2frpct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::base::rpc::protobuf_AddDesc_base_2frpc_2frpc_5fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031base/tests/rpc/rpct.proto\022\tbase.rpct\032\031"
    "base/rpc/rpc_header.proto\"$\n\014AddRequestP"
    "B\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\" \n\023AddRequestPar"
    "tialPB\022\t\n\001x\030\001 \002(\r\"\037\n\rAddResponsePB\022\016\n\006re"
    "sult\030\001 \002(\r2M\n\021CalculatorService\0228\n\003Add\022\027"
    ".base.rpct.AddRequestPB\032\030.base.rpct.AddR"
    "esponsePB", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/tests/rpc/rpct.proto", &protobuf_RegisterTypes);
  AddRequestPB::default_instance_ = new AddRequestPB();
  AddRequestPartialPB::default_instance_ = new AddRequestPartialPB();
  AddResponsePB::default_instance_ = new AddResponsePB();
  AddRequestPB::default_instance_->InitAsDefaultInstance();
  AddRequestPartialPB::default_instance_->InitAsDefaultInstance();
  AddResponsePB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2ftests_2frpc_2frpct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2ftests_2frpc_2frpct_2eproto {
  StaticDescriptorInitializer_base_2ftests_2frpc_2frpct_2eproto() {
    protobuf_AddDesc_base_2ftests_2frpc_2frpct_2eproto();
  }
} static_descriptor_initializer_base_2ftests_2frpc_2frpct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AddRequestPB::kXFieldNumber;
const int AddRequestPB::kYFieldNumber;
#endif  // !_MSC_VER

AddRequestPB::AddRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.rpct.AddRequestPB)
}

void AddRequestPB::InitAsDefaultInstance() {
}

AddRequestPB::AddRequestPB(const AddRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.rpct.AddRequestPB)
}

void AddRequestPB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRequestPB::~AddRequestPB() {
  // @@protoc_insertion_point(destructor:base.rpct.AddRequestPB)
  SharedDtor();
}

void AddRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRequestPB_descriptor_;
}

const AddRequestPB& AddRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ftests_2frpc_2frpct_2eproto();
  return *default_instance_;
}

AddRequestPB* AddRequestPB::default_instance_ = NULL;

AddRequestPB* AddRequestPB::New() const {
  return new AddRequestPB;
}

void AddRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.rpct.AddRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.rpct.AddRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.rpct.AddRequestPB)
  return false;
#undef DO_
}

void AddRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.rpct.AddRequestPB)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.rpct.AddRequestPB)
}

::google::protobuf::uint8* AddRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.rpct.AddRequestPB)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.rpct.AddRequestPB)
  return target;
}

int AddRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRequestPB::MergeFrom(const AddRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequestPB::CopyFrom(const AddRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddRequestPB::Swap(AddRequestPB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRequestPB_descriptor_;
  metadata.reflection = AddRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRequestPartialPB::kXFieldNumber;
#endif  // !_MSC_VER

AddRequestPartialPB::AddRequestPartialPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.rpct.AddRequestPartialPB)
}

void AddRequestPartialPB::InitAsDefaultInstance() {
}

AddRequestPartialPB::AddRequestPartialPB(const AddRequestPartialPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.rpct.AddRequestPartialPB)
}

void AddRequestPartialPB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRequestPartialPB::~AddRequestPartialPB() {
  // @@protoc_insertion_point(destructor:base.rpct.AddRequestPartialPB)
  SharedDtor();
}

void AddRequestPartialPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRequestPartialPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRequestPartialPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRequestPartialPB_descriptor_;
}

const AddRequestPartialPB& AddRequestPartialPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ftests_2frpc_2frpct_2eproto();
  return *default_instance_;
}

AddRequestPartialPB* AddRequestPartialPB::default_instance_ = NULL;

AddRequestPartialPB* AddRequestPartialPB::New() const {
  return new AddRequestPartialPB;
}

void AddRequestPartialPB::Clear() {
  x_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRequestPartialPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.rpct.AddRequestPartialPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.rpct.AddRequestPartialPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.rpct.AddRequestPartialPB)
  return false;
#undef DO_
}

void AddRequestPartialPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.rpct.AddRequestPartialPB)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.rpct.AddRequestPartialPB)
}

::google::protobuf::uint8* AddRequestPartialPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.rpct.AddRequestPartialPB)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.rpct.AddRequestPartialPB)
  return target;
}

int AddRequestPartialPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRequestPartialPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRequestPartialPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRequestPartialPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRequestPartialPB::MergeFrom(const AddRequestPartialPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRequestPartialPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequestPartialPB::CopyFrom(const AddRequestPartialPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequestPartialPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddRequestPartialPB::Swap(AddRequestPartialPB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRequestPartialPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRequestPartialPB_descriptor_;
  metadata.reflection = AddRequestPartialPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddResponsePB::kResultFieldNumber;
#endif  // !_MSC_VER

AddResponsePB::AddResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:base.rpct.AddResponsePB)
}

void AddResponsePB::InitAsDefaultInstance() {
}

AddResponsePB::AddResponsePB(const AddResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:base.rpct.AddResponsePB)
}

void AddResponsePB::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddResponsePB::~AddResponsePB() {
  // @@protoc_insertion_point(destructor:base.rpct.AddResponsePB)
  SharedDtor();
}

void AddResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddResponsePB_descriptor_;
}

const AddResponsePB& AddResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2ftests_2frpc_2frpct_2eproto();
  return *default_instance_;
}

AddResponsePB* AddResponsePB::default_instance_ = NULL;

AddResponsePB* AddResponsePB::New() const {
  return new AddResponsePB;
}

void AddResponsePB::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:base.rpct.AddResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:base.rpct.AddResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:base.rpct.AddResponsePB)
  return false;
#undef DO_
}

void AddResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:base.rpct.AddResponsePB)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:base.rpct.AddResponsePB)
}

::google::protobuf::uint8* AddResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.rpct.AddResponsePB)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.rpct.AddResponsePB)
  return target;
}

int AddResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddResponsePB::MergeFrom(const AddResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResponsePB::CopyFrom(const AddResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddResponsePB::Swap(AddResponsePB* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddResponsePB_descriptor_;
  metadata.reflection = AddResponsePB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpct
}  // namespace base

// @@protoc_insertion_point(global_scope)
