// THIS FILE IS AUTOGENERATED FROM base/tests/rpc/rtest.proto

#ifndef BASE_RPC_RTEST_SERVICE_IF_DOT_H
#define BASE_RPC_RTEST_SERVICE_IF_DOT_H

#include "base/tests/rpc/rtest.pb.h"

#include <functional>
#include <memory>
#include <string>

#include "base/rpc/rpc_header.pb.h"
#include "base/rpc/service_if.h"

namespace base {
class MetricEntity;
namespace rpc {
class Messenger;
class ResultTracker;
class RpcContext;
} // namespace rpc
} // namespace base

namespace base {
namespace rpc_test {

class CalculatorServiceIf : public ::base::rpc::GeneratedServiceIf {
 public:
  explicit CalculatorServiceIf(const scoped_refptr<::base::MetricEntity>& entity, const scoped_refptr<::base::rpc::ResultTracker>& result_tracker);
  virtual ~CalculatorServiceIf();
  std::string service_name() const override;
  static std::string static_service_name();

  virtual void Add(const AddRequestPB *req,
     AddResponsePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void Sleep(const SleepRequestPB *req,
     SleepResponsePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void Echo(const EchoRequestPB *req,
     EchoResponsePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void WhoAmI(const WhoAmIRequestPB *req,
     WhoAmIResponsePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void TestArgumentsInDiffPackage(const base::rpc_test_diff_package::ReqDiffPackagePB *req,
     base::rpc_test_diff_package::RespDiffPackagePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void Panic(const PanicRequestPB *req,
     PanicResponsePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void AddExactlyOnce(const ExactlyOnceRequestPB *req,
     ExactlyOnceResponsePB *resp, ::base::rpc::RpcContext *context) = 0;
  virtual void TestInvalidResponse(const TestInvalidResponseRequestPB *req,
     TestInvalidResponseResponsePB *resp, ::base::rpc::RpcContext *context) = 0;

};

} // namespace rpc_test
} // namespace base

#endif
