// THIS FILE IS AUTOGENERATED FROM base/tests/rpc/rtest.proto

#include "base/tests/rpc/rtest.proxy.pb.h"

#include "base/rpc/outbound_call.h"
#include "base/net/sockaddr.h"

namespace base {
namespace rpc_test {

CalculatorServiceProxy::CalculatorServiceProxy(
   const std::shared_ptr< ::base::rpc::Messenger> &messenger,
   const ::base::Sockaddr &remote)
  : Proxy(messenger, remote, "base.rpc_test.CalculatorService") {
}

CalculatorServiceProxy::~CalculatorServiceProxy() {
}


::base::Status CalculatorServiceProxy::Add(const AddRequestPB &req, AddResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("Add", req, resp, controller);
}

void CalculatorServiceProxy::AddAsync(const AddRequestPB &req,
                     AddResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("Add", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::Sleep(const SleepRequestPB &req, SleepResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("Sleep", req, resp, controller);
}

void CalculatorServiceProxy::SleepAsync(const SleepRequestPB &req,
                     SleepResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("Sleep", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::Echo(const EchoRequestPB &req, EchoResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("Echo", req, resp, controller);
}

void CalculatorServiceProxy::EchoAsync(const EchoRequestPB &req,
                     EchoResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("Echo", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::WhoAmI(const WhoAmIRequestPB &req, WhoAmIResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("WhoAmI", req, resp, controller);
}

void CalculatorServiceProxy::WhoAmIAsync(const WhoAmIRequestPB &req,
                     WhoAmIResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("WhoAmI", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::TestArgumentsInDiffPackage(const base::rpc_test_diff_package::ReqDiffPackagePB &req, base::rpc_test_diff_package::RespDiffPackagePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("TestArgumentsInDiffPackage", req, resp, controller);
}

void CalculatorServiceProxy::TestArgumentsInDiffPackageAsync(const base::rpc_test_diff_package::ReqDiffPackagePB &req,
                     base::rpc_test_diff_package::RespDiffPackagePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("TestArgumentsInDiffPackage", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::Panic(const PanicRequestPB &req, PanicResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("Panic", req, resp, controller);
}

void CalculatorServiceProxy::PanicAsync(const PanicRequestPB &req,
                     PanicResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("Panic", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::AddExactlyOnce(const ExactlyOnceRequestPB &req, ExactlyOnceResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("AddExactlyOnce", req, resp, controller);
}

void CalculatorServiceProxy::AddExactlyOnceAsync(const ExactlyOnceRequestPB &req,
                     ExactlyOnceResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("AddExactlyOnce", req, resp, controller, callback);
}

::base::Status CalculatorServiceProxy::TestInvalidResponse(const TestInvalidResponseRequestPB &req, TestInvalidResponseResponsePB *resp,
                                     ::base::rpc::RpcController *controller) {
  return SyncRequest("TestInvalidResponse", req, resp, controller);
}

void CalculatorServiceProxy::TestInvalidResponseAsync(const TestInvalidResponseRequestPB &req,
                     TestInvalidResponseResponsePB *resp, ::base::rpc::RpcController *controller,
                     const ::base::rpc::ResponseCallback &callback) {
  AsyncRequest("TestInvalidResponse", req, resp, controller, callback);
}

} // namespace rpc_test
} // namespace base
