// THIS FILE IS AUTOGENERATED FROM base/tests/rpc/rtest.proto

#include "base/tests/rpc/rtest.pb.h"
#include "base/tests/rpc/rtest.service.pb.h"

#include <glog/logging.h>

#include "base/rpc/inbound_call.h"
#include "base/rpc/remote_method.h"
#include "base/rpc/rpc_context.h"
#include "base/rpc/service_if.h"
#include "base/util/metrics.h"

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_Add,
  "base.rpc_test.CalculatorService.Add RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.Add() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_Sleep,
  "base.rpc_test.CalculatorService.Sleep RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.Sleep() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_Echo,
  "base.rpc_test.CalculatorService.Echo RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.Echo() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_WhoAmI,
  "base.rpc_test.CalculatorService.WhoAmI RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.WhoAmI() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_TestArgumentsInDiffPackage,
  "base.rpc_test.CalculatorService.TestArgumentsInDiffPackage RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.TestArgumentsInDiffPackage() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_Panic,
  "base.rpc_test.CalculatorService.Panic RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.Panic() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_AddExactlyOnce,
  "base.rpc_test.CalculatorService.AddExactlyOnce RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.AddExactlyOnce() RPC requests",
  60000000LU, 2);

METRIC_DEFINE_histogram(server, handler_latency_base_rpc_test_CalculatorService_TestInvalidResponse,
  "base.rpc_test.CalculatorService.TestInvalidResponse RPC Time",
  base::MetricUnit::kMicroseconds,
  "Microseconds spent handling base.rpc_test.CalculatorService.TestInvalidResponse() RPC requests",
  60000000LU, 2);

using google::protobuf::Message;
using base::MetricEntity;
using base::rpc::ResultTracker;
using base::rpc::RpcContext;
using base::rpc::RpcMethodInfo;
using std::unique_ptr;

namespace base {
namespace rpc_test {

CalculatorServiceIf::CalculatorServiceIf(const scoped_refptr<MetricEntity>& entity, const scoped_refptr<ResultTracker>& result_tracker) {
result_tracker_ = result_tracker;  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new AddRequestPB());
    mi->resp_prototype.reset(new AddResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_Add.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->Add(static_cast<const AddRequestPB*>(req),
                       static_cast<AddResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["Add"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new SleepRequestPB());
    mi->resp_prototype.reset(new SleepResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_Sleep.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->Sleep(static_cast<const SleepRequestPB*>(req),
                       static_cast<SleepResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["Sleep"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new EchoRequestPB());
    mi->resp_prototype.reset(new EchoResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_Echo.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->Echo(static_cast<const EchoRequestPB*>(req),
                       static_cast<EchoResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["Echo"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new WhoAmIRequestPB());
    mi->resp_prototype.reset(new WhoAmIResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_WhoAmI.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->WhoAmI(static_cast<const WhoAmIRequestPB*>(req),
                       static_cast<WhoAmIResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["WhoAmI"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new base::rpc_test_diff_package::ReqDiffPackagePB());
    mi->resp_prototype.reset(new base::rpc_test_diff_package::RespDiffPackagePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_TestArgumentsInDiffPackage.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->TestArgumentsInDiffPackage(static_cast<const base::rpc_test_diff_package::ReqDiffPackagePB*>(req),
                       static_cast<base::rpc_test_diff_package::RespDiffPackagePB*>(resp),
                       ctx);
    };
    methods_by_name_["TestArgumentsInDiffPackage"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new PanicRequestPB());
    mi->resp_prototype.reset(new PanicResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_Panic.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->Panic(static_cast<const PanicRequestPB*>(req),
                       static_cast<PanicResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["Panic"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new ExactlyOnceRequestPB());
    mi->resp_prototype.reset(new ExactlyOnceResponsePB());
    mi->track_result =  true;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_AddExactlyOnce.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->AddExactlyOnce(static_cast<const ExactlyOnceRequestPB*>(req),
                       static_cast<ExactlyOnceResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["AddExactlyOnce"] = std::move(mi);
  }
  {
    scoped_refptr<RpcMethodInfo> mi(new RpcMethodInfo());
    mi->req_prototype.reset(new TestInvalidResponseRequestPB());
    mi->resp_prototype.reset(new TestInvalidResponseResponsePB());
    mi->track_result = false;
    mi->handler_latency_histogram =
        METRIC_handler_latency_base_rpc_test_CalculatorService_TestInvalidResponse.Instantiate(entity);
    mi->func = [this](const Message* req, Message* resp, RpcContext* ctx) {
      this->TestInvalidResponse(static_cast<const TestInvalidResponseRequestPB*>(req),
                       static_cast<TestInvalidResponseResponsePB*>(resp),
                       ctx);
    };
    methods_by_name_["TestInvalidResponse"] = std::move(mi);
  }
}

CalculatorServiceIf::~CalculatorServiceIf() {
}

std::string CalculatorServiceIf::service_name() const {
  return "base.rpc_test.CalculatorService";
}
std::string CalculatorServiceIf::static_service_name() {
  return "base.rpc_test.CalculatorService";
}

} // namespace rpc_test
} // namespace base
