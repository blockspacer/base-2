

struct EngineOptions options;
options.hostname = "localhost";
options.username = "root";
options.password = "11111";
options.database = "test_db";
options.reconnect_if_lost = true;

DBFactoryBuilder builder;
std::unique_ptr<DBFactory> db_factory;

Status s = builder.set_engine("mysql")
                  .set_hostname("localhost")
                  .set_username("root")
                  .set_password("111111")
                  .set_database("test_db")
                  .set_database("test_db")
                  .set_reconnect(true)
                  .Build(&db_factory);

if (!s.ok) {
  cerr << s.ToString() << endl;
  abort();
}


std::unique_ptr<DBConnection> conn;

s = db_factory->Create(&conn);

if (!s.ok()) {
  cerr << s.ToString() << enld;
  abort();
}

conn->Execute("DROP TABLE IF EXISTS test");
conn->Execute("CREATE TABLE test (id ....)");
std::vector<DBResult*> result_set = conn->GetResultSet();

std::unique_ptr<DBStatement> statement;
s = conn->CreateStatement("INSERT INTO test (id, name, created_at)"
                          " VALUES (?, ?, NOW())", &statement);
statement-> 
